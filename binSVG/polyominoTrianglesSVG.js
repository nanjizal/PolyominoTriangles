// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = ["haxe","unit","TestResult"];
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.success == false) {
				buf_b += "* ";
				buf_b += Std.string(val.classname);
				buf_b += "::";
				buf_b += Std.string(val.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(val.posInfos != null) {
					buf_b += Std.string(val.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(val.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(val.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(val.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(val.error);
				buf_b += "\n";
				if(val.backtrace != null) {
					buf_b += Std.string(val.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new List();
};
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.runCase(val);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = t == null ? null : js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(f,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = f;
				t.setup();
				try {
					var args = [];
					field.apply(t,args);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( $e0 ) {
					haxe_CallStack.lastException = $e0;
					if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
					if( js_Boot.__instanceof($e0,haxe_unit_TestStatus) ) {
						var e = $e0;
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
					var e1 = $e0;
					haxe_unit_TestRunner.print("E");
					if(e1.message != null) {
						t.currentTest.error = "exception thrown : " + Std.string(e1) + " [" + Std.string(e1.message) + "]";
					} else {
						t.currentTest.error = "exception thrown : " + Std.string(e1);
					}
					var tmp1 = haxe_CallStack.exceptionStack();
					t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$ = {};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.__name__ = ["htmlHelper","svg","_SvgRoot","SvgRoot_Impl_"];
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$._new = function(e) {
	var this1;
	if(e == null) {
		var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
		var element = svgElement;
		var style = element.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		window.document.body.appendChild(element);
		this1 = svgElement;
	} else {
		this1 = e;
	}
	return this1;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.create = function() {
	var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	var element = svgElement;
	var style = element.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	window.document.body.appendChild(element);
	return svgElement;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.set_width = function(this1,width_) {
	this1.setAttribute("width",width_ == null ? "null" : "" + width_);
	return width_;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.get_width = function(this1) {
	return Std.parseInt(this1.getAttribute("width"));
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.set_height = function(this1,height_) {
	this1.setAttribute("height",height_ == null ? "null" : "" + height_);
	return height_;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.get_height = function(this1) {
	return Std.parseInt(this1.getAttribute("height"));
};
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = ["htmlHelper","tools","AnimateTimer"];
htmlHelper_tools_AnimateTimer.create = function() {
	if(htmlHelper_tools_AnimateTimer.s != null) {
		return;
	}
	htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
	htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
	window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
	htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
	htmlHelper_tools_AnimateTimer.loop(60.0);
};
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
htmlHelper_tools_AnimateTimer.kill = function() {
	if(htmlHelper_tools_AnimateTimer.s == null) {
		return;
	}
	window.document.getElementsByTagName("head")[0].removeChild(htmlHelper_tools_AnimateTimer.s);
	htmlHelper_tools_AnimateTimer.onFrame = null;
	htmlHelper_tools_AnimateTimer.s = null;
};
htmlHelper_tools_AnimateTimer.tween = function(t,b,e,d,f) {
	if(t > d) {
		return null;
	}
	return f(t,b,e - b,d);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var justDrawing_Surface = function(graphics_) {
	this.inFill = false;
	this.prevY = 0;
	this.prevX = 0;
	this.graphics = graphics_;
	this.inFill = false;
	this.svgShapes = [];
};
justDrawing_Surface.__name__ = ["justDrawing","Surface"];
justDrawing_Surface.getColor = function(col,alpha) {
	var str;
	if(alpha != null && alpha != 1.0) {
		str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
	} else {
		str = "#" + StringTools.hex(col,6);
	}
	return str;
};
justDrawing_Surface.arcTan = function(p0,p1) {
	return Math.atan2(p1.y - p0.y,p1.x - p0.x);
};
justDrawing_Surface.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justDrawing_Surface.quadraticBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justDrawing_Surface._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justDrawing_Surface.cubicBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,3) * arr[0].x + 3 * Math.pow(u,2) * t * arr[1].x + 3 * u * Math.pow(t,2) * arr[2].x + Math.pow(t,3) * arr[3].x, y : Math.pow(u1,3) * arr[0].y + 3 * Math.pow(u1,2) * t * arr[1].y + 3 * u1 * Math.pow(t,2) * arr[2].y + Math.pow(t,3) * arr[3].y};
};
justDrawing_Surface._cubicBezier = function(t,startPoint,controlPoint1,controlPoint2,endPoint) {
	var u = 1 - t;
	return Math.pow(u,3) * startPoint + 3 * Math.pow(u,2) * t * controlPoint1 + 3 * u * Math.pow(t,2) * controlPoint2 + Math.pow(t,3) * endPoint;
};
justDrawing_Surface.prototype = {
	prevX: null
	,prevY: null
	,lineColor: null
	,lineAlpha: null
	,fillColor: null
	,fillAlpha: null
	,thickness: null
	,width: null
	,height: null
	,inFill: null
	,graphics: null
	,repaint: function() {
		var _g = 0;
		var _g1 = this.svgShapes;
		while(_g < _g1.length) {
			var all = _g1[_g];
			++_g;
			this.graphics.appendChild(all);
		}
	}
	,remove: function(element) {
		if(!this.graphics.hasChildNodes()) {
			return;
		}
		this.graphics.removeChild(element);
	}
	,svgShapes: null
	,clear: function() {
		this.currPathD = "";
		while(this.svgShapes.length != 0) this.remove(this.svgShapes.pop());
	}
	,lineStyle: function(thick,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.thickness = thick;
		this.lineColor = color;
		this.lineAlpha = alpha;
	}
	,currPathD: null
	,beginFill: function(color,alpha) {
		this.fillColor = color;
		this.fillAlpha = alpha;
		this.inFill = true;
		this.currPathD = "";
		var svgPath = window.document.createElementNS("http://www.w3.org/2000/svg","path");
		this.svgShapes.push(svgPath);
	}
	,endFill: function() {
		this.inFill = false;
		haxe_Log.trace(" endFill " + this.currPathD,{ fileName : "Surface.hx", lineNumber : 252, className : "justDrawing.Surface", methodName : "endFill"});
		var svgPath = this.svgShapes[this.svgShapes.length - 1];
		svgPath.setAttribute("d",this.currPathD + "Z");
		var col = this.fillColor;
		var alpha = this.fillAlpha;
		var str;
		if(alpha != null && alpha != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		svgPath.setAttribute("fill",str);
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		svgPath.setAttribute("stroke",str1);
		svgPath.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(svgPath);
		this.currPathD = "";
	}
	,moveTo: function(x,y) {
		this.prevX = x;
		this.prevY = y;
		if(this.inFill) {
			this.currPathD += "M" + x + "," + y + " ";
		}
	}
	,lineTo: function(x,y) {
		if(this.inFill) {
			if(this.inFill) {
				this.currPathD += "" + "L" + x + "," + y + " ";
			}
		} else {
			var aLine = window.document.createElementNS("http://www.w3.org/2000/svg","line");
			aLine.setAttribute("x1",Std.string(this.prevX));
			aLine.setAttribute("y1",Std.string(this.prevY));
			aLine.setAttribute("x2",x == null ? "null" : "" + x);
			aLine.setAttribute("y2",y == null ? "null" : "" + y);
			var col = this.lineColor;
			var alpha = this.lineAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			aLine.setAttribute("stroke",str);
			aLine.setAttribute("stroke-width",Std.string(this.thickness));
			this.graphics.appendChild(aLine);
			this.svgShapes.push(aLine);
		}
		this.prevX = x;
		this.prevY = y;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		var quadString = "" + "C" + x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3;
		if(this.inFill) {
			this.currPathD += quadString;
		} else {
			var svgPath = window.document.createElementNS("http://www.w3.org/2000/svg","path");
			svgPath.setAttribute("d",quadString + "Z");
			var col = this.lineColor;
			var alpha = this.lineAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgPath.setAttribute("stroke",str);
			svgPath.setAttribute("stroke-width",Std.string(this.thickness));
			this.graphics.appendChild(svgPath);
			this.svgShapes.push(svgPath);
		}
	}
	,quadTo: function(cx,cy,ax,ay) {
		var quadString = "" + "Q" + cx + "," + cy + " " + ax + "," + ay + " ";
		if(this.inFill) {
			this.currPathD += quadString;
		} else {
			var svgPath = window.document.createElementNS("http://www.w3.org/2000/svg","path");
			svgPath.setAttribute("d",quadString + "Z");
			var col = this.lineColor;
			var alpha = this.lineAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgPath.setAttribute("stroke",str);
			svgPath.setAttribute("stroke-width",Std.string(this.thickness));
			this.graphics.appendChild(svgPath);
			this.svgShapes.push(svgPath);
		}
	}
	,drawCircle: function(cx,cy,radius) {
		var svgCircle = window.document.createElementNS("http://www.w3.org/2000/svg","circle");
		svgCircle.setAttribute("cx",cx == null ? "null" : "" + cx);
		svgCircle.setAttribute("cy",cy == null ? "null" : "" + cy);
		svgCircle.setAttribute("r",radius == null ? "null" : "" + radius);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgCircle.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		svgCircle.setAttribute("stroke",str1);
		svgCircle.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(svgCircle);
		this.svgShapes.push(svgCircle);
	}
	,drawRect: function(x,y,width,height) {
		var svgRect = window.document.createElementNS("http://www.w3.org/2000/svg","rect");
		svgRect.setAttribute("x",x == null ? "null" : "" + x);
		svgRect.setAttribute("y",y == null ? "null" : "" + y);
		svgRect.setAttribute("width",width == null ? "null" : "" + width);
		svgRect.setAttribute("height",height == null ? "null" : "" + height);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgRect.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		svgRect.setAttribute("stroke",str1);
		svgRect.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(svgRect);
		this.svgShapes.push(svgRect);
	}
	,drawEquilaterialTri: function(x,y,radius,direction) {
		var third = Math.PI * 2 / 3;
		var points = [];
		var x1;
		var y1;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			x1 = x + radius * Math.cos(direction + i * third);
			y1 = y + radius * Math.sin(direction + i * third);
			points.push(x1);
			points.push(y1);
		}
		this.drawTri(points);
	}
	,drawTri: function(points) {
		var aTri = window.document.createElementNS("http://www.w3.org/2000/svg","polygon");
		var pointsStr = "";
		var x1;
		var y1;
		var i = 0;
		while(i < points.length) {
			pointsStr += Std.string(points[i]) + "," + Std.string(points[i + 1]) + " ";
			i += 2;
		}
		aTri.setAttribute("points",pointsStr);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			aTri.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		aTri.setAttribute("stroke",str1);
		aTri.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(aTri);
		this.svgShapes.push(aTri);
	}
	,__class__: justDrawing_Surface
};
var justTriangles_Bezier = function() { };
justTriangles_Bezier.__name__ = ["justTriangles","Bezier"];
justTriangles_Bezier.quadratic = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justTriangles_Bezier._quadratic = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justTriangles_Bezier.cubic = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,3) * arr[0].x + 3 * Math.pow(u,2) * t * arr[1].x + 3 * u * Math.pow(t,2) * arr[2].x + Math.pow(t,3) * arr[3].x, y : Math.pow(u1,3) * arr[0].y + 3 * Math.pow(u1,2) * t * arr[1].y + 3 * u1 * Math.pow(t,2) * arr[2].y + Math.pow(t,3) * arr[3].y};
};
justTriangles_Bezier._cubic = function(t,startPoint,controlPoint1,controlPoint2,endPoint) {
	var u = 1 - t;
	return Math.pow(u,3) * startPoint + 3 * Math.pow(u,2) * t * controlPoint1 + 3 * u * Math.pow(t,2) * controlPoint2 + Math.pow(t,3) * endPoint;
};
var justTriangles_Draw = function() {
	this.thickRatio = 1024;
};
justTriangles_Draw.__name__ = ["justTriangles","Draw"];
justTriangles_Draw.set_thick = function(val) {
	if(val < 0) {
		val = 0.00001;
	}
	justTriangles_Draw.thickness = val / 1024;
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.get_thick = function() {
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.packManFill = function(id,dx,dy,radius,start,dA) {
	var centre = { x : dx, y : dy};
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / 60;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw.p3;
		justTriangles_Draw.drawTri(id,false,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
	}
};
justTriangles_Draw.roundedRectangleOutline = function(id,dx,dy,hi,wid,radiusSmall,radius) {
	var dia = radius * 2;
	var dy1 = dy + hi;
	var start = -Math.PI - Math.PI / 2;
	var dA = Math.PI / 2;
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / 120;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radiusSmall * Math.cos(nextAngle), y : dy1 + radiusSmall * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radiusSmall * Math.cos(nextAngle), y : dy1 + radiusSmall * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	var dx1 = dx + wid;
	var dy2 = dy + hi;
	var dA1 = Math.PI / 2;
	var p1 = [];
	var angle1 = 0;
	var angleInc1 = Math.PI * 2 / 120;
	var nextAngle1;
	if(dA1 < 0) {
		var i2 = -1;
		while(true) {
			angle1 = i2 * angleInc1;
			--i2;
			nextAngle1 = angle1;
			if(angle1 <= dA1) {
				break;
			}
			p1.push({ x : dx1 + radiusSmall * Math.cos(nextAngle1), y : dy2 + radiusSmall * Math.sin(nextAngle1)});
		}
	} else {
		var i3 = -1;
		while(true) {
			angle1 = i3 * angleInc1;
			++i3;
			nextAngle1 = angle1;
			if(angle1 >= dA1 + angleInc1) {
				break;
			}
			p1.push({ x : dx1 + radiusSmall * Math.cos(nextAngle1), y : dy2 + radiusSmall * Math.sin(nextAngle1)});
		}
	}
	p1.reverse();
	var dx2 = dx + wid;
	var start1 = -Math.PI / 2;
	var dA2 = Math.PI / 2;
	var p2 = [];
	var angle2 = 0;
	var angleInc2 = Math.PI * 2 / 120;
	var nextAngle2;
	if(dA2 < 0) {
		var i4 = -1;
		while(true) {
			angle2 = i4 * angleInc2;
			--i4;
			nextAngle2 = angle2 + start1;
			if(angle2 <= dA2) {
				break;
			}
			p2.push({ x : dx2 + radiusSmall * Math.cos(nextAngle2), y : dy + radiusSmall * Math.sin(nextAngle2)});
		}
	} else {
		var i5 = -1;
		while(true) {
			angle2 = i5 * angleInc2;
			++i5;
			nextAngle2 = angle2 + start1;
			if(angle2 >= dA2 + angleInc2) {
				break;
			}
			p2.push({ x : dx2 + radiusSmall * Math.cos(nextAngle2), y : dy + radiusSmall * Math.sin(nextAngle2)});
		}
	}
	p2.reverse();
	var start2 = -Math.PI;
	var dA3 = Math.PI / 2;
	var p3 = [];
	var angle3 = 0;
	var angleInc3 = Math.PI * 2 / 120;
	var nextAngle3;
	if(dA3 < 0) {
		var i6 = -1;
		while(true) {
			angle3 = i6 * angleInc3;
			--i6;
			nextAngle3 = angle3 + start2;
			if(angle3 <= dA3) {
				break;
			}
			p3.push({ x : dx + radiusSmall * Math.cos(nextAngle3), y : dy + radiusSmall * Math.sin(nextAngle3)});
		}
	} else {
		var i7 = -1;
		while(true) {
			angle3 = i7 * angleInc3;
			++i7;
			nextAngle3 = angle3 + start2;
			if(angle3 >= dA3 + angleInc3) {
				break;
			}
			p3.push({ x : dx + radiusSmall * Math.cos(nextAngle3), y : dy + radiusSmall * Math.sin(nextAngle3)});
		}
	}
	p3.reverse();
	var p0_ = { x : dx, y : dy - radius};
	var p1_ = { x : dx + wid, y : dy - radius};
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw._thick = dia;
	draw.beta = Math.PI / 2 - draw.halfA;
	draw.r = draw._thick / 2 * Math.cos(draw.beta);
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q3 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q3,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q3,q4,justTriangles_Draw.colorId);
	var p0_1 = { x : dx + radius + wid, y : dy};
	var p1_1 = { x : dx + radius + wid, y : dy + hi};
	var draw1 = new justTriangles_Draw();
	draw1.p0 = p1_1;
	draw1.p1 = p0_1;
	draw1.halfA = Math.PI / 2;
	draw1._thick = dia;
	draw1.beta = Math.PI / 2 - draw1.halfA;
	draw1.r = draw1._thick / 2 * Math.cos(draw1.beta);
	draw1._theta = draw1.theta(draw1.p0,draw1.p1);
	if(draw1._theta > 0) {
		if(draw1.halfA < 0) {
			draw1.angle2 = draw1._theta + draw1.halfA + Math.PI / 2;
			draw1.angle1 = draw1._theta - draw1.halfA;
		} else {
			draw1.angle1 = draw1._theta + draw1.halfA - Math.PI;
			draw1.angle2 = draw1._theta + draw1.halfA;
		}
	} else if(draw1.halfA > 0) {
		draw1.angle1 = draw1._theta + draw1.halfA - Math.PI;
		draw1.angle2 = draw1._theta + draw1.halfA;
	} else {
		draw1.angle2 = draw1._theta + draw1.halfA + Math.PI / 2;
		draw1.angle1 = draw1._theta - draw1.halfA;
	}
	if(draw1.p3old != null) {
		draw1.p3old2 = draw1.p3old;
	}
	if(draw1.p4old != null) {
		draw1.p4old2 = draw1.p4old;
	}
	if(draw1.p3 != null) {
		draw1.p3old = draw1.p3;
	}
	if(draw1.p4 != null) {
		draw1.p4old = draw1.p4;
	}
	draw1.p3 = { x : draw1.p1.x + draw1.r * Math.cos(draw1.angle1), y : draw1.p1.y + draw1.r * Math.sin(draw1.angle1)};
	draw1.p4 = { x : draw1.p1.x + draw1.r * Math.cos(draw1.angle2), y : draw1.p1.y + draw1.r * Math.sin(draw1.angle2)};
	var q01 = { x : draw1.p3.x, y : draw1.p3.y};
	var q11 = { x : draw1.p4.x, y : draw1.p4.y};
	draw1.p0 = p0_1;
	draw1.p1 = p1_1;
	draw1._theta = draw1.theta(draw1.p0,draw1.p1);
	if(draw1._theta > 0) {
		if(draw1.halfA < 0) {
			draw1.angle2 = draw1._theta + draw1.halfA + Math.PI / 2;
			draw1.angle1 = draw1._theta - draw1.halfA;
		} else {
			draw1.angle1 = draw1._theta + draw1.halfA - Math.PI;
			draw1.angle2 = draw1._theta + draw1.halfA;
		}
	} else if(draw1.halfA > 0) {
		draw1.angle1 = draw1._theta + draw1.halfA - Math.PI;
		draw1.angle2 = draw1._theta + draw1.halfA;
	} else {
		draw1.angle2 = draw1._theta + draw1.halfA + Math.PI / 2;
		draw1.angle1 = draw1._theta - draw1.halfA;
	}
	if(draw1.p3old != null) {
		draw1.p3old2 = draw1.p3old;
	}
	if(draw1.p4old != null) {
		draw1.p4old2 = draw1.p4old;
	}
	if(draw1.p3 != null) {
		draw1.p3old = draw1.p3;
	}
	if(draw1.p4 != null) {
		draw1.p4old = draw1.p4;
	}
	draw1.p3 = { x : draw1.p1.x + draw1.r * Math.cos(draw1.angle1), y : draw1.p1.y + draw1.r * Math.sin(draw1.angle1)};
	draw1.p4 = { x : draw1.p1.x + draw1.r * Math.cos(draw1.angle2), y : draw1.p1.y + draw1.r * Math.sin(draw1.angle2)};
	var q31 = { x : draw1.p3.x, y : draw1.p3.y};
	var q41 = { x : draw1.p4.x, y : draw1.p4.y};
	justTriangles_Draw.drawTri(id,true,q01,q31,q11,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q01,q31,q41,justTriangles_Draw.colorId);
	var p0_2 = { x : dx, y : dy + radius + hi};
	var p1_2 = { x : dx + wid, y : dy + radius + hi};
	var draw2 = new justTriangles_Draw();
	draw2.p0 = p1_2;
	draw2.p1 = p0_2;
	draw2.halfA = Math.PI / 2;
	draw2._thick = dia;
	draw2.beta = Math.PI / 2 - draw2.halfA;
	draw2.r = draw2._thick / 2 * Math.cos(draw2.beta);
	draw2._theta = draw2.theta(draw2.p0,draw2.p1);
	if(draw2._theta > 0) {
		if(draw2.halfA < 0) {
			draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
			draw2.angle1 = draw2._theta - draw2.halfA;
		} else {
			draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
			draw2.angle2 = draw2._theta + draw2.halfA;
		}
	} else if(draw2.halfA > 0) {
		draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
		draw2.angle2 = draw2._theta + draw2.halfA;
	} else {
		draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
		draw2.angle1 = draw2._theta - draw2.halfA;
	}
	if(draw2.p3old != null) {
		draw2.p3old2 = draw2.p3old;
	}
	if(draw2.p4old != null) {
		draw2.p4old2 = draw2.p4old;
	}
	if(draw2.p3 != null) {
		draw2.p3old = draw2.p3;
	}
	if(draw2.p4 != null) {
		draw2.p4old = draw2.p4;
	}
	draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
	draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
	var q02 = { x : draw2.p3.x, y : draw2.p3.y};
	var q12 = { x : draw2.p4.x, y : draw2.p4.y};
	draw2.p0 = p0_2;
	draw2.p1 = p1_2;
	draw2._theta = draw2.theta(draw2.p0,draw2.p1);
	if(draw2._theta > 0) {
		if(draw2.halfA < 0) {
			draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
			draw2.angle1 = draw2._theta - draw2.halfA;
		} else {
			draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
			draw2.angle2 = draw2._theta + draw2.halfA;
		}
	} else if(draw2.halfA > 0) {
		draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
		draw2.angle2 = draw2._theta + draw2.halfA;
	} else {
		draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
		draw2.angle1 = draw2._theta - draw2.halfA;
	}
	if(draw2.p3old != null) {
		draw2.p3old2 = draw2.p3old;
	}
	if(draw2.p4old != null) {
		draw2.p4old2 = draw2.p4old;
	}
	if(draw2.p3 != null) {
		draw2.p3old = draw2.p3;
	}
	if(draw2.p4 != null) {
		draw2.p4old = draw2.p4;
	}
	draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
	draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
	var q32 = { x : draw2.p3.x, y : draw2.p3.y};
	var q42 = { x : draw2.p4.x, y : draw2.p4.y};
	justTriangles_Draw.drawTri(id,true,q02,q32,q12,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q02,q32,q42,justTriangles_Draw.colorId);
	var p0_3 = { x : dx - radius, y : dy};
	var p1_3 = { x : dx - radius, y : dy + hi};
	var draw3 = new justTriangles_Draw();
	draw3.p0 = p1_3;
	draw3.p1 = p0_3;
	draw3.halfA = Math.PI / 2;
	draw3._thick = dia;
	draw3.beta = Math.PI / 2 - draw3.halfA;
	draw3.r = draw3._thick / 2 * Math.cos(draw3.beta);
	draw3._theta = draw3.theta(draw3.p0,draw3.p1);
	if(draw3._theta > 0) {
		if(draw3.halfA < 0) {
			draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
			draw3.angle1 = draw3._theta - draw3.halfA;
		} else {
			draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
			draw3.angle2 = draw3._theta + draw3.halfA;
		}
	} else if(draw3.halfA > 0) {
		draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
		draw3.angle2 = draw3._theta + draw3.halfA;
	} else {
		draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
		draw3.angle1 = draw3._theta - draw3.halfA;
	}
	if(draw3.p3old != null) {
		draw3.p3old2 = draw3.p3old;
	}
	if(draw3.p4old != null) {
		draw3.p4old2 = draw3.p4old;
	}
	if(draw3.p3 != null) {
		draw3.p3old = draw3.p3;
	}
	if(draw3.p4 != null) {
		draw3.p4old = draw3.p4;
	}
	draw3.p3 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle1), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle1)};
	draw3.p4 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle2), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle2)};
	var q03 = { x : draw3.p3.x, y : draw3.p3.y};
	var q13 = { x : draw3.p4.x, y : draw3.p4.y};
	draw3.p0 = p0_3;
	draw3.p1 = p1_3;
	draw3._theta = draw3.theta(draw3.p0,draw3.p1);
	if(draw3._theta > 0) {
		if(draw3.halfA < 0) {
			draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
			draw3.angle1 = draw3._theta - draw3.halfA;
		} else {
			draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
			draw3.angle2 = draw3._theta + draw3.halfA;
		}
	} else if(draw3.halfA > 0) {
		draw3.angle1 = draw3._theta + draw3.halfA - Math.PI;
		draw3.angle2 = draw3._theta + draw3.halfA;
	} else {
		draw3.angle2 = draw3._theta + draw3.halfA + Math.PI / 2;
		draw3.angle1 = draw3._theta - draw3.halfA;
	}
	if(draw3.p3old != null) {
		draw3.p3old2 = draw3.p3old;
	}
	if(draw3.p4old != null) {
		draw3.p4old2 = draw3.p4old;
	}
	if(draw3.p3 != null) {
		draw3.p3old = draw3.p3;
	}
	if(draw3.p4 != null) {
		draw3.p4old = draw3.p4;
	}
	draw3.p3 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle1), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle1)};
	draw3.p4 = { x : draw3.p1.x + draw3.r * Math.cos(draw3.angle2), y : draw3.p1.y + draw3.r * Math.sin(draw3.angle2)};
	var q33 = { x : draw3.p3.x, y : draw3.p3.y};
	var q43 = { x : draw3.p4.x, y : draw3.p4.y};
	justTriangles_Draw.drawTri(id,true,q03,q33,q13,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q03,q33,q43,justTriangles_Draw.colorId);
	var centre = { x : dx, y : dy + hi};
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw4 = new justTriangles_Draw();
	draw4.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw4.p3;
	justTriangles_Draw.q1 = draw4.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw4.rebuildAsPoly(p[_g1++ + 2]);
		var q34 = draw4.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q34,centre,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q34;
	}
	var centre1 = { x : dx + wid, y : dy + hi};
	justTriangles_Draw.q0 = p1[0];
	justTriangles_Draw.q1 = p1[0];
	var draw5 = new justTriangles_Draw();
	draw5.create2Lines(p1[0],p1[1],p1[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw5.p3;
	justTriangles_Draw.q1 = draw5.p4;
	var _g11 = 1;
	var _g2 = p1.length - 2;
	while(_g11 < _g2) {
		draw5.rebuildAsPoly(p1[_g11++ + 2]);
		var q35 = draw5.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q35,centre1,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q35;
	}
	var centre2 = { x : dx + wid, y : dy};
	justTriangles_Draw.q0 = p2[0];
	justTriangles_Draw.q1 = p2[0];
	var draw6 = new justTriangles_Draw();
	draw6.create2Lines(p2[0],p2[1],p2[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw6.p3;
	justTriangles_Draw.q1 = draw6.p4;
	var _g12 = 1;
	var _g3 = p2.length - 2;
	while(_g12 < _g3) {
		draw6.rebuildAsPoly(p2[_g12++ + 2]);
		var q36 = draw6.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q36,centre2,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q36;
	}
	var centre3 = { x : dx, y : dy};
	justTriangles_Draw.q0 = p3[0];
	justTriangles_Draw.q1 = p3[0];
	var draw7 = new justTriangles_Draw();
	draw7.create2Lines(p3[0],p3[1],p3[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw7.p3;
	justTriangles_Draw.q1 = draw7.p4;
	var _g13 = 1;
	var _g4 = p3.length - 2;
	while(_g13 < _g4) {
		draw7.rebuildAsPoly(p3[_g13++ + 2]);
		var q37 = draw7.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q37,centre3,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q37;
	}
};
justTriangles_Draw.beginLine = function(id,p0_,p1_,thick) {
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw._thick = thick;
	draw.beta = Math.PI / 2 - draw.halfA;
	draw.r = draw._thick / 2 * Math.cos(draw.beta);
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var oldThickness = justTriangles_Draw.thickness;
	justTriangles_Draw.thickness = thick / 2;
	var temp = draw.angle1;
	var dx = p0_.x;
	var dy = p0_.y;
	var radius = thick / 4;
	var dA = Math.PI;
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / 24;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + temp;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + temp;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw1 = new justTriangles_Draw();
	draw1.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw1.p3;
	justTriangles_Draw.q1 = draw1.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw1.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw1.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
	}
	justTriangles_Draw.thickness = oldThickness;
	var q31 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q31,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q31,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.endLine = function(id,p0_,p1_,thick) {
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw._thick = thick;
	draw.beta = Math.PI / 2 - draw.halfA;
	draw.r = draw._thick / 2 * Math.cos(draw.beta);
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var oldThickness = justTriangles_Draw.thickness;
	justTriangles_Draw.thickness = thick / 2;
	var temp = draw.angle1 + Math.PI;
	var dx = p1_.x;
	var dy = p1_.y;
	var radius = thick / 4;
	var dA = Math.PI;
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / 24;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + temp;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + temp;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw1 = new justTriangles_Draw();
	draw1.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw1.p3;
	justTriangles_Draw.q1 = draw1.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw1.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw1.p3;
		justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p1_,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
	}
	justTriangles_Draw.thickness = oldThickness;
	var q31 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q31,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q31,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.isolatedLine = function(id,p0_,p1_,thick,curveEnds) {
	if(curveEnds == null) {
		curveEnds = false;
	}
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw._thick = thick;
	draw.beta = Math.PI / 2 - draw.halfA;
	draw.r = draw._thick / 2 * Math.cos(draw.beta);
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	if(curveEnds) {
		var oldThickness = justTriangles_Draw.thickness;
		justTriangles_Draw.thickness = thick / 2;
		var temp = draw.angle1;
		var dx = p0_.x;
		var dy = p0_.y;
		var radius = thick / 4;
		var dA = Math.PI;
		var p = [];
		var angle = 0;
		var angleInc = Math.PI * 2 / 24;
		var nextAngle;
		if(dA < 0) {
			var i = -1;
			while(true) {
				angle = i * angleInc;
				--i;
				nextAngle = angle + temp;
				if(angle <= dA) {
					break;
				}
				p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
			}
		} else {
			var i1 = -1;
			while(true) {
				angle = i1 * angleInc;
				++i1;
				nextAngle = angle + temp;
				if(angle >= dA + angleInc) {
					break;
				}
				p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
			}
		}
		p.reverse();
		justTriangles_Draw.q0 = p[0];
		justTriangles_Draw.q1 = p[0];
		var draw1 = new justTriangles_Draw();
		draw1.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
		justTriangles_Draw.q0 = draw1.p3;
		justTriangles_Draw.q1 = draw1.p4;
		var _g1 = 1;
		var _g = p.length - 2;
		while(_g1 < _g) {
			draw1.rebuildAsPoly(p[_g1++ + 2]);
			var q3 = draw1.p3;
			justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
			justTriangles_Draw.q0 = q3;
		}
		temp += Math.PI;
		var dx1 = p1_.x;
		var dy1 = p1_.y;
		var radius1 = thick / 4;
		var dA1 = Math.PI;
		var p1 = [];
		var angle1 = 0;
		var angleInc1 = Math.PI * 2 / 24;
		var nextAngle1;
		if(dA1 < 0) {
			var i2 = -1;
			while(true) {
				angle1 = i2 * angleInc1;
				--i2;
				nextAngle1 = angle1 + temp;
				if(angle1 <= dA1) {
					break;
				}
				p1.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
			}
		} else {
			var i3 = -1;
			while(true) {
				angle1 = i3 * angleInc1;
				++i3;
				nextAngle1 = angle1 + temp;
				if(angle1 >= dA1 + angleInc1) {
					break;
				}
				p1.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
			}
		}
		p1.reverse();
		justTriangles_Draw.q0 = p1[0];
		justTriangles_Draw.q1 = p1[0];
		var draw2 = new justTriangles_Draw();
		draw2.create2Lines(p1[0],p1[1],p1[2],justTriangles_Draw.thickness);
		justTriangles_Draw.q0 = draw2.p3;
		justTriangles_Draw.q1 = draw2.p4;
		var _g11 = 1;
		var _g2 = p1.length - 2;
		while(_g11 < _g2) {
			draw2.rebuildAsPoly(p1[_g11++ + 2]);
			var q31 = draw2.p3;
			justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q31,p1_,justTriangles_Draw.colorId);
			justTriangles_Draw.q0 = q31;
		}
		justTriangles_Draw.thickness = oldThickness;
	}
	var q32 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q32,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q32,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.triangleJoin = function(id,draw,p0_,p1_,thick,curveEnds) {
	if(curveEnds == null) {
		curveEnds = false;
	}
	var oldAngle = draw.p3 != null ? draw.angle1 : null;
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw._thick = thick;
	draw.beta = Math.PI / 2 - draw.halfA;
	draw.r = draw._thick / 2 * Math.cos(draw.beta);
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw._theta = draw.theta(draw.p0,draw.p1);
	if(draw._theta > 0) {
		if(draw.halfA < 0) {
			draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
			draw.angle1 = draw._theta - draw.halfA;
		} else {
			draw.angle1 = draw._theta + draw.halfA - Math.PI;
			draw.angle2 = draw._theta + draw.halfA;
		}
	} else if(draw.halfA > 0) {
		draw.angle1 = draw._theta + draw.halfA - Math.PI;
		draw.angle2 = draw._theta + draw.halfA;
	} else {
		draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
		draw.angle1 = draw._theta - draw.halfA;
	}
	if(draw.p3old != null) {
		draw.p3old2 = draw.p3old;
	}
	if(draw.p4old != null) {
		draw.p4old2 = draw.p4old;
	}
	if(draw.p3 != null) {
		draw.p3old = draw.p3;
	}
	if(draw.p4 != null) {
		draw.p4old = draw.p4;
	}
	draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
	draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
	if(draw.p3old2 != null) {
		var clockWise = justTriangles_Draw.dist(draw.p3old2,p1_) > justTriangles_Draw.dist(draw.p4old2,p1_);
		if(curveEnds) {
			if(oldAngle != null) {
				var dif = Math.abs(draw.angle1 - oldAngle);
				if(dif > 0.1) {
					var oldThickness = justTriangles_Draw.thickness;
					justTriangles_Draw.thickness = thick / 2;
					if(clockWise) {
						var dx = p0_.x;
						var dy = p0_.y;
						var radius = thick / 4;
						var start = draw.angle1;
						var p = [];
						var angle = 0;
						var angleInc = Math.PI * 2 / 240;
						var nextAngle;
						if(dif < 0) {
							var i = -1;
							while(true) {
								angle = i * angleInc;
								--i;
								nextAngle = angle + start;
								if(angle <= dif) {
									break;
								}
								p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
							}
						} else {
							var i1 = -1;
							while(true) {
								angle = i1 * angleInc;
								++i1;
								nextAngle = angle + start;
								if(angle >= dif + angleInc) {
									break;
								}
								p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
							}
							p.reverse();
						}
						justTriangles_Draw.q0 = p[0];
						justTriangles_Draw.q1 = p[0];
						var draw1 = new justTriangles_Draw();
						draw1.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
						justTriangles_Draw.q0 = draw1.p3;
						justTriangles_Draw.q1 = draw1.p4;
						var _g1 = 1;
						var _g = p.length - 2;
						while(_g1 < _g) {
							draw1.rebuildAsPoly(p[_g1++ + 2]);
							var q3 = draw1.p3;
							justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
							justTriangles_Draw.q0 = q3;
						}
					} else {
						var dx1 = p0_.x;
						var dy1 = p0_.y;
						var radius1 = thick / 4;
						var start1 = draw.angle2;
						var dA = -dif;
						var p1 = [];
						var angle1 = 0;
						var angleInc1 = Math.PI * 2 / 240;
						var nextAngle1;
						if(dA < 0) {
							var i2 = -1;
							while(true) {
								angle1 = i2 * angleInc1;
								--i2;
								nextAngle1 = angle1 + start1;
								if(angle1 <= dA) {
									break;
								}
								p1.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
							}
						} else {
							var i3 = -1;
							while(true) {
								angle1 = i3 * angleInc1;
								++i3;
								nextAngle1 = angle1 + start1;
								if(angle1 >= dA + angleInc1) {
									break;
								}
								p1.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
							}
							p1.reverse();
						}
						justTriangles_Draw.q0 = p1[0];
						justTriangles_Draw.q1 = p1[0];
						var draw2 = new justTriangles_Draw();
						draw2.create2Lines(p1[0],p1[1],p1[2],justTriangles_Draw.thickness);
						justTriangles_Draw.q0 = draw2.p3;
						justTriangles_Draw.q1 = draw2.p4;
						var _g11 = 1;
						var _g2 = p1.length - 2;
						while(_g11 < _g2) {
							draw2.rebuildAsPoly(p1[_g11++ + 2]);
							var q31 = draw2.p3;
							justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q31,p0_,justTriangles_Draw.colorId);
							justTriangles_Draw.q0 = q31;
						}
					}
					justTriangles_Draw.thickness = oldThickness;
				}
			}
		}
		if(clockWise) {
			justTriangles_Draw.drawTri(id,true,draw.p3old2,q1,p0_,justTriangles_Draw.colorId);
		} else {
			justTriangles_Draw.drawTri(id,true,draw.p4old2,q0,p0_,justTriangles_Draw.colorId);
		}
	}
	justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4old,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.quadCurves = function(id,p,thick) {
	var curveLen;
	var len = p.length - 1;
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		if((i - 1) % 2 == 0) {
			var p0 = p[i];
			var p1 = p[i + 1];
			var p2 = p[i + 2];
			var p3 = [];
			var x = p0.x - p1.x;
			var y = p0.y - p1.y;
			var x1 = p1.x - p2.x;
			var y1 = p1.y - p2.y;
			var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
			var v;
			if(approxDistance == 0) {
				approxDistance = 0.000001;
			}
			var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.quadStep);
			var t = 0.0;
			p3.push(p0);
			t = step;
			while(t < 1) {
				var u = 1 - t;
				var u1 = 1 - t;
				v = { x : Math.pow(u,2) * p0.x + 2 * u * t * p1.x + Math.pow(t,2) * p2.x, y : Math.pow(u1,2) * p0.y + 2 * u1 * t * p1.y + Math.pow(t,2) * p2.y};
				p3.push({ x : v.x, y : v.y});
				t += step;
			}
			p3.push(p2);
			curveLen = p3.length;
			var p0_ = p3[0];
			var p1_ = p3[1];
			var draw = new justTriangles_Draw();
			draw.p0 = p1_;
			draw.p1 = p0_;
			draw.halfA = Math.PI / 2;
			draw._thick = thick;
			draw.beta = Math.PI / 2 - draw.halfA;
			draw.r = draw._thick / 2 * Math.cos(draw.beta);
			draw._theta = draw.theta(draw.p0,draw.p1);
			if(draw._theta > 0) {
				if(draw.halfA < 0) {
					draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
					draw.angle1 = draw._theta - draw.halfA;
				} else {
					draw.angle1 = draw._theta + draw.halfA - Math.PI;
					draw.angle2 = draw._theta + draw.halfA;
				}
			} else if(draw.halfA > 0) {
				draw.angle1 = draw._theta + draw.halfA - Math.PI;
				draw.angle2 = draw._theta + draw.halfA;
			} else {
				draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
				draw.angle1 = draw._theta - draw.halfA;
			}
			if(draw.p3old != null) {
				draw.p3old2 = draw.p3old;
			}
			if(draw.p4old != null) {
				draw.p4old2 = draw.p4old;
			}
			if(draw.p3 != null) {
				draw.p3old = draw.p3;
			}
			if(draw.p4 != null) {
				draw.p4old = draw.p4;
			}
			draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
			draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
			var q0 = { x : draw.p3.x, y : draw.p3.y};
			var q1 = { x : draw.p4.x, y : draw.p4.y};
			draw.p0 = p0_;
			draw.p1 = p1_;
			draw._theta = draw.theta(draw.p0,draw.p1);
			if(draw._theta > 0) {
				if(draw.halfA < 0) {
					draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
					draw.angle1 = draw._theta - draw.halfA;
				} else {
					draw.angle1 = draw._theta + draw.halfA - Math.PI;
					draw.angle2 = draw._theta + draw.halfA;
				}
			} else if(draw.halfA > 0) {
				draw.angle1 = draw._theta + draw.halfA - Math.PI;
				draw.angle2 = draw._theta + draw.halfA;
			} else {
				draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
				draw.angle1 = draw._theta - draw.halfA;
			}
			if(draw.p3old != null) {
				draw.p3old2 = draw.p3old;
			}
			if(draw.p4old != null) {
				draw.p4old2 = draw.p4old;
			}
			if(draw.p3 != null) {
				draw.p3old = draw.p3;
			}
			if(draw.p4 != null) {
				draw.p4old = draw.p4;
			}
			draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
			draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
			var oldThickness = justTriangles_Draw.thickness;
			justTriangles_Draw.thickness = thick / 2;
			var temp = draw.angle1;
			var dx = p0_.x;
			var dy = p0_.y;
			var radius = thick / 4;
			var dA = Math.PI;
			var p4 = [];
			var angle = 0;
			var angleInc = Math.PI * 2 / 24;
			var nextAngle;
			if(dA < 0) {
				var i1 = -1;
				while(true) {
					angle = i1 * angleInc;
					--i1;
					nextAngle = angle + temp;
					if(angle <= dA) {
						break;
					}
					p4.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
				}
			} else {
				var i2 = -1;
				while(true) {
					angle = i2 * angleInc;
					++i2;
					nextAngle = angle + temp;
					if(angle >= dA + angleInc) {
						break;
					}
					p4.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
				}
			}
			p4.reverse();
			justTriangles_Draw.q0 = p4[0];
			justTriangles_Draw.q1 = p4[0];
			var draw1 = new justTriangles_Draw();
			draw1.create2Lines(p4[0],p4[1],p4[2],justTriangles_Draw.thickness);
			justTriangles_Draw.q0 = draw1.p3;
			justTriangles_Draw.q1 = draw1.p4;
			var _g11 = 1;
			var _g = p4.length - 2;
			while(_g11 < _g) {
				draw1.rebuildAsPoly(p4[_g11++ + 2]);
				var q3 = draw1.p3;
				justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
				justTriangles_Draw.q0 = q3;
			}
			justTriangles_Draw.thickness = oldThickness;
			var q31 = { x : draw.p3.x, y : draw.p3.y};
			var q4 = { x : draw.p4.x, y : draw.p4.y};
			justTriangles_Draw.drawTri(id,true,q0,q31,q1,justTriangles_Draw.colorId);
			justTriangles_Draw.drawTri(id,true,q0,q31,q4,justTriangles_Draw.colorId);
			var p0_1 = p3[curveLen - 2];
			var p1_1 = p3[curveLen - 1];
			var draw2 = new justTriangles_Draw();
			draw2.p0 = p1_1;
			draw2.p1 = p0_1;
			draw2.halfA = Math.PI / 2;
			draw2._thick = thick;
			draw2.beta = Math.PI / 2 - draw2.halfA;
			draw2.r = draw2._thick / 2 * Math.cos(draw2.beta);
			draw2._theta = draw2.theta(draw2.p0,draw2.p1);
			if(draw2._theta > 0) {
				if(draw2.halfA < 0) {
					draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
					draw2.angle1 = draw2._theta - draw2.halfA;
				} else {
					draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
					draw2.angle2 = draw2._theta + draw2.halfA;
				}
			} else if(draw2.halfA > 0) {
				draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
				draw2.angle2 = draw2._theta + draw2.halfA;
			} else {
				draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
				draw2.angle1 = draw2._theta - draw2.halfA;
			}
			if(draw2.p3old != null) {
				draw2.p3old2 = draw2.p3old;
			}
			if(draw2.p4old != null) {
				draw2.p4old2 = draw2.p4old;
			}
			if(draw2.p3 != null) {
				draw2.p3old = draw2.p3;
			}
			if(draw2.p4 != null) {
				draw2.p4old = draw2.p4;
			}
			draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
			draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
			var q01 = { x : draw2.p3.x, y : draw2.p3.y};
			var q11 = { x : draw2.p4.x, y : draw2.p4.y};
			draw2.p0 = p0_1;
			draw2.p1 = p1_1;
			draw2._theta = draw2.theta(draw2.p0,draw2.p1);
			if(draw2._theta > 0) {
				if(draw2.halfA < 0) {
					draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
					draw2.angle1 = draw2._theta - draw2.halfA;
				} else {
					draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
					draw2.angle2 = draw2._theta + draw2.halfA;
				}
			} else if(draw2.halfA > 0) {
				draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
				draw2.angle2 = draw2._theta + draw2.halfA;
			} else {
				draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
				draw2.angle1 = draw2._theta - draw2.halfA;
			}
			if(draw2.p3old != null) {
				draw2.p3old2 = draw2.p3old;
			}
			if(draw2.p4old != null) {
				draw2.p4old2 = draw2.p4old;
			}
			if(draw2.p3 != null) {
				draw2.p3old = draw2.p3;
			}
			if(draw2.p4 != null) {
				draw2.p4old = draw2.p4;
			}
			draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
			draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
			var oldThickness1 = justTriangles_Draw.thickness;
			justTriangles_Draw.thickness = thick / 2;
			var temp1 = draw2.angle1 + Math.PI;
			var dx1 = p1_1.x;
			var dy1 = p1_1.y;
			var radius1 = thick / 4;
			var dA1 = Math.PI;
			var p5 = [];
			var angle1 = 0;
			var angleInc1 = Math.PI * 2 / 24;
			var nextAngle1;
			if(dA1 < 0) {
				var i3 = -1;
				while(true) {
					angle1 = i3 * angleInc1;
					--i3;
					nextAngle1 = angle1 + temp1;
					if(angle1 <= dA1) {
						break;
					}
					p5.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
				}
			} else {
				var i4 = -1;
				while(true) {
					angle1 = i4 * angleInc1;
					++i4;
					nextAngle1 = angle1 + temp1;
					if(angle1 >= dA1 + angleInc1) {
						break;
					}
					p5.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
				}
			}
			p5.reverse();
			justTriangles_Draw.q0 = p5[0];
			justTriangles_Draw.q1 = p5[0];
			var draw3 = new justTriangles_Draw();
			draw3.create2Lines(p5[0],p5[1],p5[2],justTriangles_Draw.thickness);
			justTriangles_Draw.q0 = draw3.p3;
			justTriangles_Draw.q1 = draw3.p4;
			var _g12 = 1;
			var _g2 = p5.length - 2;
			while(_g12 < _g2) {
				draw3.rebuildAsPoly(p5[_g12++ + 2]);
				var q32 = draw3.p3;
				justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q32,p1_1,justTriangles_Draw.colorId);
				justTriangles_Draw.q0 = q32;
			}
			justTriangles_Draw.thickness = oldThickness1;
			var q33 = { x : draw2.p3.x, y : draw2.p3.y};
			var q41 = { x : draw2.p4.x, y : draw2.p4.y};
			justTriangles_Draw.drawTri(id,true,q01,q33,q11,justTriangles_Draw.colorId);
			justTriangles_Draw.drawTri(id,true,q01,q33,q41,justTriangles_Draw.colorId);
			justTriangles_Draw.q0 = p3[0];
			justTriangles_Draw.q1 = p3[0];
			var _g13 = 0;
			var _g3 = p3.length - 2;
			while(_g13 < _g3) {
				var i5 = _g13++;
				var draw4 = new justTriangles_Draw();
				draw4.create2Lines(p3[i5],p3[i5 + 1],p3[i5 + 2],justTriangles_Draw.thickness);
				var q34 = draw4.p3;
				var q42 = draw4.p4;
				if(i5 != 0) {
					justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q34,justTriangles_Draw.q1,justTriangles_Draw.colorId);
					justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q1,q34,q42,justTriangles_Draw.colorId);
				}
				justTriangles_Draw.q0 = q34;
				justTriangles_Draw.q1 = q42;
			}
		}
	}
};
justTriangles_Draw.cubicCurves = function(id,p,thick) {
	var curveLen;
	var len = p.length - 1;
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		if((i - 2) % 3 == 0) {
			var p0 = p[i];
			var p1 = p[i + 1];
			var p2 = p[i + 2];
			var p3 = p[i + 3];
			var p4 = [];
			var x = p0.x - p1.x;
			var y = p0.y - p1.y;
			var x1 = p1.x - p2.x;
			var y1 = p1.y - p2.y;
			var x2 = p2.x - p3.x;
			var y2 = p2.y - p3.y;
			var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
			var v;
			if(approxDistance == 0) {
				approxDistance = 0.000001;
			}
			var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.cubicStep);
			var t = 0.0;
			v = { x : Math.pow(1.,3) * p0.x + 3 * Math.pow(1.,2) * 0.0 * p1.x + 3. * Math.pow(0.0,2) * p2.x + Math.pow(0.0,3) * p3.x, y : Math.pow(1.,3) * p0.y + 3 * Math.pow(1.,2) * 0.0 * p1.y + 3. * Math.pow(0.0,2) * p2.y + Math.pow(0.0,3) * p3.y};
			p4.push({ x : v.x, y : v.y});
			t = step;
			while(t < 1) {
				var u = 1 - t;
				var u1 = 1 - t;
				v = { x : Math.pow(u,3) * p0.x + 3 * Math.pow(u,2) * t * p1.x + 3 * u * Math.pow(t,2) * p2.x + Math.pow(t,3) * p3.x, y : Math.pow(u1,3) * p0.y + 3 * Math.pow(u1,2) * t * p1.y + 3 * u1 * Math.pow(t,2) * p2.y + Math.pow(t,3) * p3.y};
				p4.push({ x : v.x, y : v.y});
				t += step;
			}
			v = { x : Math.pow(0.,3) * p0.x + 3 * Math.pow(0.,2) * p1.x + 0. * Math.pow(1.0,2) * p2.x + Math.pow(1.0,3) * p3.x, y : Math.pow(0.,3) * p0.y + 3 * Math.pow(0.,2) * p1.y + 0. * Math.pow(1.0,2) * p2.y + Math.pow(1.0,3) * p3.y};
			p4.push({ x : v.x, y : v.y});
			curveLen = p4.length;
			var p0_ = p4[0];
			var p1_ = p4[1];
			var draw = new justTriangles_Draw();
			draw.p0 = p1_;
			draw.p1 = p0_;
			draw.halfA = Math.PI / 2;
			draw._thick = thick;
			draw.beta = Math.PI / 2 - draw.halfA;
			draw.r = draw._thick / 2 * Math.cos(draw.beta);
			draw._theta = draw.theta(draw.p0,draw.p1);
			if(draw._theta > 0) {
				if(draw.halfA < 0) {
					draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
					draw.angle1 = draw._theta - draw.halfA;
				} else {
					draw.angle1 = draw._theta + draw.halfA - Math.PI;
					draw.angle2 = draw._theta + draw.halfA;
				}
			} else if(draw.halfA > 0) {
				draw.angle1 = draw._theta + draw.halfA - Math.PI;
				draw.angle2 = draw._theta + draw.halfA;
			} else {
				draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
				draw.angle1 = draw._theta - draw.halfA;
			}
			if(draw.p3old != null) {
				draw.p3old2 = draw.p3old;
			}
			if(draw.p4old != null) {
				draw.p4old2 = draw.p4old;
			}
			if(draw.p3 != null) {
				draw.p3old = draw.p3;
			}
			if(draw.p4 != null) {
				draw.p4old = draw.p4;
			}
			draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
			draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
			var q0 = { x : draw.p3.x, y : draw.p3.y};
			var q1 = { x : draw.p4.x, y : draw.p4.y};
			draw.p0 = p0_;
			draw.p1 = p1_;
			draw._theta = draw.theta(draw.p0,draw.p1);
			if(draw._theta > 0) {
				if(draw.halfA < 0) {
					draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
					draw.angle1 = draw._theta - draw.halfA;
				} else {
					draw.angle1 = draw._theta + draw.halfA - Math.PI;
					draw.angle2 = draw._theta + draw.halfA;
				}
			} else if(draw.halfA > 0) {
				draw.angle1 = draw._theta + draw.halfA - Math.PI;
				draw.angle2 = draw._theta + draw.halfA;
			} else {
				draw.angle2 = draw._theta + draw.halfA + Math.PI / 2;
				draw.angle1 = draw._theta - draw.halfA;
			}
			if(draw.p3old != null) {
				draw.p3old2 = draw.p3old;
			}
			if(draw.p4old != null) {
				draw.p4old2 = draw.p4old;
			}
			if(draw.p3 != null) {
				draw.p3old = draw.p3;
			}
			if(draw.p4 != null) {
				draw.p4old = draw.p4;
			}
			draw.p3 = { x : draw.p1.x + draw.r * Math.cos(draw.angle1), y : draw.p1.y + draw.r * Math.sin(draw.angle1)};
			draw.p4 = { x : draw.p1.x + draw.r * Math.cos(draw.angle2), y : draw.p1.y + draw.r * Math.sin(draw.angle2)};
			var oldThickness = justTriangles_Draw.thickness;
			justTriangles_Draw.thickness = thick / 2;
			var temp = draw.angle1;
			var dx = p0_.x;
			var dy = p0_.y;
			var radius = thick / 4;
			var dA = Math.PI;
			var p5 = [];
			var angle = 0;
			var angleInc = Math.PI * 2 / 24;
			var nextAngle;
			if(dA < 0) {
				var i1 = -1;
				while(true) {
					angle = i1 * angleInc;
					--i1;
					nextAngle = angle + temp;
					if(angle <= dA) {
						break;
					}
					p5.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
				}
			} else {
				var i2 = -1;
				while(true) {
					angle = i2 * angleInc;
					++i2;
					nextAngle = angle + temp;
					if(angle >= dA + angleInc) {
						break;
					}
					p5.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
				}
			}
			p5.reverse();
			justTriangles_Draw.q0 = p5[0];
			justTriangles_Draw.q1 = p5[0];
			var draw1 = new justTriangles_Draw();
			draw1.create2Lines(p5[0],p5[1],p5[2],justTriangles_Draw.thickness);
			justTriangles_Draw.q0 = draw1.p3;
			justTriangles_Draw.q1 = draw1.p4;
			var _g11 = 1;
			var _g = p5.length - 2;
			while(_g11 < _g) {
				draw1.rebuildAsPoly(p5[_g11++ + 2]);
				var q3 = draw1.p3;
				justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q3,p0_,justTriangles_Draw.colorId);
				justTriangles_Draw.q0 = q3;
			}
			justTriangles_Draw.thickness = oldThickness;
			var q31 = { x : draw.p3.x, y : draw.p3.y};
			var q4 = { x : draw.p4.x, y : draw.p4.y};
			justTriangles_Draw.drawTri(id,true,q0,q31,q1,justTriangles_Draw.colorId);
			justTriangles_Draw.drawTri(id,true,q0,q31,q4,justTriangles_Draw.colorId);
			var p0_1 = p4[curveLen - 3];
			var p1_1 = p4[curveLen - 2];
			var draw2 = new justTriangles_Draw();
			draw2.p0 = p1_1;
			draw2.p1 = p0_1;
			draw2.halfA = Math.PI / 2;
			draw2._thick = thick;
			draw2.beta = Math.PI / 2 - draw2.halfA;
			draw2.r = draw2._thick / 2 * Math.cos(draw2.beta);
			draw2._theta = draw2.theta(draw2.p0,draw2.p1);
			if(draw2._theta > 0) {
				if(draw2.halfA < 0) {
					draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
					draw2.angle1 = draw2._theta - draw2.halfA;
				} else {
					draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
					draw2.angle2 = draw2._theta + draw2.halfA;
				}
			} else if(draw2.halfA > 0) {
				draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
				draw2.angle2 = draw2._theta + draw2.halfA;
			} else {
				draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
				draw2.angle1 = draw2._theta - draw2.halfA;
			}
			if(draw2.p3old != null) {
				draw2.p3old2 = draw2.p3old;
			}
			if(draw2.p4old != null) {
				draw2.p4old2 = draw2.p4old;
			}
			if(draw2.p3 != null) {
				draw2.p3old = draw2.p3;
			}
			if(draw2.p4 != null) {
				draw2.p4old = draw2.p4;
			}
			draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
			draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
			var q01 = { x : draw2.p3.x, y : draw2.p3.y};
			var q11 = { x : draw2.p4.x, y : draw2.p4.y};
			draw2.p0 = p0_1;
			draw2.p1 = p1_1;
			draw2._theta = draw2.theta(draw2.p0,draw2.p1);
			if(draw2._theta > 0) {
				if(draw2.halfA < 0) {
					draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
					draw2.angle1 = draw2._theta - draw2.halfA;
				} else {
					draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
					draw2.angle2 = draw2._theta + draw2.halfA;
				}
			} else if(draw2.halfA > 0) {
				draw2.angle1 = draw2._theta + draw2.halfA - Math.PI;
				draw2.angle2 = draw2._theta + draw2.halfA;
			} else {
				draw2.angle2 = draw2._theta + draw2.halfA + Math.PI / 2;
				draw2.angle1 = draw2._theta - draw2.halfA;
			}
			if(draw2.p3old != null) {
				draw2.p3old2 = draw2.p3old;
			}
			if(draw2.p4old != null) {
				draw2.p4old2 = draw2.p4old;
			}
			if(draw2.p3 != null) {
				draw2.p3old = draw2.p3;
			}
			if(draw2.p4 != null) {
				draw2.p4old = draw2.p4;
			}
			draw2.p3 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle1), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle1)};
			draw2.p4 = { x : draw2.p1.x + draw2.r * Math.cos(draw2.angle2), y : draw2.p1.y + draw2.r * Math.sin(draw2.angle2)};
			var oldThickness1 = justTriangles_Draw.thickness;
			justTriangles_Draw.thickness = thick / 2;
			var temp1 = draw2.angle1 + Math.PI;
			var dx1 = p1_1.x;
			var dy1 = p1_1.y;
			var radius1 = thick / 4;
			var dA1 = Math.PI;
			var p6 = [];
			var angle1 = 0;
			var angleInc1 = Math.PI * 2 / 24;
			var nextAngle1;
			if(dA1 < 0) {
				var i3 = -1;
				while(true) {
					angle1 = i3 * angleInc1;
					--i3;
					nextAngle1 = angle1 + temp1;
					if(angle1 <= dA1) {
						break;
					}
					p6.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
				}
			} else {
				var i4 = -1;
				while(true) {
					angle1 = i4 * angleInc1;
					++i4;
					nextAngle1 = angle1 + temp1;
					if(angle1 >= dA1 + angleInc1) {
						break;
					}
					p6.push({ x : dx1 + radius1 * Math.cos(nextAngle1), y : dy1 + radius1 * Math.sin(nextAngle1)});
				}
			}
			p6.reverse();
			justTriangles_Draw.q0 = p6[0];
			justTriangles_Draw.q1 = p6[0];
			var draw3 = new justTriangles_Draw();
			draw3.create2Lines(p6[0],p6[1],p6[2],justTriangles_Draw.thickness);
			justTriangles_Draw.q0 = draw3.p3;
			justTriangles_Draw.q1 = draw3.p4;
			var _g12 = 1;
			var _g2 = p6.length - 2;
			while(_g12 < _g2) {
				draw3.rebuildAsPoly(p6[_g12++ + 2]);
				var q32 = draw3.p3;
				justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q32,p1_1,justTriangles_Draw.colorId);
				justTriangles_Draw.q0 = q32;
			}
			justTriangles_Draw.thickness = oldThickness1;
			var q33 = { x : draw2.p3.x, y : draw2.p3.y};
			var q41 = { x : draw2.p4.x, y : draw2.p4.y};
			justTriangles_Draw.drawTri(id,true,q01,q33,q11,justTriangles_Draw.colorId);
			justTriangles_Draw.drawTri(id,true,q01,q33,q41,justTriangles_Draw.colorId);
			justTriangles_Draw.q0 = p4[0];
			justTriangles_Draw.q1 = p4[0];
			var _g13 = 0;
			var _g3 = p4.length - 2;
			while(_g13 < _g3) {
				var i5 = _g13++;
				var draw4 = new justTriangles_Draw();
				draw4.create2Lines(p4[i5],p4[i5 + 1],p4[i5 + 2],justTriangles_Draw.thickness);
				var q34 = draw4.p3;
				var q42 = draw4.p4;
				if(i5 != 0) {
					justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q0,q34,justTriangles_Draw.q1,justTriangles_Draw.colorId);
					justTriangles_Draw.drawTri(id,true,justTriangles_Draw.q1,q34,q42,justTriangles_Draw.colorId);
				}
				justTriangles_Draw.q0 = q34;
				justTriangles_Draw.q1 = q42;
			}
		}
	}
};
justTriangles_Draw.dist = function(p0,p1) {
	var dx = p0.x - p1.x;
	var dy = p0.y - p1.y;
	return dx * dx + dy * dy;
};
justTriangles_Draw.poly = function(id,outline,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw.p3;
		var q4 = draw.p4;
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
		justTriangles_Draw.q1 = q4;
	}
};
justTriangles_Draw.outerPoly = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw.p3;
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
	}
};
justTriangles_Draw.outerPolyExtra = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw.rebuildAsPoly(p[_g1++ + 2]);
		var q3 = draw.p3;
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
		justTriangles_Draw.q0 = q3;
	}
};
justTriangles_Draw.innerPoly = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[0],p[1],p[2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		draw.rebuildAsPoly(p[_g1++ + 2]);
		var q4 = draw.p4;
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q4,centre,justTriangles_Draw.colorId);
		justTriangles_Draw.q1 = q4;
	}
};
justTriangles_Draw.triangles = function(id,outline,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var _g1 = 0;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		var draw = new justTriangles_Draw();
		draw.create2Lines(p[i],p[i + 1],p[i + 2],justTriangles_Draw.thickness);
		var q3 = draw.p3;
		var q4 = draw.p4;
		if(i != 0) {
			justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
			justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
		}
		justTriangles_Draw.q0 = q3;
		justTriangles_Draw.q1 = q4;
	}
};
justTriangles_Draw.firstQuad = function(id,p,i) {
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[i],p[i + 1],p[i + 2],justTriangles_Draw.thickness);
	justTriangles_Draw.q0 = draw.p3;
	justTriangles_Draw.q1 = draw.p4;
	return draw;
};
justTriangles_Draw.otherQuad = function(id,outline,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	var q4 = draw.p4;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.outerFilledTriangles = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	return draw;
};
justTriangles_Draw.outerFilledTrianglesExtra = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	return draw;
};
justTriangles_Draw.innerFilledTriangles = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q4 = draw.p4;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q4,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.quad = function(id,outline,p,i) {
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[i],p[i + 1],p[i + 2],justTriangles_Draw.thickness);
	var q3 = draw.p3;
	var q4 = draw.p4;
	if(i != 0) {
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
	}
	justTriangles_Draw.q0 = q3;
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.generateMidPoints = function(arr) {
	var out = [];
	var a;
	var b;
	var len = arr.length - 2;
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		a = arr[i];
		b = arr[i + 1];
		out.push({ x : (b.x + a.x) / 2, y : (b.y + a.y) / 2});
		out.push({ x : b.x, y : b.y});
	}
	a = arr[0];
	out.unshift({ x : a.x, y : a.y});
	out.unshift({ x : a.x, y : a.y});
	b = arr[arr.length - 1];
	out.push({ x : b.x, y : b.y});
	out.push({ x : b.x, y : b.y});
	out.push({ x : b.x, y : b.y});
	return out;
};
justTriangles_Draw.prototype = {
	p0: null
	,p1: null
	,p2: null
	,p3: null
	,p4: null
	,p3old: null
	,p4old: null
	,p3old2: null
	,p4old2: null
	,angleA: null
	,cosA: null
	,b2: null
	,c2: null
	,a2: null
	,b: null
	,c: null
	,a: null
	,clockwiseP2: null
	,angleD: null
	,halfA: null
	,beta: null
	,r: null
	,_theta: null
	,angle1: null
	,angle2: null
	,thickRatio: null
	,_thick: null
	,create2Lines: function(p0_,p1_,p2_,thick) {
		this.p0 = p0_;
		this.p1 = p1_;
		this.p2 = p2_;
		this.b2 = justTriangles_Draw.dist(this.p0,this.p1);
		this.c2 = justTriangles_Draw.dist(this.p1,this.p2);
		this.a2 = justTriangles_Draw.dist(this.p0,this.p2);
		this.b = Math.sqrt(this.b2);
		this.c = Math.sqrt(this.c2);
		this.a = Math.sqrt(this.a2);
		this.cosA = (this.b2 + this.c2 - this.a2) / (2 * this.b * this.c);
		if(this.cosA > 1) {
			this.cosA = 1;
		} else if(this.cosA < -1) {
			this.cosA = -1;
		}
		this.angleA = Math.acos(this.cosA);
		this.halfA = this.angleA / 2;
		this._thick = thick;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = this._thick / 2 * Math.cos(this.beta);
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,setThickness: function(val) {
		this._thick = val;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = this._thick / 2 * Math.cos(this.beta);
	}
	,calculateP3p4: function() {
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,rebuildAsPoly: function(p2_) {
		this.p0 = this.p1;
		this.p1 = this.p2;
		this.p2 = p2_;
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,theta: function(p0,p1) {
		return Math.atan2(p0.y - p1.y,p0.x - p1.x);
	}
	,__class__: justTriangles_Draw
};
var justTriangles_ShapePoints = function() { };
justTriangles_ShapePoints.__name__ = ["justTriangles","ShapePoints"];
justTriangles_ShapePoints.boxPoints = function(p,wid,hi) {
	return [{ x : p.x, y : p.y},{ x : p.x + wid, y : p.y},{ x : p.x + wid, y : p.y + hi},{ x : p.x, y : p.y + hi},{ x : p.x, y : p.y},{ x : p.x + wid, y : p.y},{ x : p.x + wid, y : p.y + hi}];
};
justTriangles_ShapePoints.box = function(x,y,wid,hi) {
	var p = [{ x : x, y : y},{ x : x + wid, y : y},{ x : x + wid, y : y + hi},{ x : x, y : y + hi},{ x : x, y : y},{ x : x + wid, y : y},{ x : x + wid, y : y + hi}];
	p.reverse();
	return p;
};
justTriangles_ShapePoints.equalTri = function(dx,dy,radius,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	var p = [];
	var angle = 0;
	var offset = -2.5 * Math.PI * 2 / 6 - Math.PI + rotation;
	var _g = 0;
	while(_g < 6) {
		angle = _g++ * (Math.PI * 2) / 3 - offset;
		p.push({ x : dx + radius * Math.cos(angle), y : dy + radius * Math.sin(angle)});
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.polyPoints = function(d,radius,sides,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var offset = rotation - Math.PI / 2;
	var tot = sides + 3;
	var _g1 = 0;
	while(_g1 < tot) {
		var i = _g1++;
		angle = i * angleInc;
		angle += offset;
		p[tot - i - 1] = { x : d.x + radius * Math.cos(angle), y : d.y + radius * Math.sin(angle)};
	}
	return p;
};
justTriangles_ShapePoints.poly = function(dx,dy,radius,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var _g1 = 0;
	var _g = sides + 3;
	while(_g1 < _g) {
		angle = _g1++ * angleInc;
		p.push({ x : dx + radius * Math.cos(angle), y : dy + radius * Math.sin(angle)});
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.horizontalWave = function(x_,dx_,y_,amplitude,sides,repeats) {
	var p = [];
	var dx = 0;
	var angleInc = Math.PI * 2 / sides;
	var len = sides * repeats | 0;
	var _g1 = 0;
	while(_g1 < len) p.push({ x : x_ + (dx += dx_), y : y_ + amplitude * Math.sin(_g1++ * angleInc)});
	return p;
};
justTriangles_ShapePoints.verticalWave = function(x_,y_,dy_,amplitude,sides,repeats) {
	var p = [];
	var dy = 0;
	var angleInc = Math.PI * 2 / sides;
	var len = sides * repeats | 0;
	var _g1 = 0;
	while(_g1 < len) p.push({ y : y_ + (dy += dy_), x : x_ + amplitude * Math.sin(_g1++ * angleInc)});
	return p;
};
justTriangles_ShapePoints.arcPoints = function(d,radius,start,dA,sides) {
	var p = [];
	var dx = d.x;
	var dy = d.y;
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			nextAngle = angle + start;
			--i;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	return p;
};
justTriangles_ShapePoints.arc_internal = function(dx,dy,radius,start,dA,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
		p.reverse();
	}
	return p;
};
justTriangles_ShapePoints.arc = function(dx,dy,radius,start,dA,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.quadCurve = function(p0,p1,p2) {
	var p = [];
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	var x1 = p1.x - p2.x;
	var y1 = p1.y - p2.y;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
	var v;
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.quadStep);
	var t = 0.0;
	p.push(p0);
	t = step;
	while(t < 1) {
		var u = 1 - t;
		var u1 = 1 - t;
		v = { x : Math.pow(u,2) * p0.x + 2 * u * t * p1.x + Math.pow(t,2) * p2.x, y : Math.pow(u1,2) * p0.y + 2 * u1 * t * p1.y + Math.pow(t,2) * p2.y};
		p.push({ x : v.x, y : v.y});
		t += step;
	}
	p.push(p2);
	return p;
};
justTriangles_ShapePoints.cubicCurve = function(p0,p1,p2,p3) {
	var p = [];
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	var x1 = p1.x - p2.x;
	var y1 = p1.y - p2.y;
	var x2 = p2.x - p3.x;
	var y2 = p2.y - p3.y;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
	var v;
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.cubicStep);
	var t = 0.0;
	v = { x : Math.pow(1.,3) * p0.x + 3 * Math.pow(1.,2) * 0.0 * p1.x + 3. * Math.pow(0.0,2) * p2.x + Math.pow(0.0,3) * p3.x, y : Math.pow(1.,3) * p0.y + 3 * Math.pow(1.,2) * 0.0 * p1.y + 3. * Math.pow(0.0,2) * p2.y + Math.pow(0.0,3) * p3.y};
	p.push({ x : v.x, y : v.y});
	t = step;
	while(t < 1) {
		var u = 1 - t;
		var u1 = 1 - t;
		v = { x : Math.pow(u,3) * p0.x + 3 * Math.pow(u,2) * t * p1.x + 3 * u * Math.pow(t,2) * p2.x + Math.pow(t,3) * p3.x, y : Math.pow(u1,3) * p0.y + 3 * Math.pow(u1,2) * t * p1.y + 3 * u1 * Math.pow(t,2) * p2.y + Math.pow(t,3) * p3.y};
		p.push({ x : v.x, y : v.y});
		t += step;
	}
	v = { x : Math.pow(0.,3) * p0.x + 3 * Math.pow(0.,2) * p1.x + 0. * Math.pow(1.0,2) * p2.x + Math.pow(1.0,3) * p3.x, y : Math.pow(0.,3) * p0.y + 3 * Math.pow(0.,2) * p1.y + 0. * Math.pow(1.0,2) * p2.y + Math.pow(1.0,3) * p3.y};
	p.push({ x : v.x, y : v.y});
	return p;
};
justTriangles_ShapePoints.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justTriangles_ShapePoints.quadraticBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justTriangles_ShapePoints._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
var justTriangles_Triangle = function(id_,outline_,A_,B_,C_,depth_,colorID_) {
	var p1_y;
	var p1_x;
	var p0_y;
	var p0_x;
	this.id = id_;
	this.outline = outline_;
	p0_x = B_.x - A_.x;
	p0_y = B_.y - A_.y;
	p1_x = C_.x - A_.x;
	p1_y = C_.y - A_.y;
	var val = !(p0_x * p1_y - p0_y * p1_x < 0);
	if(val) {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = C_.x;
		this.by = C_.y;
		this.cx = B_.x;
		this.cy = B_.y;
	} else {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = B_.x;
		this.by = B_.y;
		this.cx = C_.x;
		this.cy = C_.y;
	}
	this.windingAdjusted = val;
	this.depth = depth_;
	this.colorID = colorID_;
	this.colorA = colorID_;
	this.colorB = colorID_;
	this.colorC = colorID_;
};
justTriangles_Triangle.__name__ = ["justTriangles","Triangle"];
justTriangles_Triangle.drawTri = function(id,outline,p0,p1,p2,colorID) {
	justTriangles_Triangle.triangles.push(new justTriangles_Triangle(id,outline,p0,p1,p2,0,colorID));
};
justTriangles_Triangle.adjustWinding = function(A_,B_,C_) {
	return !((B_.x - A_.x) * (C_.y - A_.y) - (B_.y - A_.y) * (C_.x - A_.x) < 0);
};
justTriangles_Triangle.subtract = function(p0,p1) {
	return { x : p0.x - p1.x, y : p0.y - p1.y};
};
justTriangles_Triangle.cross = function(p0,p1) {
	return p0.x * p1.y - p0.y * p1.x;
};
justTriangles_Triangle.prototype = {
	id: null
	,colorID: null
	,windingAdjusted: null
	,colorA: null
	,colorB: null
	,colorC: null
	,outline: null
	,depth: null
	,ax: null
	,bx: null
	,cx: null
	,ay: null
	,by: null
	,cy: null
	,get_x: function() {
		return Math.min(Math.min(this.ax,this.bx),this.cx);
	}
	,set_x: function(x) {
		var dx = x - this.get_x();
		this.ax += dx;
		this.bx += dx;
		this.cx += dx;
		return x;
	}
	,get_y: function() {
		return Math.min(Math.min(this.ay,this.by),this.cy);
	}
	,set_y: function(y) {
		var dy = y - this.get_y();
		this.ay += dy;
		this.by += dy;
		this.cy += dy;
		return y;
	}
	,get_right: function() {
		return Math.max(Math.max(this.ax,this.bx),this.cx);
	}
	,get_bottom: function() {
		return Math.max(Math.max(this.ay,this.by),this.cy);
	}
	,moveDelta: function(dx,dy) {
		this.ax += dx;
		this.ay += dy;
		this.bx += dx;
		this.by += dy;
		this.cx += dx;
		this.cy += dy;
	}
	,hitTest: function(P) {
		var px = P.x;
		var py = P.y;
		if(px > this.get_x() && px < this.get_right() && py > this.get_y() && py < this.get_bottom()) {
			return true;
		}
		var planeBC = (this.bx - px) * (this.cy - py) - (this.cx - px) * (this.by - py);
		if(this.sign((this.ax - px) * (this.by - py) - (this.bx - px) * (this.ay - py)) == this.sign(planeBC)) {
			return this.sign(planeBC) == this.sign((this.cx - px) * (this.ay - py) - (this.ax - px) * (this.cy - py));
		} else {
			return false;
		}
	}
	,sign: function(n) {
		return Math.abs(n) / n | 0;
	}
	,liteHit: function(px,py) {
		var planeBC = (this.bx - px) * (this.cy - py) - (this.cx - px) * (this.by - py);
		if(this.sign((this.ax - px) * (this.by - py) - (this.bx - px) * (this.ay - py)) == this.sign(planeBC)) {
			return this.sign(planeBC) == this.sign((this.cx - px) * (this.ay - py) - (this.ax - px) * (this.cy - py));
		} else {
			return false;
		}
	}
	,rotate: function(p,theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var px = p.x;
		var py = p.y;
		this.ax -= px;
		this.ay -= py;
		this.bx -= px;
		this.by -= py;
		this.cx -= px;
		this.cy -= py;
		var dx;
		var dy;
		dx = this.ax;
		dy = this.ay;
		this.ax = dx * cos - dy * sin;
		this.ay = dx * sin + dy * cos;
		dx = this.bx;
		dy = this.by;
		this.bx = dx * cos - dy * sin;
		this.by = dx * sin + dy * cos;
		dx = this.cx;
		dy = this.cy;
		this.cx = dx * cos - dy * sin;
		this.cy = dx * sin + dy * cos;
		this.ax += px;
		this.ay += py;
		this.bx += px;
		this.by += py;
		this.cx += px;
		this.cy += py;
	}
	,rotateTrig: function(p,cos,sin) {
		var px = p.x;
		var py = p.y;
		this.ax -= px;
		this.ay -= py;
		this.bx -= px;
		this.by -= py;
		this.cx -= px;
		this.cy -= py;
		var dx;
		var dy;
		dx = this.ax;
		dy = this.ay;
		this.ax = dx * cos - dy * sin;
		this.ay = dx * sin + dy * cos;
		dx = this.bx;
		dy = this.by;
		this.bx = dx * cos - dy * sin;
		this.by = dx * sin + dy * cos;
		dx = this.cx;
		dy = this.cy;
		this.cx = dx * cos - dy * sin;
		this.cy = dx * sin + dy * cos;
		this.ax += px;
		this.ay += py;
		this.bx += px;
		this.by += py;
		this.cx += px;
		this.cy += py;
	}
	,drawStrips: function(drawRect) {
		var xi = Math.floor(this.get_x());
		var righti = Math.ceil(this.get_right());
		var bottomi = Math.ceil(this.get_bottom());
		var sx = 0;
		var ex = 0;
		var sFound;
		var eFound;
		var _g1 = Math.floor(this.get_y());
		while(_g1 < bottomi) {
			var y0 = _g1++;
			sFound = false;
			eFound = false;
			var _g3 = xi;
			while(_g3 < righti) {
				var x0 = _g3++;
				var planeBC = (this.bx - x0) * (this.cy - y0) - (this.cx - x0) * (this.by - y0);
				if(this.sign((this.ax - x0) * (this.by - y0) - (this.bx - x0) * (this.ay - y0)) == this.sign(planeBC) && this.sign(planeBC) == this.sign((this.cx - x0) * (this.ay - y0) - (this.ax - x0) * (this.cy - y0))) {
					sx = x0;
					sFound = true;
					break;
				}
			}
			if(sFound) {
				var _g31 = sx;
				while(_g31 < righti) {
					var x01 = _g31++;
					var planeBC1 = (this.bx - x01) * (this.cy - y0) - (this.cx - x01) * (this.by - y0);
					if(!(this.sign((this.ax - x01) * (this.by - y0) - (this.bx - x01) * (this.ay - y0)) == this.sign(planeBC1) && this.sign(planeBC1) == this.sign((this.cx - x01) * (this.ay - y0) - (this.ax - x01) * (this.cy - y0)))) {
						ex = x01;
						eFound = true;
						break;
					}
				}
				if(eFound) {
					drawRect(sx,y0,ex - sx,1);
				}
			}
		}
	}
	,__class__: justTriangles_Triangle
};
var polyominoTriangles_PolyominoTrianglesSvg = function() {
	this.upDown = false;
	this.downDown = false;
	this.rightDown = false;
	this.leftDown = false;
	this.gameColors = [0,16711680,16744192,16776960,65280,255,4915330,9699539,4473924,3355443,789516,1118481,16777215,255,65280,16711680];
	var this1;
	var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	var element = svgElement;
	var style = element.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	window.document.body.appendChild(element);
	this1 = svgElement;
	var svgRoot = this1;
	svgRoot.setAttribute("width","1024");
	svgRoot.setAttribute("height","768");
	this.surface = new justDrawing_Surface(svgRoot);
	justTriangles_Draw.drawTri = justTriangles_Triangle.drawTri;
	this.polyomino = new polyominoTriangles_game_Polyomino(1);
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = $bind(this,this.render);
	window.document.onkeydown = $bind(this,this.keyDown);
	window.document.onkeyup = $bind(this,this.keyUp);
};
polyominoTriangles_PolyominoTrianglesSvg.__name__ = ["polyominoTriangles","PolyominoTrianglesSvg"];
polyominoTriangles_PolyominoTrianglesSvg.main = function() {
	new polyominoTriangles_PolyominoTrianglesSvg();
};
polyominoTriangles_PolyominoTrianglesSvg.prototype = {
	surface: null
	,polyomino: null
	,gameColors: null
	,leftDown: null
	,rightDown: null
	,downDown: null
	,upDown: null
	,render: function(i) {
		var c1_y;
		var c1_x;
		var c0_y;
		var c0_x;
		var _this = this.polyomino;
		if(!_this.end) {
			var _this1 = _this.controller;
			var l = _this1.shapes.length;
			var shape;
			var hit = false;
			var _g1 = 0;
			while(_g1 < l) {
				shape = _this1.shapes[_g1++];
				shape.getLocation();
				var diaSq = _this1.diaSq;
				var vb0 = shape.virtualBlocks;
				var vb1 = _this1.bottom.blocks;
				var l0 = vb0.length;
				var l1 = vb1.length;
				var sq0;
				var sq1;
				var out = false;
				var _g11 = 0;
				while(_g11 < l0) {
					sq0 = vb0[_g11++];
					var _g3 = 0;
					while(_g3 < l1) {
						sq1 = vb1[_g3++];
						var dx = sq0.t0.bx;
						var dy = sq0.t0.by;
						var ex = sq0.t0.cx;
						var ey = sq0.t0.cy;
						if(dx < ex) {
							c0_x = dx + (ex - dx) / 2;
						} else {
							c0_x = ex + (dx - ex) / 2;
						}
						if(dy < ey) {
							c0_y = dy + (ey - dy) / 2;
						} else {
							c0_y = dy + (dy - ey) / 2 - sq0.dia;
						}
						var dx1 = sq1.t0.bx;
						var dy1 = sq1.t0.by;
						var ex1 = sq1.t0.cx;
						var ey1 = sq1.t0.cy;
						if(dx1 < ex1) {
							c1_x = dx1 + (ex1 - dx1) / 2;
						} else {
							c1_x = ex1 + (dx1 - ex1) / 2;
						}
						if(dy1 < ey1) {
							c1_y = dy1 + (ey1 - dy1) / 2;
						} else {
							c1_y = dy1 + (dy1 - ey1) / 2 - sq1.dia;
						}
						var dx2 = c0_x - c1_x;
						var dy2 = c0_y - c1_y;
						if(dx2 * dx2 + dy2 * dy2 < diaSq) {
							out = true;
							break;
						}
					}
				}
				if(out) {
					var beta;
					if(shape.angle < 0) {
						beta = -shape.angle + 180;
					}
					beta = shape.angle % (2 * Math.PI);
					shape.rotate(shape.rook - beta);
					var newLoc;
					var _g12 = 0;
					var _g = shape.lastLocation.length;
					while(_g12 < _g) {
						var i1 = _g12++;
						newLoc = shape.newLocation[i1];
						shape.blocks[i1].set_x(newLoc.x * shape.dia);
						shape.blocks[i1].set_y(newLoc.y * shape.dia);
						shape.virtualBlocks[i1].set_x(newLoc.x * shape.dia);
						shape.virtualBlocks[i1].set_y(newLoc.y * shape.dia);
					}
					var newBlocks = shape.clearBlocks();
					var l2 = newBlocks.length;
					var _g13 = 0;
					while(_g13 < l2) _this1.bottom.pushBlock(newBlocks[_g13++]);
					var arrP = shape.lastLocation;
					var arr2d = _this1.inertArr;
					var lp = arrP.length;
					var p;
					var _g14 = 0;
					while(_g14 < lp) {
						p = arrP[_g14++];
						arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
					}
					_this1.removeFullRows();
					hit = true;
				}
			}
			var this1 = _this1.inertArr;
			var w = this1[0];
			var s = 2 + w * 0 | 0;
			var e = s + w;
			var emp = true;
			var _g15 = s;
			while(_g15 < e) if(this1[_g15++] == 1) {
				emp = false;
				break;
			}
			var end = !emp;
			if(end) {
				_this1.onGameEnd();
			}
			if(_this1.onPolyominoShapeLanded != null && hit && !end) {
				_this1.onPolyominoShapeLanded();
			}
			if(!hit) {
				var _this2 = _this.rotation;
				if(_this2.toggle) {
					var _this3 = _this2.controller;
					var theta = Math.PI / _this2.rotationSpeed;
					var l3 = _this3.shapes.length;
					var _g16 = 0;
					while(_g16 < l3) _this3.shapes[_g16++].rotate(theta);
				}
				if(_this2.count % (_this2.rotationSpeed / 2) == 0.) {
					_this2.count = 0.;
					_this2.toggle = false;
				}
				_this2.count += 1.;
				var _this4 = _this.movement;
				var djx = 0.;
				var djy = 0.;
				if(_this4.toggleX) {
					if(_this4.jumpX > 0) {
						djx = _this4.jumpX / _this4.jumpSpeed;
						if((_this4.jx += djx) > _this4.jumpX + djx / 2) {
							_this4.toggleX = false;
							_this4.jx = 0.;
							djx = 0.;
						}
					} else {
						djx = _this4.jumpX / _this4.jumpSpeed;
						if((_this4.jx += djx) < _this4.jumpX + djx / 2) {
							_this4.toggleX = false;
							_this4.jx = 0.;
							djx = 0.;
						}
					}
				}
				if(_this4.toggleY) {
					if(_this4.jumpY > 0) {
						djy = _this4.jumpY / _this4.jumpSpeed;
						if((_this4.jy += djy) > _this4.jumpY + djy / 2) {
							_this4.toggleY = false;
							_this4.jy = 0.;
							djy = 0.;
						}
					} else {
						djy = _this4.jumpY / _this4.jumpSpeed;
						if((_this4.jy += djx) < _this4.jumpY + djy / 2) {
							_this4.toggleY = false;
							_this4.jy = 0.;
							djy = 0.;
						}
					}
				}
				if(_this4.toggleX) {
					var _this5 = _this4.controller;
					var leftStop = _this4.leftStop;
					var rightStop = _this4.rightStop;
					var l4 = _this5.shapes.length;
					var shape1;
					var _g17 = 0;
					while(_g17 < l4) {
						shape1 = _this5.shapes[_g17++];
						if(shape1.blocks != null && shape1.blocks.length != 0) {
							var sqr = shape1.blocks;
							var sides0;
							if(sqr == null) {
								sides0 = null;
							} else if(sqr.length == 0) {
								sides0 = null;
							} else {
								var l5 = sqr.length;
								var square = sqr[0];
								var bx = square.get_x();
								var br = square.get_right();
								var _g18 = 1;
								while(_g18 < l5) {
									square = sqr[_g18++];
									bx = Math.min(bx,square.get_x());
									br = Math.max(br,square.get_right());
								}
								sides0 = { x : bx, right : br};
							}
							var sqr1 = shape1.virtualBlocks;
							var sides1;
							if(sqr1 == null) {
								sides1 = null;
							} else if(sqr1.length == 0) {
								sides1 = null;
							} else {
								var l6 = sqr1.length;
								var square1 = sqr1[0];
								var bx1 = square1.get_x();
								var br1 = square1.get_right();
								var _g19 = 1;
								while(_g19 < l6) {
									square1 = sqr1[_g19++];
									bx1 = Math.min(bx1,square1.get_x());
									br1 = Math.max(br1,square1.get_right());
								}
								sides1 = { x : bx1, right : br1};
							}
							var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
							if(sides != null) {
								if(djx < 0) {
									if(sides.x + djx > leftStop) {
										shape1.moveX(djx);
									} else {
										shape1.moveX(leftStop - sides.x);
									}
								} else if(djx > 0) {
									if(sides.right + djx < rightStop) {
										shape1.moveX(djx);
									} else {
										shape1.moveX(rightStop - sides.right);
									}
								}
							}
						}
					}
				}
				var _this6 = _this4.controller;
				var y = _this4.fallSpeed + djy;
				var l7 = _this6.shapes.length;
				var _g110 = 0;
				while(_g110 < l7) _this6.shapes[_g110++].moveDelta(0.0,y);
			}
		}
		var tri;
		var triangles = justTriangles_Triangle.triangles;
		var g = this.surface;
		g.beginFill(0,1.);
		g.lineStyle(0.,0,0.);
		g.drawRect(1,1,1022,766);
		g.endFill();
		var _g111 = 0;
		var _g2 = triangles.length;
		while(_g111 < _g2) {
			tri = triangles[_g111++];
			g.beginFill(this.gameColors[tri.colorID]);
			g.drawTri([300 + tri.ax * 300,20 + tri.ay * 300,300 + tri.bx * 300,20 + tri.by * 300,300 + tri.cx * 300,20 + tri.cy * 300]);
			g.endFill();
		}
	}
	,renderTriangles: function() {
		var tri;
		var triangles = justTriangles_Triangle.triangles;
		var g = this.surface;
		g.beginFill(0,1.);
		g.lineStyle(0.,0,0.);
		g.drawRect(1,1,1022,766);
		g.endFill();
		var _g1 = 0;
		var _g = triangles.length;
		while(_g1 < _g) {
			tri = triangles[_g1++];
			g.beginFill(this.gameColors[tri.colorID]);
			g.drawTri([300 + tri.ax * 300,20 + tri.ay * 300,300 + tri.bx * 300,20 + tri.by * 300,300 + tri.cx * 300,20 + tri.cy * 300]);
			g.endFill();
		}
	}
	,keyDown: function(e) {
		e.preventDefault();
		switch(e.keyCode) {
		case 37:
			this.leftDown = true;
			break;
		case 38:
			this.upDown = true;
			break;
		case 39:
			this.rightDown = true;
			break;
		case 40:
			this.downDown = true;
			break;
		default:
		}
		if(this.upDown) {
			var _this = this.polyomino.rotation;
			if(!_this.toggle) {
				_this.toggle = true;
				_this.count = 1.0;
			}
		} else if(this.downDown) {
			var _this1 = this.polyomino.movement;
			if(!_this1.toggleX) {
				if(!_this1.toggleY) {
					_this1.toggleY = true;
					_this1.jumpX = 0 * _this1.dia;
					_this1.jumpY = _this1.dia;
				}
			}
		}
		if(this.leftDown) {
			var _this2 = this.polyomino.movement;
			if(!_this2.toggleX) {
				if(!_this2.toggleY) {
					_this2.toggleX = true;
					_this2.jumpX = -1 * _this2.dia;
					_this2.jumpY = 0 * _this2.dia;
				}
			}
		} else if(this.rightDown) {
			var _this3 = this.polyomino.movement;
			if(!_this3.toggleX) {
				if(!_this3.toggleY) {
					_this3.toggleX = true;
					_this3.jumpX = _this3.dia;
					_this3.jumpY = 0 * _this3.dia;
				}
			}
		}
		this.leftDown = false;
		this.rightDown = false;
		this.downDown = false;
		this.upDown = false;
	}
	,keyUp: function(e) {
		e.preventDefault();
		switch(e.keyCode) {
		case 37:
			this.leftDown = false;
			break;
		case 38:
			this.upDown = false;
			break;
		case 39:
			this.rightDown = false;
			break;
		case 40:
			this.downDown = false;
			break;
		default:
		}
	}
	,update: function() {
		if(this.upDown) {
			var _this = this.polyomino.rotation;
			if(!_this.toggle) {
				_this.toggle = true;
				_this.count = 1.0;
			}
		} else if(this.downDown) {
			var _this1 = this.polyomino.movement;
			if(!_this1.toggleX) {
				if(!_this1.toggleY) {
					_this1.toggleY = true;
					_this1.jumpX = 0 * _this1.dia;
					_this1.jumpY = _this1.dia;
				}
			}
		}
		if(this.leftDown) {
			var _this2 = this.polyomino.movement;
			if(!_this2.toggleX) {
				if(!_this2.toggleY) {
					_this2.toggleX = true;
					_this2.jumpX = -1 * _this2.dia;
					_this2.jumpY = 0 * _this2.dia;
				}
			}
		} else if(this.rightDown) {
			var _this3 = this.polyomino.movement;
			if(!_this3.toggleX) {
				if(!_this3.toggleY) {
					_this3.toggleX = true;
					_this3.jumpX = _this3.dia;
					_this3.jumpY = 0 * _this3.dia;
				}
			}
		}
		this.leftDown = false;
		this.rightDown = false;
		this.downDown = false;
		this.upDown = false;
	}
	,__class__: polyominoTriangles_PolyominoTrianglesSvg
};
var polyominoTriangles_game_ABC = function(createPolyomino_) {
	this.createPolyomino = createPolyomino_;
};
polyominoTriangles_game_ABC.__name__ = ["polyominoTriangles","game","ABC"];
polyominoTriangles_game_ABC.prototype = {
	createPolyomino: null
	,rnd: function(p) {
		return this.createABC(HxOverrides.substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",Math.round(Math.random() * ("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".length - 1)),1),p);
	}
	,createABC: function(letter,p) {
		var arr;
		switch(letter) {
		case "!":
			var v = [3,5,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1];
			var this1;
			if(v == null) {
				var _g = [];
				var _g2 = 0;
				while(_g2 < 10002) {
					++_g2;
					_g.push(0);
				}
				_g[0] = 100;
				_g[1] = 100;
				v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g);
			}
			this1 = v;
			arr = this1;
			var snapped = null;
			if(snapped == null) {
				snapped = polyominoTriangles_game_Snapped.Always;
			}
			var ts = this.createPolyomino(p,snapped);
			var w = arr[0];
			var h = arr[1];
			var _g1 = 0;
			while(_g1 < w) {
				var x = _g1++;
				var _g3 = 0;
				while(_g3 < h) {
					var y = _g3++;
					if(arr[2 + arr[0] * y + x | 0] == 1) {
						ts.addBlock(-2 + x,-2.5 + y);
					}
				}
			}
			return ts;
		case "\"":
			var v1 = [4,5,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0];
			var this2;
			if(v1 == null) {
				var _g4 = [];
				var _g21 = 0;
				while(_g21 < 10002) {
					++_g21;
					_g4.push(0);
				}
				_g4[0] = 100;
				_g4[1] = 100;
				v1 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g4);
			}
			this2 = v1;
			arr = this2;
			var snapped1 = null;
			if(snapped1 == null) {
				snapped1 = polyominoTriangles_game_Snapped.Always;
			}
			var ts1 = this.createPolyomino(p,snapped1);
			var w1 = arr[0];
			var h1 = arr[1];
			var _g11 = 0;
			while(_g11 < w1) {
				var x1 = _g11++;
				var _g31 = 0;
				while(_g31 < h1) {
					var y1 = _g31++;
					if(arr[2 + arr[0] * y1 + x1 | 0] == 1) {
						ts1.addBlock(-2 + x1,-2.5 + y1);
					}
				}
			}
			return ts1;
		case "#":
			var v2 = [5,5,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0];
			var this3;
			if(v2 == null) {
				var _g5 = [];
				var _g22 = 0;
				while(_g22 < 10002) {
					++_g22;
					_g5.push(0);
				}
				_g5[0] = 100;
				_g5[1] = 100;
				v2 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g5);
			}
			this3 = v2;
			arr = this3;
			var snapped2 = null;
			if(snapped2 == null) {
				snapped2 = polyominoTriangles_game_Snapped.Always;
			}
			var ts2 = this.createPolyomino(p,snapped2);
			var w2 = arr[0];
			var h2 = arr[1];
			var _g12 = 0;
			while(_g12 < w2) {
				var x2 = _g12++;
				var _g32 = 0;
				while(_g32 < h2) {
					var y2 = _g32++;
					if(arr[2 + arr[0] * y2 + x2 | 0] == 1) {
						ts2.addBlock(-2 + x2,-2.5 + y2);
					}
				}
			}
			return ts2;
		case "%":
			var v3 = [5,5,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1];
			var this4;
			if(v3 == null) {
				var _g6 = [];
				var _g23 = 0;
				while(_g23 < 10002) {
					++_g23;
					_g6.push(0);
				}
				_g6[0] = 100;
				_g6[1] = 100;
				v3 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g6);
			}
			this4 = v3;
			arr = this4;
			var snapped3 = null;
			if(snapped3 == null) {
				snapped3 = polyominoTriangles_game_Snapped.Always;
			}
			var ts3 = this.createPolyomino(p,snapped3);
			var w3 = arr[0];
			var h3 = arr[1];
			var _g13 = 0;
			while(_g13 < w3) {
				var x3 = _g13++;
				var _g33 = 0;
				while(_g33 < h3) {
					var y3 = _g33++;
					if(arr[2 + arr[0] * y3 + x3 | 0] == 1) {
						ts3.addBlock(-2 + x3,-2.5 + y3);
					}
				}
			}
			return ts3;
		case "&":
			var v4 = [4,5,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1];
			var this5;
			if(v4 == null) {
				var _g7 = [];
				var _g24 = 0;
				while(_g24 < 10002) {
					++_g24;
					_g7.push(0);
				}
				_g7[0] = 100;
				_g7[1] = 100;
				v4 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g7);
			}
			this5 = v4;
			arr = this5;
			var snapped4 = null;
			if(snapped4 == null) {
				snapped4 = polyominoTriangles_game_Snapped.Always;
			}
			var ts4 = this.createPolyomino(p,snapped4);
			var w4 = arr[0];
			var h4 = arr[1];
			var _g14 = 0;
			while(_g14 < w4) {
				var x4 = _g14++;
				var _g34 = 0;
				while(_g34 < h4) {
					var y4 = _g34++;
					if(arr[2 + arr[0] * y4 + x4 | 0] == 1) {
						ts4.addBlock(-2 + x4,-2.5 + y4);
					}
				}
			}
			return ts4;
		case "(":
			var v5 = [4,5,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0];
			var this6;
			if(v5 == null) {
				var _g8 = [];
				var _g25 = 0;
				while(_g25 < 10002) {
					++_g25;
					_g8.push(0);
				}
				_g8[0] = 100;
				_g8[1] = 100;
				v5 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g8);
			}
			this6 = v5;
			arr = this6;
			var snapped5 = null;
			if(snapped5 == null) {
				snapped5 = polyominoTriangles_game_Snapped.Always;
			}
			var ts5 = this.createPolyomino(p,snapped5);
			var w5 = arr[0];
			var h5 = arr[1];
			var _g15 = 0;
			while(_g15 < w5) {
				var x5 = _g15++;
				var _g35 = 0;
				while(_g35 < h5) {
					var y5 = _g35++;
					if(arr[2 + arr[0] * y5 + x5 | 0] == 1) {
						ts5.addBlock(-2 + x5,-2.5 + y5);
					}
				}
			}
			return ts5;
		case ")":
			var v6 = [4,5,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0];
			var this7;
			if(v6 == null) {
				var _g9 = [];
				var _g26 = 0;
				while(_g26 < 10002) {
					++_g26;
					_g9.push(0);
				}
				_g9[0] = 100;
				_g9[1] = 100;
				v6 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g9);
			}
			this7 = v6;
			arr = this7;
			var snapped6 = null;
			if(snapped6 == null) {
				snapped6 = polyominoTriangles_game_Snapped.Always;
			}
			var ts6 = this.createPolyomino(p,snapped6);
			var w6 = arr[0];
			var h6 = arr[1];
			var _g16 = 0;
			while(_g16 < w6) {
				var x6 = _g16++;
				var _g36 = 0;
				while(_g36 < h6) {
					var y6 = _g36++;
					if(arr[2 + arr[0] * y6 + x6 | 0] == 1) {
						ts6.addBlock(-2 + x6,-2.5 + y6);
					}
				}
			}
			return ts6;
		case "*":
			var v7 = [5,5,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1];
			var this8;
			if(v7 == null) {
				var _g10 = [];
				var _g27 = 0;
				while(_g27 < 10002) {
					++_g27;
					_g10.push(0);
				}
				_g10[0] = 100;
				_g10[1] = 100;
				v7 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g10);
			}
			this8 = v7;
			arr = this8;
			var snapped7 = null;
			if(snapped7 == null) {
				snapped7 = polyominoTriangles_game_Snapped.Always;
			}
			var ts7 = this.createPolyomino(p,snapped7);
			var w7 = arr[0];
			var h7 = arr[1];
			var _g17 = 0;
			while(_g17 < w7) {
				var x7 = _g17++;
				var _g37 = 0;
				while(_g37 < h7) {
					var y7 = _g37++;
					if(arr[2 + arr[0] * y7 + x7 | 0] == 1) {
						ts7.addBlock(-2 + x7,-2.5 + y7);
					}
				}
			}
			return ts7;
		case "+":
			var v8 = [4,5,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0];
			var this9;
			if(v8 == null) {
				var _g18 = [];
				var _g28 = 0;
				while(_g28 < 10002) {
					++_g28;
					_g18.push(0);
				}
				_g18[0] = 100;
				_g18[1] = 100;
				v8 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g18);
			}
			this9 = v8;
			arr = this9;
			var snapped8 = null;
			if(snapped8 == null) {
				snapped8 = polyominoTriangles_game_Snapped.Always;
			}
			var ts8 = this.createPolyomino(p,snapped8);
			var w8 = arr[0];
			var h8 = arr[1];
			var _g19 = 0;
			while(_g19 < w8) {
				var x8 = _g19++;
				var _g38 = 0;
				while(_g38 < h8) {
					var y8 = _g38++;
					if(arr[2 + arr[0] * y8 + x8 | 0] == 1) {
						ts8.addBlock(-2 + x8,-2.5 + y8);
					}
				}
			}
			return ts8;
		case ",":
			var v9 = [3,5,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0];
			var this10;
			if(v9 == null) {
				var _g20 = [];
				var _g29 = 0;
				while(_g29 < 10002) {
					++_g29;
					_g20.push(0);
				}
				_g20[0] = 100;
				_g20[1] = 100;
				v9 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g20);
			}
			this10 = v9;
			arr = this10;
			var snapped9 = null;
			if(snapped9 == null) {
				snapped9 = polyominoTriangles_game_Snapped.Always;
			}
			var ts9 = this.createPolyomino(p,snapped9);
			var w9 = arr[0];
			var h9 = arr[1];
			var _g110 = 0;
			while(_g110 < w9) {
				var x9 = _g110++;
				var _g39 = 0;
				while(_g39 < h9) {
					var y9 = _g39++;
					if(arr[2 + arr[0] * y9 + x9 | 0] == 1) {
						ts9.addBlock(-2 + x9,-2.5 + y9);
					}
				}
			}
			return ts9;
		case "-":
			var v10 = [4,5,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0];
			var this11;
			if(v10 == null) {
				var _g30 = [];
				var _g210 = 0;
				while(_g210 < 10002) {
					++_g210;
					_g30.push(0);
				}
				_g30[0] = 100;
				_g30[1] = 100;
				v10 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g30);
			}
			this11 = v10;
			arr = this11;
			var snapped10 = null;
			if(snapped10 == null) {
				snapped10 = polyominoTriangles_game_Snapped.Always;
			}
			var ts10 = this.createPolyomino(p,snapped10);
			var w10 = arr[0];
			var h10 = arr[1];
			var _g111 = 0;
			while(_g111 < w10) {
				var x10 = _g111++;
				var _g310 = 0;
				while(_g310 < h10) {
					var y10 = _g310++;
					if(arr[2 + arr[0] * y10 + x10 | 0] == 1) {
						ts10.addBlock(-2 + x10,-2.5 + y10);
					}
				}
			}
			return ts10;
		case ".":
			var v11 = [3,5,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1];
			var this12;
			if(v11 == null) {
				var _g40 = [];
				var _g211 = 0;
				while(_g211 < 10002) {
					++_g211;
					_g40.push(0);
				}
				_g40[0] = 100;
				_g40[1] = 100;
				v11 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g40);
			}
			this12 = v11;
			arr = this12;
			var snapped11 = null;
			if(snapped11 == null) {
				snapped11 = polyominoTriangles_game_Snapped.Always;
			}
			var ts11 = this.createPolyomino(p,snapped11);
			var w11 = arr[0];
			var h11 = arr[1];
			var _g112 = 0;
			while(_g112 < w11) {
				var x11 = _g112++;
				var _g311 = 0;
				while(_g311 < h11) {
					var y11 = _g311++;
					if(arr[2 + arr[0] * y11 + x11 | 0] == 1) {
						ts11.addBlock(-2 + x11,-2.5 + y11);
					}
				}
			}
			return ts11;
		case "/":
			var v12 = [4,5,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0];
			var this13;
			if(v12 == null) {
				var _g41 = [];
				var _g212 = 0;
				while(_g212 < 10002) {
					++_g212;
					_g41.push(0);
				}
				_g41[0] = 100;
				_g41[1] = 100;
				v12 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g41);
			}
			this13 = v12;
			arr = this13;
			var snapped12 = null;
			if(snapped12 == null) {
				snapped12 = polyominoTriangles_game_Snapped.Always;
			}
			var ts12 = this.createPolyomino(p,snapped12);
			var w12 = arr[0];
			var h12 = arr[1];
			var _g113 = 0;
			while(_g113 < w12) {
				var x12 = _g113++;
				var _g312 = 0;
				while(_g312 < h12) {
					var y12 = _g312++;
					if(arr[2 + arr[0] * y12 + x12 | 0] == 1) {
						ts12.addBlock(-2 + x12,-2.5 + y12);
					}
				}
			}
			return ts12;
		case "0":
			var v13 = [4,5,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,0];
			var this14;
			if(v13 == null) {
				var _g42 = [];
				var _g213 = 0;
				while(_g213 < 10002) {
					++_g213;
					_g42.push(0);
				}
				_g42[0] = 100;
				_g42[1] = 100;
				v13 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g42);
			}
			this14 = v13;
			arr = this14;
			var snapped13 = null;
			if(snapped13 == null) {
				snapped13 = polyominoTriangles_game_Snapped.Always;
			}
			var ts13 = this.createPolyomino(p,snapped13);
			var w13 = arr[0];
			var h13 = arr[1];
			var _g114 = 0;
			while(_g114 < w13) {
				var x13 = _g114++;
				var _g313 = 0;
				while(_g313 < h13) {
					var y13 = _g313++;
					if(arr[2 + arr[0] * y13 + x13 | 0] == 1) {
						ts13.addBlock(-2 + x13,-2.5 + y13);
					}
				}
			}
			return ts13;
		case "1":
			var v14 = [3,5,0,1,0,1,1,0,0,1,0,0,1,0,1,1,1];
			var this15;
			if(v14 == null) {
				var _g43 = [];
				var _g214 = 0;
				while(_g214 < 10002) {
					++_g214;
					_g43.push(0);
				}
				_g43[0] = 100;
				_g43[1] = 100;
				v14 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g43);
			}
			this15 = v14;
			arr = this15;
			var snapped14 = null;
			if(snapped14 == null) {
				snapped14 = polyominoTriangles_game_Snapped.Always;
			}
			var ts14 = this.createPolyomino(p,snapped14);
			var w14 = arr[0];
			var h14 = arr[1];
			var _g115 = 0;
			while(_g115 < w14) {
				var x14 = _g115++;
				var _g314 = 0;
				while(_g314 < h14) {
					var y14 = _g314++;
					if(arr[2 + arr[0] * y14 + x14 | 0] == 1) {
						ts14.addBlock(-2 + x14,-2.5 + y14);
					}
				}
			}
			return ts14;
		case "2":
			var v15 = [4,5,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1];
			var this16;
			if(v15 == null) {
				var _g44 = [];
				var _g215 = 0;
				while(_g215 < 10002) {
					++_g215;
					_g44.push(0);
				}
				_g44[0] = 100;
				_g44[1] = 100;
				v15 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g44);
			}
			this16 = v15;
			arr = this16;
			var snapped15 = null;
			if(snapped15 == null) {
				snapped15 = polyominoTriangles_game_Snapped.Always;
			}
			var ts15 = this.createPolyomino(p,snapped15);
			var w15 = arr[0];
			var h15 = arr[1];
			var _g116 = 0;
			while(_g116 < w15) {
				var x15 = _g116++;
				var _g315 = 0;
				while(_g315 < h15) {
					var y15 = _g315++;
					if(arr[2 + arr[0] * y15 + x15 | 0] == 1) {
						ts15.addBlock(-2 + x15,-2.5 + y15);
					}
				}
			}
			return ts15;
		case "3":
			var v16 = [4,5,1,1,1,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0];
			var this17;
			if(v16 == null) {
				var _g45 = [];
				var _g216 = 0;
				while(_g216 < 10002) {
					++_g216;
					_g45.push(0);
				}
				_g45[0] = 100;
				_g45[1] = 100;
				v16 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g45);
			}
			this17 = v16;
			arr = this17;
			var snapped16 = null;
			if(snapped16 == null) {
				snapped16 = polyominoTriangles_game_Snapped.Always;
			}
			var ts16 = this.createPolyomino(p,snapped16);
			var w16 = arr[0];
			var h16 = arr[1];
			var _g117 = 0;
			while(_g117 < w16) {
				var x16 = _g117++;
				var _g316 = 0;
				while(_g316 < h16) {
					var y16 = _g316++;
					if(arr[2 + arr[0] * y16 + x16 | 0] == 1) {
						ts16.addBlock(-2 + x16,-2.5 + y16);
					}
				}
			}
			return ts16;
		case "4":
			var v17 = [4,5,1,0,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,0,1,0];
			var this18;
			if(v17 == null) {
				var _g46 = [];
				var _g217 = 0;
				while(_g217 < 10002) {
					++_g217;
					_g46.push(0);
				}
				_g46[0] = 100;
				_g46[1] = 100;
				v17 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g46);
			}
			this18 = v17;
			arr = this18;
			var snapped17 = null;
			if(snapped17 == null) {
				snapped17 = polyominoTriangles_game_Snapped.Always;
			}
			var ts17 = this.createPolyomino(p,snapped17);
			var w17 = arr[0];
			var h17 = arr[1];
			var _g118 = 0;
			while(_g118 < w17) {
				var x17 = _g118++;
				var _g317 = 0;
				while(_g317 < h17) {
					var y17 = _g317++;
					if(arr[2 + arr[0] * y17 + x17 | 0] == 1) {
						ts17.addBlock(-2 + x17,-2.5 + y17);
					}
				}
			}
			return ts17;
		case "5":
			var v18 = [4,5,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0];
			var this19;
			if(v18 == null) {
				var _g47 = [];
				var _g218 = 0;
				while(_g218 < 10002) {
					++_g218;
					_g47.push(0);
				}
				_g47[0] = 100;
				_g47[1] = 100;
				v18 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g47);
			}
			this19 = v18;
			arr = this19;
			var snapped18 = null;
			if(snapped18 == null) {
				snapped18 = polyominoTriangles_game_Snapped.Always;
			}
			var ts18 = this.createPolyomino(p,snapped18);
			var w18 = arr[0];
			var h18 = arr[1];
			var _g119 = 0;
			while(_g119 < w18) {
				var x18 = _g119++;
				var _g318 = 0;
				while(_g318 < h18) {
					var y18 = _g318++;
					if(arr[2 + arr[0] * y18 + x18 | 0] == 1) {
						ts18.addBlock(-2 + x18,-2.5 + y18);
					}
				}
			}
			return ts18;
		case "6":
			var v19 = [4,5,0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,1,1,0];
			var this20;
			if(v19 == null) {
				var _g48 = [];
				var _g219 = 0;
				while(_g219 < 10002) {
					++_g219;
					_g48.push(0);
				}
				_g48[0] = 100;
				_g48[1] = 100;
				v19 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g48);
			}
			this20 = v19;
			arr = this20;
			var snapped19 = null;
			if(snapped19 == null) {
				snapped19 = polyominoTriangles_game_Snapped.Always;
			}
			var ts19 = this.createPolyomino(p,snapped19);
			var w19 = arr[0];
			var h19 = arr[1];
			var _g120 = 0;
			while(_g120 < w19) {
				var x19 = _g120++;
				var _g319 = 0;
				while(_g319 < h19) {
					var y19 = _g319++;
					if(arr[2 + arr[0] * y19 + x19 | 0] == 1) {
						ts19.addBlock(-2 + x19,-2.5 + y19);
					}
				}
			}
			return ts19;
		case "7":
			var v20 = [4,5,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0];
			var this21;
			if(v20 == null) {
				var _g49 = [];
				var _g220 = 0;
				while(_g220 < 10002) {
					++_g220;
					_g49.push(0);
				}
				_g49[0] = 100;
				_g49[1] = 100;
				v20 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g49);
			}
			this21 = v20;
			arr = this21;
			var snapped20 = null;
			if(snapped20 == null) {
				snapped20 = polyominoTriangles_game_Snapped.Always;
			}
			var ts20 = this.createPolyomino(p,snapped20);
			var w20 = arr[0];
			var h20 = arr[1];
			var _g121 = 0;
			while(_g121 < w20) {
				var x20 = _g121++;
				var _g320 = 0;
				while(_g320 < h20) {
					var y20 = _g320++;
					if(arr[2 + arr[0] * y20 + x20 | 0] == 1) {
						ts20.addBlock(-2 + x20,-2.5 + y20);
					}
				}
			}
			return ts20;
		case "8":
			var v21 = [4,5,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0];
			var this22;
			if(v21 == null) {
				var _g50 = [];
				var _g221 = 0;
				while(_g221 < 10002) {
					++_g221;
					_g50.push(0);
				}
				_g50[0] = 100;
				_g50[1] = 100;
				v21 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g50);
			}
			this22 = v21;
			arr = this22;
			var snapped21 = null;
			if(snapped21 == null) {
				snapped21 = polyominoTriangles_game_Snapped.Always;
			}
			var ts21 = this.createPolyomino(p,snapped21);
			var w21 = arr[0];
			var h21 = arr[1];
			var _g122 = 0;
			while(_g122 < w21) {
				var x21 = _g122++;
				var _g321 = 0;
				while(_g321 < h21) {
					var y21 = _g321++;
					if(arr[2 + arr[0] * y21 + x21 | 0] == 1) {
						ts21.addBlock(-2 + x21,-2.5 + y21);
					}
				}
			}
			return ts21;
		case "9":
			var v22 = [4,5,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0];
			var this23;
			if(v22 == null) {
				var _g51 = [];
				var _g222 = 0;
				while(_g222 < 10002) {
					++_g222;
					_g51.push(0);
				}
				_g51[0] = 100;
				_g51[1] = 100;
				v22 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g51);
			}
			this23 = v22;
			arr = this23;
			var snapped22 = null;
			if(snapped22 == null) {
				snapped22 = polyominoTriangles_game_Snapped.Always;
			}
			var ts22 = this.createPolyomino(p,snapped22);
			var w22 = arr[0];
			var h22 = arr[1];
			var _g123 = 0;
			while(_g123 < w22) {
				var x22 = _g123++;
				var _g322 = 0;
				while(_g322 < h22) {
					var y22 = _g322++;
					if(arr[2 + arr[0] * y22 + x22 | 0] == 1) {
						ts22.addBlock(-2 + x22,-2.5 + y22);
					}
				}
			}
			return ts22;
		case ":":
			var v23 = [3,5,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1];
			var this24;
			if(v23 == null) {
				var _g52 = [];
				var _g223 = 0;
				while(_g223 < 10002) {
					++_g223;
					_g52.push(0);
				}
				_g52[0] = 100;
				_g52[1] = 100;
				v23 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g52);
			}
			this24 = v23;
			arr = this24;
			var snapped23 = null;
			if(snapped23 == null) {
				snapped23 = polyominoTriangles_game_Snapped.Always;
			}
			var ts23 = this.createPolyomino(p,snapped23);
			var w23 = arr[0];
			var h23 = arr[1];
			var _g124 = 0;
			while(_g124 < w23) {
				var x23 = _g124++;
				var _g323 = 0;
				while(_g323 < h23) {
					var y23 = _g323++;
					if(arr[2 + arr[0] * y23 + x23 | 0] == 1) {
						ts23.addBlock(-2 + x23,-2.5 + y23);
					}
				}
			}
			return ts23;
		case ";":
			var v24 = [3,5,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0];
			var this25;
			if(v24 == null) {
				var _g53 = [];
				var _g224 = 0;
				while(_g224 < 10002) {
					++_g224;
					_g53.push(0);
				}
				_g53[0] = 100;
				_g53[1] = 100;
				v24 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g53);
			}
			this25 = v24;
			arr = this25;
			var snapped24 = null;
			if(snapped24 == null) {
				snapped24 = polyominoTriangles_game_Snapped.Always;
			}
			var ts24 = this.createPolyomino(p,snapped24);
			var w24 = arr[0];
			var h24 = arr[1];
			var _g125 = 0;
			while(_g125 < w24) {
				var x24 = _g125++;
				var _g324 = 0;
				while(_g324 < h24) {
					var y24 = _g324++;
					if(arr[2 + arr[0] * y24 + x24 | 0] == 1) {
						ts24.addBlock(-2 + x24,-2.5 + y24);
					}
				}
			}
			return ts24;
		case "<":
			var v25 = [4,5,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0];
			var this26;
			if(v25 == null) {
				var _g54 = [];
				var _g225 = 0;
				while(_g225 < 10002) {
					++_g225;
					_g54.push(0);
				}
				_g54[0] = 100;
				_g54[1] = 100;
				v25 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g54);
			}
			this26 = v25;
			arr = this26;
			var snapped25 = null;
			if(snapped25 == null) {
				snapped25 = polyominoTriangles_game_Snapped.Always;
			}
			var ts25 = this.createPolyomino(p,snapped25);
			var w25 = arr[0];
			var h25 = arr[1];
			var _g126 = 0;
			while(_g126 < w25) {
				var x25 = _g126++;
				var _g325 = 0;
				while(_g325 < h25) {
					var y25 = _g325++;
					if(arr[2 + arr[0] * y25 + x25 | 0] == 1) {
						ts25.addBlock(-2 + x25,-2.5 + y25);
					}
				}
			}
			return ts25;
		case "=":
			var v26 = [4,5,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0];
			var this27;
			if(v26 == null) {
				var _g55 = [];
				var _g226 = 0;
				while(_g226 < 10002) {
					++_g226;
					_g55.push(0);
				}
				_g55[0] = 100;
				_g55[1] = 100;
				v26 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g55);
			}
			this27 = v26;
			arr = this27;
			var snapped26 = null;
			if(snapped26 == null) {
				snapped26 = polyominoTriangles_game_Snapped.Always;
			}
			var ts26 = this.createPolyomino(p,snapped26);
			var w26 = arr[0];
			var h26 = arr[1];
			var _g127 = 0;
			while(_g127 < w26) {
				var x26 = _g127++;
				var _g326 = 0;
				while(_g326 < h26) {
					var y26 = _g326++;
					if(arr[2 + arr[0] * y26 + x26 | 0] == 1) {
						ts26.addBlock(-2 + x26,-2.5 + y26);
					}
				}
			}
			return ts26;
		case ">":
			var v27 = [4,5,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0];
			var this28;
			if(v27 == null) {
				var _g56 = [];
				var _g227 = 0;
				while(_g227 < 10002) {
					++_g227;
					_g56.push(0);
				}
				_g56[0] = 100;
				_g56[1] = 100;
				v27 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g56);
			}
			this28 = v27;
			arr = this28;
			var snapped27 = null;
			if(snapped27 == null) {
				snapped27 = polyominoTriangles_game_Snapped.Always;
			}
			var ts27 = this.createPolyomino(p,snapped27);
			var w27 = arr[0];
			var h27 = arr[1];
			var _g128 = 0;
			while(_g128 < w27) {
				var x27 = _g128++;
				var _g327 = 0;
				while(_g327 < h27) {
					var y27 = _g327++;
					if(arr[2 + arr[0] * y27 + x27 | 0] == 1) {
						ts27.addBlock(-2 + x27,-2.5 + y27);
					}
				}
			}
			return ts27;
		case "?":
			var v28 = [4,5,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0];
			var this29;
			if(v28 == null) {
				var _g57 = [];
				var _g228 = 0;
				while(_g228 < 10002) {
					++_g228;
					_g57.push(0);
				}
				_g57[0] = 100;
				_g57[1] = 100;
				v28 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g57);
			}
			this29 = v28;
			arr = this29;
			var snapped28 = null;
			if(snapped28 == null) {
				snapped28 = polyominoTriangles_game_Snapped.Always;
			}
			var ts28 = this.createPolyomino(p,snapped28);
			var w28 = arr[0];
			var h28 = arr[1];
			var _g129 = 0;
			while(_g129 < w28) {
				var x28 = _g129++;
				var _g328 = 0;
				while(_g328 < h28) {
					var y28 = _g328++;
					if(arr[2 + arr[0] * y28 + x28 | 0] == 1) {
						ts28.addBlock(-2 + x28,-2.5 + y28);
					}
				}
			}
			return ts28;
		case "@":
			var v29 = [4,5,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0];
			var this30;
			if(v29 == null) {
				var _g58 = [];
				var _g229 = 0;
				while(_g229 < 10002) {
					++_g229;
					_g58.push(0);
				}
				_g58[0] = 100;
				_g58[1] = 100;
				v29 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g58);
			}
			this30 = v29;
			arr = this30;
			var snapped29 = null;
			if(snapped29 == null) {
				snapped29 = polyominoTriangles_game_Snapped.Always;
			}
			var ts29 = this.createPolyomino(p,snapped29);
			var w29 = arr[0];
			var h29 = arr[1];
			var _g130 = 0;
			while(_g130 < w29) {
				var x29 = _g130++;
				var _g329 = 0;
				while(_g329 < h29) {
					var y29 = _g329++;
					if(arr[2 + arr[0] * y29 + x29 | 0] == 1) {
						ts29.addBlock(-2 + x29,-2.5 + y29);
					}
				}
			}
			return ts29;
		case "A":
			var v30 = [4,5,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1];
			var this31;
			if(v30 == null) {
				var _g59 = [];
				var _g230 = 0;
				while(_g230 < 10002) {
					++_g230;
					_g59.push(0);
				}
				_g59[0] = 100;
				_g59[1] = 100;
				v30 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g59);
			}
			this31 = v30;
			arr = this31;
			var snapped30 = null;
			if(snapped30 == null) {
				snapped30 = polyominoTriangles_game_Snapped.Always;
			}
			var ts30 = this.createPolyomino(p,snapped30);
			var w30 = arr[0];
			var h30 = arr[1];
			var _g131 = 0;
			while(_g131 < w30) {
				var x30 = _g131++;
				var _g330 = 0;
				while(_g330 < h30) {
					var y30 = _g330++;
					if(arr[2 + arr[0] * y30 + x30 | 0] == 1) {
						ts30.addBlock(-2 + x30,-2.5 + y30);
					}
				}
			}
			return ts30;
		case "B":
			var v31 = [4,5,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0];
			var this32;
			if(v31 == null) {
				var _g60 = [];
				var _g231 = 0;
				while(_g231 < 10002) {
					++_g231;
					_g60.push(0);
				}
				_g60[0] = 100;
				_g60[1] = 100;
				v31 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g60);
			}
			this32 = v31;
			arr = this32;
			var snapped31 = null;
			if(snapped31 == null) {
				snapped31 = polyominoTriangles_game_Snapped.Always;
			}
			var ts31 = this.createPolyomino(p,snapped31);
			var w31 = arr[0];
			var h31 = arr[1];
			var _g132 = 0;
			while(_g132 < w31) {
				var x31 = _g132++;
				var _g331 = 0;
				while(_g331 < h31) {
					var y31 = _g331++;
					if(arr[2 + arr[0] * y31 + x31 | 0] == 1) {
						ts31.addBlock(-2 + x31,-2.5 + y31);
					}
				}
			}
			return ts31;
		case "C":
			var v32 = [4,5,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1];
			var this33;
			if(v32 == null) {
				var _g61 = [];
				var _g232 = 0;
				while(_g232 < 10002) {
					++_g232;
					_g61.push(0);
				}
				_g61[0] = 100;
				_g61[1] = 100;
				v32 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g61);
			}
			this33 = v32;
			arr = this33;
			var snapped32 = null;
			if(snapped32 == null) {
				snapped32 = polyominoTriangles_game_Snapped.Always;
			}
			var ts32 = this.createPolyomino(p,snapped32);
			var w32 = arr[0];
			var h32 = arr[1];
			var _g133 = 0;
			while(_g133 < w32) {
				var x32 = _g133++;
				var _g332 = 0;
				while(_g332 < h32) {
					var y32 = _g332++;
					if(arr[2 + arr[0] * y32 + x32 | 0] == 1) {
						ts32.addBlock(-2 + x32,-2.5 + y32);
					}
				}
			}
			return ts32;
		case "D":
			var v33 = [4,5,1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0];
			var this34;
			if(v33 == null) {
				var _g62 = [];
				var _g233 = 0;
				while(_g233 < 10002) {
					++_g233;
					_g62.push(0);
				}
				_g62[0] = 100;
				_g62[1] = 100;
				v33 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g62);
			}
			this34 = v33;
			arr = this34;
			var snapped33 = null;
			if(snapped33 == null) {
				snapped33 = polyominoTriangles_game_Snapped.Always;
			}
			var ts33 = this.createPolyomino(p,snapped33);
			var w33 = arr[0];
			var h33 = arr[1];
			var _g134 = 0;
			while(_g134 < w33) {
				var x33 = _g134++;
				var _g333 = 0;
				while(_g333 < h33) {
					var y33 = _g333++;
					if(arr[2 + arr[0] * y33 + x33 | 0] == 1) {
						ts33.addBlock(-2 + x33,-2.5 + y33);
					}
				}
			}
			return ts33;
		case "E":
			var v34 = [4,5,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1];
			var this35;
			if(v34 == null) {
				var _g63 = [];
				var _g234 = 0;
				while(_g234 < 10002) {
					++_g234;
					_g63.push(0);
				}
				_g63[0] = 100;
				_g63[1] = 100;
				v34 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g63);
			}
			this35 = v34;
			arr = this35;
			var snapped34 = null;
			if(snapped34 == null) {
				snapped34 = polyominoTriangles_game_Snapped.Always;
			}
			var ts34 = this.createPolyomino(p,snapped34);
			var w34 = arr[0];
			var h34 = arr[1];
			var _g135 = 0;
			while(_g135 < w34) {
				var x34 = _g135++;
				var _g334 = 0;
				while(_g334 < h34) {
					var y34 = _g334++;
					if(arr[2 + arr[0] * y34 + x34 | 0] == 1) {
						ts34.addBlock(-2 + x34,-2.5 + y34);
					}
				}
			}
			return ts34;
		case "F":
			var v35 = [4,5,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0];
			var this36;
			if(v35 == null) {
				var _g64 = [];
				var _g235 = 0;
				while(_g235 < 10002) {
					++_g235;
					_g64.push(0);
				}
				_g64[0] = 100;
				_g64[1] = 100;
				v35 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g64);
			}
			this36 = v35;
			arr = this36;
			var snapped35 = null;
			if(snapped35 == null) {
				snapped35 = polyominoTriangles_game_Snapped.Always;
			}
			var ts35 = this.createPolyomino(p,snapped35);
			var w35 = arr[0];
			var h35 = arr[1];
			var _g136 = 0;
			while(_g136 < w35) {
				var x35 = _g136++;
				var _g335 = 0;
				while(_g335 < h35) {
					var y35 = _g335++;
					if(arr[2 + arr[0] * y35 + x35 | 0] == 1) {
						ts35.addBlock(-2 + x35,-2.5 + y35);
					}
				}
			}
			return ts35;
		case "G":
			var v36 = [4,5,1,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1];
			var this37;
			if(v36 == null) {
				var _g65 = [];
				var _g236 = 0;
				while(_g236 < 10002) {
					++_g236;
					_g65.push(0);
				}
				_g65[0] = 100;
				_g65[1] = 100;
				v36 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g65);
			}
			this37 = v36;
			arr = this37;
			var snapped36 = null;
			if(snapped36 == null) {
				snapped36 = polyominoTriangles_game_Snapped.Always;
			}
			var ts36 = this.createPolyomino(p,snapped36);
			var w36 = arr[0];
			var h36 = arr[1];
			var _g137 = 0;
			while(_g137 < w36) {
				var x36 = _g137++;
				var _g336 = 0;
				while(_g336 < h36) {
					var y36 = _g336++;
					if(arr[2 + arr[0] * y36 + x36 | 0] == 1) {
						ts36.addBlock(-2 + x36,-2.5 + y36);
					}
				}
			}
			return ts36;
		case "H":
			var v37 = [4,5,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1];
			var this38;
			if(v37 == null) {
				var _g66 = [];
				var _g237 = 0;
				while(_g237 < 10002) {
					++_g237;
					_g66.push(0);
				}
				_g66[0] = 100;
				_g66[1] = 100;
				v37 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g66);
			}
			this38 = v37;
			arr = this38;
			var snapped37 = null;
			if(snapped37 == null) {
				snapped37 = polyominoTriangles_game_Snapped.Always;
			}
			var ts37 = this.createPolyomino(p,snapped37);
			var w37 = arr[0];
			var h37 = arr[1];
			var _g138 = 0;
			while(_g138 < w37) {
				var x37 = _g138++;
				var _g337 = 0;
				while(_g337 < h37) {
					var y37 = _g337++;
					if(arr[2 + arr[0] * y37 + x37 | 0] == 1) {
						ts37.addBlock(-2 + x37,-2.5 + y37);
					}
				}
			}
			return ts37;
		case "I":
			var v38 = [3,5,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1];
			var this39;
			if(v38 == null) {
				var _g67 = [];
				var _g238 = 0;
				while(_g238 < 10002) {
					++_g238;
					_g67.push(0);
				}
				_g67[0] = 100;
				_g67[1] = 100;
				v38 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g67);
			}
			this39 = v38;
			arr = this39;
			var snapped38 = null;
			if(snapped38 == null) {
				snapped38 = polyominoTriangles_game_Snapped.Always;
			}
			var ts38 = this.createPolyomino(p,snapped38);
			var w38 = arr[0];
			var h38 = arr[1];
			var _g139 = 0;
			while(_g139 < w38) {
				var x38 = _g139++;
				var _g338 = 0;
				while(_g338 < h38) {
					var y38 = _g338++;
					if(arr[2 + arr[0] * y38 + x38 | 0] == 1) {
						ts38.addBlock(-2 + x38,-2.5 + y38);
					}
				}
			}
			return ts38;
		case "J":
			var v39 = [4,5,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0];
			var this40;
			if(v39 == null) {
				var _g68 = [];
				var _g239 = 0;
				while(_g239 < 10002) {
					++_g239;
					_g68.push(0);
				}
				_g68[0] = 100;
				_g68[1] = 100;
				v39 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g68);
			}
			this40 = v39;
			arr = this40;
			var snapped39 = null;
			if(snapped39 == null) {
				snapped39 = polyominoTriangles_game_Snapped.Always;
			}
			var ts39 = this.createPolyomino(p,snapped39);
			var w39 = arr[0];
			var h39 = arr[1];
			var _g140 = 0;
			while(_g140 < w39) {
				var x39 = _g140++;
				var _g339 = 0;
				while(_g339 < h39) {
					var y39 = _g339++;
					if(arr[2 + arr[0] * y39 + x39 | 0] == 1) {
						ts39.addBlock(-2 + x39,-2.5 + y39);
					}
				}
			}
			return ts39;
		case "K":
			var v40 = [4,5,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1];
			var this41;
			if(v40 == null) {
				var _g69 = [];
				var _g240 = 0;
				while(_g240 < 10002) {
					++_g240;
					_g69.push(0);
				}
				_g69[0] = 100;
				_g69[1] = 100;
				v40 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g69);
			}
			this41 = v40;
			arr = this41;
			var snapped40 = null;
			if(snapped40 == null) {
				snapped40 = polyominoTriangles_game_Snapped.Always;
			}
			var ts40 = this.createPolyomino(p,snapped40);
			var w40 = arr[0];
			var h40 = arr[1];
			var _g141 = 0;
			while(_g141 < w40) {
				var x40 = _g141++;
				var _g340 = 0;
				while(_g340 < h40) {
					var y40 = _g340++;
					if(arr[2 + arr[0] * y40 + x40 | 0] == 1) {
						ts40.addBlock(-2 + x40,-2.5 + y40);
					}
				}
			}
			return ts40;
		case "KHA":
			var v41 = [14,5,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1];
			var this42;
			if(v41 == null) {
				var _g70 = [];
				var _g241 = 0;
				while(_g241 < 10002) {
					++_g241;
					_g70.push(0);
				}
				_g70[0] = 100;
				_g70[1] = 100;
				v41 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g70);
			}
			this42 = v41;
			arr = this42;
			var snapped41 = null;
			if(snapped41 == null) {
				snapped41 = polyominoTriangles_game_Snapped.Always;
			}
			var ts41 = this.createPolyomino(p,snapped41);
			var w41 = arr[0];
			var h41 = arr[1];
			var _g142 = 0;
			while(_g142 < w41) {
				var x41 = _g142++;
				var _g341 = 0;
				while(_g341 < h41) {
					var y41 = _g341++;
					if(arr[2 + arr[0] * y41 + x41 | 0] == 1) {
						ts41.addBlock(-2 + x41,-2.5 + y41);
					}
				}
			}
			return ts41;
		case "L":
			var v42 = [4,5,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1];
			var this43;
			if(v42 == null) {
				var _g71 = [];
				var _g242 = 0;
				while(_g242 < 10002) {
					++_g242;
					_g71.push(0);
				}
				_g71[0] = 100;
				_g71[1] = 100;
				v42 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g71);
			}
			this43 = v42;
			arr = this43;
			var snapped42 = null;
			if(snapped42 == null) {
				snapped42 = polyominoTriangles_game_Snapped.Always;
			}
			var ts42 = this.createPolyomino(p,snapped42);
			var w42 = arr[0];
			var h42 = arr[1];
			var _g143 = 0;
			while(_g143 < w42) {
				var x42 = _g143++;
				var _g342 = 0;
				while(_g342 < h42) {
					var y42 = _g342++;
					if(arr[2 + arr[0] * y42 + x42 | 0] == 1) {
						ts42.addBlock(-2 + x42,-2.5 + y42);
					}
				}
			}
			return ts42;
		case "M":
			var v43 = [5,5,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1];
			var this44;
			if(v43 == null) {
				var _g72 = [];
				var _g243 = 0;
				while(_g243 < 10002) {
					++_g243;
					_g72.push(0);
				}
				_g72[0] = 100;
				_g72[1] = 100;
				v43 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g72);
			}
			this44 = v43;
			arr = this44;
			var snapped43 = null;
			if(snapped43 == null) {
				snapped43 = polyominoTriangles_game_Snapped.Always;
			}
			var ts43 = this.createPolyomino(p,snapped43);
			var w43 = arr[0];
			var h43 = arr[1];
			var _g144 = 0;
			while(_g144 < w43) {
				var x43 = _g144++;
				var _g343 = 0;
				while(_g343 < h43) {
					var y43 = _g343++;
					if(arr[2 + arr[0] * y43 + x43 | 0] == 1) {
						ts43.addBlock(-2 + x43,-2.5 + y43);
					}
				}
			}
			return ts43;
		case "N":
			var v44 = [4,5,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1];
			var this45;
			if(v44 == null) {
				var _g73 = [];
				var _g244 = 0;
				while(_g244 < 10002) {
					++_g244;
					_g73.push(0);
				}
				_g73[0] = 100;
				_g73[1] = 100;
				v44 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g73);
			}
			this45 = v44;
			arr = this45;
			var snapped44 = null;
			if(snapped44 == null) {
				snapped44 = polyominoTriangles_game_Snapped.Always;
			}
			var ts44 = this.createPolyomino(p,snapped44);
			var w44 = arr[0];
			var h44 = arr[1];
			var _g145 = 0;
			while(_g145 < w44) {
				var x44 = _g145++;
				var _g344 = 0;
				while(_g344 < h44) {
					var y44 = _g344++;
					if(arr[2 + arr[0] * y44 + x44 | 0] == 1) {
						ts44.addBlock(-2 + x44,-2.5 + y44);
					}
				}
			}
			return ts44;
		case "O":
			var v45 = [4,5,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0];
			var this46;
			if(v45 == null) {
				var _g74 = [];
				var _g245 = 0;
				while(_g245 < 10002) {
					++_g245;
					_g74.push(0);
				}
				_g74[0] = 100;
				_g74[1] = 100;
				v45 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g74);
			}
			this46 = v45;
			arr = this46;
			var snapped45 = null;
			if(snapped45 == null) {
				snapped45 = polyominoTriangles_game_Snapped.Always;
			}
			var ts45 = this.createPolyomino(p,snapped45);
			var w45 = arr[0];
			var h45 = arr[1];
			var _g146 = 0;
			while(_g146 < w45) {
				var x45 = _g146++;
				var _g345 = 0;
				while(_g345 < h45) {
					var y45 = _g345++;
					if(arr[2 + arr[0] * y45 + x45 | 0] == 1) {
						ts45.addBlock(-2 + x45,-2.5 + y45);
					}
				}
			}
			return ts45;
		case "P":
			var v46 = [4,5,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0];
			var this47;
			if(v46 == null) {
				var _g75 = [];
				var _g246 = 0;
				while(_g246 < 10002) {
					++_g246;
					_g75.push(0);
				}
				_g75[0] = 100;
				_g75[1] = 100;
				v46 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g75);
			}
			this47 = v46;
			arr = this47;
			var snapped46 = null;
			if(snapped46 == null) {
				snapped46 = polyominoTriangles_game_Snapped.Always;
			}
			var ts46 = this.createPolyomino(p,snapped46);
			var w46 = arr[0];
			var h46 = arr[1];
			var _g147 = 0;
			while(_g147 < w46) {
				var x46 = _g147++;
				var _g346 = 0;
				while(_g346 < h46) {
					var y46 = _g346++;
					if(arr[2 + arr[0] * y46 + x46 | 0] == 1) {
						ts46.addBlock(-2 + x46,-2.5 + y46);
					}
				}
			}
			return ts46;
		case "Q":
			var v47 = [4,5,0,1,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,0,1];
			var this48;
			if(v47 == null) {
				var _g76 = [];
				var _g247 = 0;
				while(_g247 < 10002) {
					++_g247;
					_g76.push(0);
				}
				_g76[0] = 100;
				_g76[1] = 100;
				v47 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g76);
			}
			this48 = v47;
			arr = this48;
			var snapped47 = null;
			if(snapped47 == null) {
				snapped47 = polyominoTriangles_game_Snapped.Always;
			}
			var ts47 = this.createPolyomino(p,snapped47);
			var w47 = arr[0];
			var h47 = arr[1];
			var _g148 = 0;
			while(_g148 < w47) {
				var x47 = _g148++;
				var _g347 = 0;
				while(_g347 < h47) {
					var y47 = _g347++;
					if(arr[2 + arr[0] * y47 + x47 | 0] == 1) {
						ts47.addBlock(-2 + x47,-2.5 + y47);
					}
				}
			}
			return ts47;
		case "R":
			var v48 = [4,5,1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1];
			var this49;
			if(v48 == null) {
				var _g77 = [];
				var _g248 = 0;
				while(_g248 < 10002) {
					++_g248;
					_g77.push(0);
				}
				_g77[0] = 100;
				_g77[1] = 100;
				v48 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g77);
			}
			this49 = v48;
			arr = this49;
			var snapped48 = null;
			if(snapped48 == null) {
				snapped48 = polyominoTriangles_game_Snapped.Always;
			}
			var ts48 = this.createPolyomino(p,snapped48);
			var w48 = arr[0];
			var h48 = arr[1];
			var _g149 = 0;
			while(_g149 < w48) {
				var x48 = _g149++;
				var _g348 = 0;
				while(_g348 < h48) {
					var y48 = _g348++;
					if(arr[2 + arr[0] * y48 + x48 | 0] == 1) {
						ts48.addBlock(-2 + x48,-2.5 + y48);
					}
				}
			}
			return ts48;
		case "S":
			var v49 = [4,5,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0];
			var this50;
			if(v49 == null) {
				var _g78 = [];
				var _g249 = 0;
				while(_g249 < 10002) {
					++_g249;
					_g78.push(0);
				}
				_g78[0] = 100;
				_g78[1] = 100;
				v49 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g78);
			}
			this50 = v49;
			arr = this50;
			var snapped49 = null;
			if(snapped49 == null) {
				snapped49 = polyominoTriangles_game_Snapped.Always;
			}
			var ts49 = this.createPolyomino(p,snapped49);
			var w49 = arr[0];
			var h49 = arr[1];
			var _g150 = 0;
			while(_g150 < w49) {
				var x49 = _g150++;
				var _g349 = 0;
				while(_g349 < h49) {
					var y49 = _g349++;
					if(arr[2 + arr[0] * y49 + x49 | 0] == 1) {
						ts49.addBlock(-2 + x49,-2.5 + y49);
					}
				}
			}
			return ts49;
		case "T":
			var v50 = [5,5,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0];
			var this51;
			if(v50 == null) {
				var _g79 = [];
				var _g250 = 0;
				while(_g250 < 10002) {
					++_g250;
					_g79.push(0);
				}
				_g79[0] = 100;
				_g79[1] = 100;
				v50 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g79);
			}
			this51 = v50;
			arr = this51;
			var snapped50 = null;
			if(snapped50 == null) {
				snapped50 = polyominoTriangles_game_Snapped.Always;
			}
			var ts50 = this.createPolyomino(p,snapped50);
			var w50 = arr[0];
			var h50 = arr[1];
			var _g151 = 0;
			while(_g151 < w50) {
				var x50 = _g151++;
				var _g350 = 0;
				while(_g350 < h50) {
					var y50 = _g350++;
					if(arr[2 + arr[0] * y50 + x50 | 0] == 1) {
						ts50.addBlock(-2 + x50,-2.5 + y50);
					}
				}
			}
			return ts50;
		case "U":
			var v51 = [4,5,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,1];
			var this52;
			if(v51 == null) {
				var _g80 = [];
				var _g251 = 0;
				while(_g251 < 10002) {
					++_g251;
					_g80.push(0);
				}
				_g80[0] = 100;
				_g80[1] = 100;
				v51 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g80);
			}
			this52 = v51;
			arr = this52;
			var snapped51 = null;
			if(snapped51 == null) {
				snapped51 = polyominoTriangles_game_Snapped.Always;
			}
			var ts51 = this.createPolyomino(p,snapped51);
			var w51 = arr[0];
			var h51 = arr[1];
			var _g152 = 0;
			while(_g152 < w51) {
				var x51 = _g152++;
				var _g351 = 0;
				while(_g351 < h51) {
					var y51 = _g351++;
					if(arr[2 + arr[0] * y51 + x51 | 0] == 1) {
						ts51.addBlock(-2 + x51,-2.5 + y51);
					}
				}
			}
			return ts51;
		case "V":
			var v52 = [5,5,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0];
			var this53;
			if(v52 == null) {
				var _g81 = [];
				var _g252 = 0;
				while(_g252 < 10002) {
					++_g252;
					_g81.push(0);
				}
				_g81[0] = 100;
				_g81[1] = 100;
				v52 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g81);
			}
			this53 = v52;
			arr = this53;
			var snapped52 = null;
			if(snapped52 == null) {
				snapped52 = polyominoTriangles_game_Snapped.Always;
			}
			var ts52 = this.createPolyomino(p,snapped52);
			var w52 = arr[0];
			var h52 = arr[1];
			var _g153 = 0;
			while(_g153 < w52) {
				var x52 = _g153++;
				var _g352 = 0;
				while(_g352 < h52) {
					var y52 = _g352++;
					if(arr[2 + arr[0] * y52 + x52 | 0] == 1) {
						ts52.addBlock(-2 + x52,-2.5 + y52);
					}
				}
			}
			return ts52;
		case "W":
			var v53 = [5,5,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0];
			var this54;
			if(v53 == null) {
				var _g82 = [];
				var _g253 = 0;
				while(_g253 < 10002) {
					++_g253;
					_g82.push(0);
				}
				_g82[0] = 100;
				_g82[1] = 100;
				v53 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g82);
			}
			this54 = v53;
			arr = this54;
			var snapped53 = null;
			if(snapped53 == null) {
				snapped53 = polyominoTriangles_game_Snapped.Always;
			}
			var ts53 = this.createPolyomino(p,snapped53);
			var w53 = arr[0];
			var h53 = arr[1];
			var _g154 = 0;
			while(_g154 < w53) {
				var x53 = _g154++;
				var _g353 = 0;
				while(_g353 < h53) {
					var y53 = _g353++;
					if(arr[2 + arr[0] * y53 + x53 | 0] == 1) {
						ts53.addBlock(-2 + x53,-2.5 + y53);
					}
				}
			}
			return ts53;
		case "X":
			var v54 = [4,5,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1];
			var this55;
			if(v54 == null) {
				var _g83 = [];
				var _g254 = 0;
				while(_g254 < 10002) {
					++_g254;
					_g83.push(0);
				}
				_g83[0] = 100;
				_g83[1] = 100;
				v54 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g83);
			}
			this55 = v54;
			arr = this55;
			var snapped54 = null;
			if(snapped54 == null) {
				snapped54 = polyominoTriangles_game_Snapped.Always;
			}
			var ts54 = this.createPolyomino(p,snapped54);
			var w54 = arr[0];
			var h54 = arr[1];
			var _g155 = 0;
			while(_g155 < w54) {
				var x54 = _g155++;
				var _g354 = 0;
				while(_g354 < h54) {
					var y54 = _g354++;
					if(arr[2 + arr[0] * y54 + x54 | 0] == 1) {
						ts54.addBlock(-2 + x54,-2.5 + y54);
					}
				}
			}
			return ts54;
		case "Y":
			var v55 = [4,5,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0];
			var this56;
			if(v55 == null) {
				var _g84 = [];
				var _g255 = 0;
				while(_g255 < 10002) {
					++_g255;
					_g84.push(0);
				}
				_g84[0] = 100;
				_g84[1] = 100;
				v55 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g84);
			}
			this56 = v55;
			arr = this56;
			var snapped55 = null;
			if(snapped55 == null) {
				snapped55 = polyominoTriangles_game_Snapped.Always;
			}
			var ts55 = this.createPolyomino(p,snapped55);
			var w55 = arr[0];
			var h55 = arr[1];
			var _g156 = 0;
			while(_g156 < w55) {
				var x55 = _g156++;
				var _g355 = 0;
				while(_g355 < h55) {
					var y55 = _g355++;
					if(arr[2 + arr[0] * y55 + x55 | 0] == 1) {
						ts55.addBlock(-2 + x55,-2.5 + y55);
					}
				}
			}
			return ts55;
		case "Z":
			var v56 = [4,5,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1];
			var this57;
			if(v56 == null) {
				var _g85 = [];
				var _g256 = 0;
				while(_g256 < 10002) {
					++_g256;
					_g85.push(0);
				}
				_g85[0] = 100;
				_g85[1] = 100;
				v56 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g85);
			}
			this57 = v56;
			arr = this57;
			var snapped56 = null;
			if(snapped56 == null) {
				snapped56 = polyominoTriangles_game_Snapped.Always;
			}
			var ts56 = this.createPolyomino(p,snapped56);
			var w56 = arr[0];
			var h56 = arr[1];
			var _g157 = 0;
			while(_g157 < w56) {
				var x56 = _g157++;
				var _g356 = 0;
				while(_g356 < h56) {
					var y56 = _g356++;
					if(arr[2 + arr[0] * y56 + x56 | 0] == 1) {
						ts56.addBlock(-2 + x56,-2.5 + y56);
					}
				}
			}
			return ts56;
		case "[":
			var v57 = [2,5,1,1,1,0,1,0,1,0,1,1];
			var this58;
			if(v57 == null) {
				var _g86 = [];
				var _g257 = 0;
				while(_g257 < 10002) {
					++_g257;
					_g86.push(0);
				}
				_g86[0] = 100;
				_g86[1] = 100;
				v57 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g86);
			}
			this58 = v57;
			arr = this58;
			var snapped57 = null;
			if(snapped57 == null) {
				snapped57 = polyominoTriangles_game_Snapped.Always;
			}
			var ts57 = this.createPolyomino(p,snapped57);
			var w57 = arr[0];
			var h57 = arr[1];
			var _g158 = 0;
			while(_g158 < w57) {
				var x57 = _g158++;
				var _g357 = 0;
				while(_g357 < h57) {
					var y57 = _g357++;
					if(arr[2 + arr[0] * y57 + x57 | 0] == 1) {
						ts57.addBlock(-2 + x57,-2.5 + y57);
					}
				}
			}
			return ts57;
		case "\\":
			var v58 = [4,5,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1];
			var this59;
			if(v58 == null) {
				var _g87 = [];
				var _g258 = 0;
				while(_g258 < 10002) {
					++_g258;
					_g87.push(0);
				}
				_g87[0] = 100;
				_g87[1] = 100;
				v58 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g87);
			}
			this59 = v58;
			arr = this59;
			var snapped58 = null;
			if(snapped58 == null) {
				snapped58 = polyominoTriangles_game_Snapped.Always;
			}
			var ts58 = this.createPolyomino(p,snapped58);
			var w58 = arr[0];
			var h58 = arr[1];
			var _g159 = 0;
			while(_g159 < w58) {
				var x58 = _g159++;
				var _g358 = 0;
				while(_g358 < h58) {
					var y58 = _g358++;
					if(arr[2 + arr[0] * y58 + x58 | 0] == 1) {
						ts58.addBlock(-2 + x58,-2.5 + y58);
					}
				}
			}
			return ts58;
		case "]":
			var v59 = [4,5,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1];
			var this60;
			if(v59 == null) {
				var _g88 = [];
				var _g259 = 0;
				while(_g259 < 10002) {
					++_g259;
					_g88.push(0);
				}
				_g88[0] = 100;
				_g88[1] = 100;
				v59 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g88);
			}
			this60 = v59;
			arr = this60;
			var snapped59 = null;
			if(snapped59 == null) {
				snapped59 = polyominoTriangles_game_Snapped.Always;
			}
			var ts59 = this.createPolyomino(p,snapped59);
			var w59 = arr[0];
			var h59 = arr[1];
			var _g160 = 0;
			while(_g160 < w59) {
				var x59 = _g160++;
				var _g359 = 0;
				while(_g359 < h59) {
					var y59 = _g359++;
					if(arr[2 + arr[0] * y59 + x59 | 0] == 1) {
						ts59.addBlock(-2 + x59,-2.5 + y59);
					}
				}
			}
			return ts59;
		case "^":
			var v60 = [3,5,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0];
			var this61;
			if(v60 == null) {
				var _g89 = [];
				var _g260 = 0;
				while(_g260 < 10002) {
					++_g260;
					_g89.push(0);
				}
				_g89[0] = 100;
				_g89[1] = 100;
				v60 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g89);
			}
			this61 = v60;
			arr = this61;
			var snapped60 = null;
			if(snapped60 == null) {
				snapped60 = polyominoTriangles_game_Snapped.Always;
			}
			var ts60 = this.createPolyomino(p,snapped60);
			var w60 = arr[0];
			var h60 = arr[1];
			var _g161 = 0;
			while(_g161 < w60) {
				var x60 = _g161++;
				var _g360 = 0;
				while(_g360 < h60) {
					var y60 = _g360++;
					if(arr[2 + arr[0] * y60 + x60 | 0] == 1) {
						ts60.addBlock(-2 + x60,-2.5 + y60);
					}
				}
			}
			return ts60;
		case "_":
			var v61 = [4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1];
			var this62;
			if(v61 == null) {
				var _g90 = [];
				var _g261 = 0;
				while(_g261 < 10002) {
					++_g261;
					_g90.push(0);
				}
				_g90[0] = 100;
				_g90[1] = 100;
				v61 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g90);
			}
			this62 = v61;
			arr = this62;
			var snapped61 = null;
			if(snapped61 == null) {
				snapped61 = polyominoTriangles_game_Snapped.Always;
			}
			var ts61 = this.createPolyomino(p,snapped61);
			var w61 = arr[0];
			var h61 = arr[1];
			var _g162 = 0;
			while(_g162 < w61) {
				var x61 = _g162++;
				var _g361 = 0;
				while(_g361 < h61) {
					var y61 = _g361++;
					if(arr[2 + arr[0] * y61 + x61 | 0] == 1) {
						ts61.addBlock(-2 + x61,-2.5 + y61);
					}
				}
			}
			return ts61;
		case "|":
			var v62 = [2,5,0,1,0,1,0,1,0,1,0,1];
			var this63;
			if(v62 == null) {
				var _g91 = [];
				var _g262 = 0;
				while(_g262 < 10002) {
					++_g262;
					_g91.push(0);
				}
				_g91[0] = 100;
				_g91[1] = 100;
				v62 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g91);
			}
			this63 = v62;
			arr = this63;
			var snapped62 = null;
			if(snapped62 == null) {
				snapped62 = polyominoTriangles_game_Snapped.Always;
			}
			var ts62 = this.createPolyomino(p,snapped62);
			var w62 = arr[0];
			var h62 = arr[1];
			var _g163 = 0;
			while(_g163 < w62) {
				var x62 = _g163++;
				var _g362 = 0;
				while(_g362 < h62) {
					var y62 = _g362++;
					if(arr[2 + arr[0] * y62 + x62 | 0] == 1) {
						ts62.addBlock(-2 + x62,-2.5 + y62);
					}
				}
			}
			return ts62;
		case "~":
			var v63 = [4,5,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0];
			var this64;
			if(v63 == null) {
				var _g92 = [];
				var _g263 = 0;
				while(_g263 < 10002) {
					++_g263;
					_g92.push(0);
				}
				_g92[0] = 100;
				_g92[1] = 100;
				v63 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g92);
			}
			this64 = v63;
			arr = this64;
			var snapped63 = null;
			if(snapped63 == null) {
				snapped63 = polyominoTriangles_game_Snapped.Always;
			}
			var ts63 = this.createPolyomino(p,snapped63);
			var w63 = arr[0];
			var h63 = arr[1];
			var _g164 = 0;
			while(_g164 < w63) {
				var x63 = _g164++;
				var _g363 = 0;
				while(_g363 < h63) {
					var y63 = _g363++;
					if(arr[2 + arr[0] * y63 + x63 | 0] == 1) {
						ts63.addBlock(-2 + x63,-2.5 + y63);
					}
				}
			}
			return ts63;
		default:
			var v64 = [4,5,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0];
			var this65;
			if(v64 == null) {
				var _g93 = [];
				var _g264 = 0;
				while(_g264 < 10002) {
					++_g264;
					_g93.push(0);
				}
				_g93[0] = 100;
				_g93[1] = 100;
				v64 = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(100,100,_g93);
			}
			this65 = v64;
			arr = this65;
			var snapped64 = null;
			if(snapped64 == null) {
				snapped64 = polyominoTriangles_game_Snapped.Always;
			}
			var ts64 = this.createPolyomino(p,snapped64);
			var w64 = arr[0];
			var h64 = arr[1];
			var _g165 = 0;
			while(_g165 < w64) {
				var x64 = _g165++;
				var _g364 = 0;
				while(_g364 < h64) {
					var y64 = _g364++;
					if(arr[2 + arr[0] * y64 + x64 | 0] == 1) {
						ts64.addBlock(-2 + x64,-2.5 + y64);
					}
				}
			}
			return ts64;
		}
	}
	,abc: function(p,pos,snapped) {
		if(snapped == null) {
			snapped = polyominoTriangles_game_Snapped.Always;
		}
		var ts = this.createPolyomino(p,snapped);
		var w = pos[0];
		var h = pos[1];
		var _g1 = 0;
		while(_g1 < w) {
			var x = _g1++;
			var _g3 = 0;
			while(_g3 < h) {
				var y = _g3++;
				if(pos[2 + pos[0] * y + x | 0] == 1) {
					ts.addBlock(-2 + x,-2.5 + y);
				}
			}
		}
		return ts;
	}
	,__class__: polyominoTriangles_game_ABC
};
var polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$ = {};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.__name__ = ["polyominoTriangles","game","_Arr2D","Arr2D_Impl_"];
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new = function(w,h,v) {
	if(h == null) {
		h = 100;
	}
	if(w == null) {
		w = 100;
	}
	var this1;
	if(v == null) {
		if(w == null) {
			w = 100;
		}
		if(h == null) {
			h = 100;
		}
		var l = w * h + 2;
		var _g = [];
		var _g2 = 0;
		while(_g2 < l) {
			++_g2;
			_g.push(0);
		}
		_g[0] = w;
		_g[1] = h;
		v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
	}
	this1 = v;
	return this1;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.getEmpty = function(w,h) {
	var l = w * h + 2;
	var _g = [];
	var _g2 = 0;
	while(_g2 < l) {
		++_g2;
		_g.push(0);
	}
	_g[0] = w;
	_g[1] = h;
	return polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.clear = function(this1) {
	var w = this1[0];
	var h = this1[1];
	var v = null;
	var this2;
	if(v == null) {
		if(w == null) {
			w = 100;
		}
		if(h == null) {
			h = 100;
		}
		var l = w * h + 2;
		var _g = [];
		var _g2 = 0;
		while(_g2 < l) {
			++_g2;
			_g.push(0);
		}
		_g[0] = w;
		_g[1] = h;
		v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
	}
	this2 = v;
	this1 = this2;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.fill = function(this1) {
	var i = 2;
	var l = this1.length;
	while(i < l) {
		this1[i] = 1;
		++i;
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.addOne = function(this1,x,y) {
	this1[2 + this1[0] * y + x | 0] = 1;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.addZero = function(this1,x,y) {
	this1[2 + this1[0] * y + x | 0] = 0;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.id = function(x,y,w) {
	return 2 + w * y + x | 0;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.get_width = function(this1) {
	return this1[0];
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.get_height = function(this1) {
	return this1[1];
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.isZero = function(this1,x,y) {
	return this1[2 + this1[0] * y + x | 0] == 0;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.isOne = function(this1,x,y) {
	return this1[2 + this1[0] * y + x | 0] == 1;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.getValue = function(this1,x,y) {
	return this1[2 + this1[0] * y + x | 0];
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.setValue = function(this1,x,y,value) {
	this1[2 + this1[0] * y + x | 0] = value;
	return value;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.rowFull = function(this1,y) {
	var w = this1[0];
	var s = 2 + w * y | 0;
	var e = s + w;
	var ful = true;
	var _g1 = s;
	while(_g1 < e) if(this1[_g1++] == 0) {
		ful = false;
		break;
	}
	return ful;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.getFullRows = function(this1) {
	var arr = [];
	var _g1 = 0;
	var _g = this1[1];
	while(_g1 < _g) {
		var y = _g1++;
		var w = this1[0];
		var s = 2 + w * y | 0;
		var e = s + w;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this1[_g11++] == 0) {
			ful = false;
			break;
		}
		arr[y] = ful;
	}
	return arr;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.rowEmpty = function(this1,y) {
	var w = this1[0];
	var s = 2 + w * y | 0;
	var e = s + w;
	var emp = true;
	var _g1 = s;
	while(_g1 < e) if(this1[_g1++] == 1) {
		emp = false;
		break;
	}
	return emp;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.moveRow = function(this1,startY,endY) {
	var w = this1[0];
	var s0 = 2 + w * startY | 0;
	var e0 = 2 + w * endY | 0;
	var _g1 = 0;
	while(_g1 < w) {
		var i = _g1++;
		this1[e0 + i] = this1[s0 + i];
		this1[s0 + i] = 0;
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.copyRow = function(this1,startY,endY) {
	var w = this1[0];
	var s0 = 2 + w * startY | 0;
	var e0 = 2 + w * endY | 0;
	var _g1 = 0;
	while(_g1 < w) {
		var i = _g1++;
		this1[e0 + i] = this1[s0 + i];
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.oneRow = function(this1,y) {
	var w = this1[0];
	var s = 2 + w * y | 0;
	var _g1 = 0;
	while(_g1 < w) this1[s + _g1++] = 1;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.zeroRow = function(this1,y) {
	var w = this1[0];
	var s = 2 + w * y | 0;
	var _g1 = 0;
	while(_g1 < w) this1[s + _g1++] = 0;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.removeRowsUnshift0 = function(this1,rowStart,rowEnd) {
	var l = rowEnd - rowStart + 1;
	var rowUpto = rowStart - 1;
	var _g1 = 0;
	while(_g1 < rowStart) {
		var j = rowUpto - _g1++;
		var w = this1[0];
		var s0 = 2 + w * j | 0;
		var e0 = 2 + w * (j + l) | 0;
		var _g11 = 0;
		while(_g11 < w) {
			var i = _g11++;
			this1[e0 + i] = this1[s0 + i];
			this1[s0 + i] = 0;
		}
	}
	if(l > rowUpto) {
		var _g12 = 0;
		var _g = l - rowUpto;
		while(_g12 < _g) {
			var w1 = this1[0];
			var s = 2 + w1 * _g12++ | 0;
			var _g13 = 0;
			while(_g13 < w1) this1[s + _g13++] = 0;
		}
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.rowToString = function(this1,y) {
	var w = this1[0];
	var s = 2 + w * y | 0;
	var e = s + w;
	var str = "\n";
	var _g1 = s;
	while(_g1 < e) str = str + this1[_g1++] + "  ";
	return str;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.clash = function(this1,arrP,offX,offY) {
	if(offY == null) {
		offY = 0;
	}
	if(offX == null) {
		offX = 0;
	}
	var lp = arrP.length;
	var p;
	var clash = false;
	var _g1 = 0;
	while(_g1 < lp) {
		p = arrP[_g1++];
		if(this1[2 + this1[0] * (p.y + offY) + (p.x + offX) | 0] == 1) {
			clash = true;
			break;
		}
	}
	return clash;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.addPoints = function(this1,arrP,offX,offY) {
	if(offY == null) {
		offY = 0;
	}
	if(offX == null) {
		offX = 0;
	}
	var lp = arrP.length;
	var p;
	var _g1 = 0;
	while(_g1 < lp) {
		p = arrP[_g1++];
		this1[2 + this1[0] * (p.y + offY) + (p.x + offX) | 0] = 1;
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.overlap = function(a,b) {
	var la = a.length;
	if(la != b.length) {
		throw new js__$Boot_HaxeError("can t compare Arr2D");
	}
	var overlapped = false;
	var ai;
	var bi;
	var _g1 = 2;
	while(_g1 < la) {
		var i = _g1++;
		ai = a[i];
		bi = b[i];
		if(ai == 1 && bi == 1) {
			overlapped = true;
			break;
		}
	}
	return overlapped;
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.merge = function(this1,b) {
	var la = this1.length;
	if(la != b.length) {
		throw new js__$Boot_HaxeError("can t compare Arr2D");
	}
	var overlapped = false;
	var ai;
	var bi;
	var _g1 = 2;
	while(_g1 < la) {
		var i = _g1++;
		ai = this1[i];
		bi = b[i];
		if(ai == 1 && bi == 1) {
			overlapped = true;
			break;
		}
	}
	if(overlapped) {
		return false;
	} else {
		var la1 = this1.length;
		var ai1;
		var _g11 = 2;
		while(_g11 < la1) {
			var i1 = _g11++;
			ai1 = this1[i1];
			if(ai1 == 0) {
				this1[i1] = b[i1];
			}
		}
		return true;
	}
};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.prettyString = function(this1) {
	var str = "";
	var _g1 = 0;
	var _g = this1[1];
	while(_g1 < _g) {
		var w = this1[0];
		var s = 2 + w * _g1++ | 0;
		var e = s + w;
		var str1 = "\n";
		var _g11 = s;
		while(_g11 < e) str1 = str1 + this1[_g11++] + "  ";
		str += str1;
	}
	return str;
};
var polyominoTriangles_game_Background = function(shape_,wide_,hi_,col0_,col1_,col2_,col3_) {
	this.shape = shape_;
	this.wide = wide_;
	this.hi = hi_;
	this.bgCol0 = col0_;
	this.bgCol1 = col1_;
	this.bgCol2 = col2_;
	this.bgCol3 = col3_;
	this.bgSquares = [];
	var toggle = false;
	var _g1 = 0;
	var _g = this.wide;
	while(_g1 < _g) {
		var w = _g1++;
		if(toggle) {
			shape_.col0 = col0_;
			shape_.col1 = col1_;
		} else {
			shape_.col0 = col2_;
			shape_.col1 = col3_;
		}
		toggle = !toggle;
		var _g3 = 2;
		var _g2 = this.hi;
		while(_g3 < _g2) {
			var h = _g3++;
			this.bgSquares[2 + this.wide * h + w | 0] = shape_.addBlock(w,h,false);
		}
	}
};
polyominoTriangles_game_Background.__name__ = ["polyominoTriangles","game","Background"];
polyominoTriangles_game_Background.prototype = {
	shape: null
	,wide: null
	,hi: null
	,bgCol0: null
	,bgCol1: null
	,bgCol2: null
	,bgCol3: null
	,bgSquares: null
	,drawPolyomino: function(shapePositions,offX,offY) {
		var col0_ = this.bgCol0;
		var col1_ = this.bgCol1;
		var col2_ = this.bgCol2;
		var col3_ = this.bgCol3;
		var c0;
		var c1;
		var toggle = false;
		var indx = 0;
		var _g1 = 0;
		var _g = this.wide;
		while(_g1 < _g) {
			var w = _g1++;
			if(toggle) {
				c0 = col0_;
				c1 = col1_;
			} else {
				c0 = col2_;
				c1 = col3_;
			}
			toggle = !toggle;
			var _g3 = 0;
			var _g2 = this.hi;
			while(_g3 < _g2) {
				indx = 2 + this.wide * _g3++ + w | 0;
				var _this = this.bgSquares[indx];
				_this.col0 = c0;
				_this.col1 = c1;
				_this.t0.colorID = c0;
				_this.t1.colorID = c1;
				_this.t0.colorA = c0;
				_this.t0.colorB = c0;
				_this.t0.colorC = c0;
				_this.t1.colorA = c1;
				_this.t1.colorB = c1;
				_this.t1.colorC = c1;
			}
		}
		var ls = shapePositions.length;
		var pos;
		var indx1 = 0;
		var dx = 0;
		var dy = 0;
		var _g11 = 0;
		while(_g11 < ls) {
			pos = shapePositions[_g11++];
			dx = pos.x + offX;
			dy = pos.y + offY;
			if(dx > 0 && dx < this.wide && dy > 0 && dy < this.hi) {
				indx1 = 2 + this.wide * dy + dx | 0;
				var _this1 = this.bgSquares[indx1];
				_this1.col0 = 14;
				_this1.col1 = 14;
				_this1.t0.colorID = 14;
				_this1.t1.colorID = 14;
				_this1.t0.colorA = 14;
				_this1.t0.colorB = 14;
				_this1.t0.colorC = 14;
				_this1.t1.colorA = 14;
				_this1.t1.colorB = 14;
				_this1.t1.colorC = 14;
			}
		}
	}
	,resetBgColor: function() {
		var col0_ = this.bgCol0;
		var col1_ = this.bgCol1;
		var col2_ = this.bgCol2;
		var col3_ = this.bgCol3;
		var c0;
		var c1;
		var toggle = false;
		var indx = 0;
		var _g1 = 0;
		var _g = this.wide;
		while(_g1 < _g) {
			var w = _g1++;
			if(toggle) {
				c0 = col0_;
				c1 = col1_;
			} else {
				c0 = col2_;
				c1 = col3_;
			}
			toggle = !toggle;
			var _g3 = 0;
			var _g2 = this.hi;
			while(_g3 < _g2) {
				indx = 2 + this.wide * _g3++ + w | 0;
				var _this = this.bgSquares[indx];
				_this.col0 = c0;
				_this.col1 = c1;
				_this.t0.colorID = c0;
				_this.t1.colorID = c1;
				_this.t0.colorA = c0;
				_this.t0.colorB = c0;
				_this.t0.colorC = c0;
				_this.t1.colorA = c1;
				_this.t1.colorB = c1;
				_this.t1.colorC = c1;
			}
		}
	}
	,locations: function(arr) {
		return this.shape.getCentreInt(arr);
	}
	,__class__: polyominoTriangles_game_Background
};
var polyominoTriangles_game_Controller = function(id_,triangles_,wide_,hi_,dia_,gap_,offX_,offY_) {
	this.col1 = 5;
	this.col0 = 1;
	this.shapes = [];
	this.id = id_;
	var w = wide_;
	var h = hi_ - 1;
	var v = null;
	var this1;
	if(v == null) {
		if(wide_ == null) {
			w = 100;
		}
		if(h == null) {
			h = 100;
		}
		var l = w * h + 2;
		var _g = [];
		var _g2 = 0;
		while(_g2 < l) {
			++_g2;
			_g.push(0);
		}
		_g[0] = w;
		_g[1] = h;
		v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
	}
	this1 = v;
	this.inertArr = this1;
	this.wide = wide_;
	this.hi = hi_;
	this.triangles = triangles_;
	this.dia = dia_;
	this.gap = gap_;
	this.offX = offX_;
	this.offY = offY_;
	this.diaSq = (this.dia - this.dia / 10000) * (this.dia - this.dia / 10000);
	this.shapeGenerator = new polyominoTriangles_game_ShapeGenerator($bind(this,this.createPolyomino));
};
polyominoTriangles_game_Controller.__name__ = ["polyominoTriangles","game","Controller"];
polyominoTriangles_game_Controller.prototype = {
	inertArr: null
	,shapes: null
	,shapeGenerator: null
	,bottom: null
	,background: null
	,id: null
	,triangles: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,offX: null
	,offY: null
	,wide: null
	,hi: null
	,diaSq: null
	,onPolyominoShapeLanded: null
	,onGameEnd: null
	,createShape: function(p,col0_,col1_,shapePreference) {
		if(shapePreference == null) {
			shapePreference = "polyomino_random";
		}
		this.col0 = col0_;
		this.col1 = col1_;
		var shape = this.shapeGenerator.randomShape(p,col0_,col1_,shapePreference);
		this.shapes[this.shapes.length] = shape;
		return shape;
	}
	,shapeLocations: function() {
		var l = this.shapes.length;
		var arr = [];
		var _g1 = 0;
		while(_g1 < l) this.shapes[_g1++].getVirtualCentreInt(arr);
		return arr;
	}
	,hitBottom: function() {
		var c1_y;
		var c1_x;
		var c0_y;
		var c0_x;
		var l = this.shapes.length;
		var shape;
		var hit = false;
		var _g1 = 0;
		while(_g1 < l) {
			shape = this.shapes[_g1++];
			shape.getLocation();
			var diaSq = this.diaSq;
			var vb0 = shape.virtualBlocks;
			var vb1 = this.bottom.blocks;
			var l0 = vb0.length;
			var l1 = vb1.length;
			var sq0;
			var sq1;
			var out = false;
			var _g11 = 0;
			while(_g11 < l0) {
				sq0 = vb0[_g11++];
				var _g3 = 0;
				while(_g3 < l1) {
					sq1 = vb1[_g3++];
					var dx = sq0.t0.bx;
					var dy = sq0.t0.by;
					var ex = sq0.t0.cx;
					var ey = sq0.t0.cy;
					if(dx < ex) {
						c0_x = dx + (ex - dx) / 2;
					} else {
						c0_x = ex + (dx - ex) / 2;
					}
					if(dy < ey) {
						c0_y = dy + (ey - dy) / 2;
					} else {
						c0_y = dy + (dy - ey) / 2 - sq0.dia;
					}
					var dx1 = sq1.t0.bx;
					var dy1 = sq1.t0.by;
					var ex1 = sq1.t0.cx;
					var ey1 = sq1.t0.cy;
					if(dx1 < ex1) {
						c1_x = dx1 + (ex1 - dx1) / 2;
					} else {
						c1_x = ex1 + (dx1 - ex1) / 2;
					}
					if(dy1 < ey1) {
						c1_y = dy1 + (ey1 - dy1) / 2;
					} else {
						c1_y = dy1 + (dy1 - ey1) / 2 - sq1.dia;
					}
					var dx2 = c0_x - c1_x;
					var dy2 = c0_y - c1_y;
					if(dx2 * dx2 + dy2 * dy2 < diaSq) {
						out = true;
						break;
					}
				}
			}
			if(out) {
				var beta;
				if(shape.angle < 0) {
					beta = -shape.angle + 180;
				}
				beta = shape.angle % (2 * Math.PI);
				shape.rotate(shape.rook - beta);
				var newLoc;
				var _g12 = 0;
				var _g = shape.lastLocation.length;
				while(_g12 < _g) {
					var i = _g12++;
					newLoc = shape.newLocation[i];
					shape.blocks[i].set_x(newLoc.x * shape.dia);
					shape.blocks[i].set_y(newLoc.y * shape.dia);
					shape.virtualBlocks[i].set_x(newLoc.x * shape.dia);
					shape.virtualBlocks[i].set_y(newLoc.y * shape.dia);
				}
				var newBlocks = shape.clearBlocks();
				var l2 = newBlocks.length;
				var _g13 = 0;
				while(_g13 < l2) this.bottom.pushBlock(newBlocks[_g13++]);
				var arrP = shape.lastLocation;
				var arr2d = this.inertArr;
				var lp = arrP.length;
				var p;
				var _g14 = 0;
				while(_g14 < lp) {
					p = arrP[_g14++];
					arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
				}
				this.removeFullRows();
				hit = true;
			}
		}
		var this1 = this.inertArr;
		var w = this1[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var emp = true;
		var _g15 = s;
		while(_g15 < e) if(this1[_g15++] == 1) {
			emp = false;
			break;
		}
		var end = !emp;
		if(end) {
			this.onGameEnd();
		}
		if(this.onPolyominoShapeLanded != null && hit && !end) {
			this.onPolyominoShapeLanded();
		}
		return hit;
	}
	,removeFullRows: function(rowsFull,countTrue) {
		if(rowsFull == null) {
			var this1 = this.inertArr;
			var arr = [];
			var _g1 = 0;
			var _g = this1[1];
			while(_g1 < _g) {
				var y = _g1++;
				var w = this1[0];
				var s = 2 + w * y | 0;
				var e = s + w;
				var ful = true;
				var _g11 = s;
				while(_g11 < e) if(this1[_g11++] == 0) {
					ful = false;
					break;
				}
				arr[y] = ful;
			}
			rowsFull = arr;
			arr.pop();
			countTrue = 0;
			var _g2 = 0;
			while(_g2 < arr.length) {
				var row = arr[_g2];
				++_g2;
				if(row) {
					++countTrue;
				}
			}
		}
		if(countTrue > 0) {
			var indx = rowsFull.lastIndexOf(true);
			this.bottom.removeRow(indx + 2);
			var this2 = this.inertArr;
			var l = indx - indx + 1;
			var rowUpto = indx - 1;
			var _g12 = 0;
			while(_g12 < indx) {
				var j = rowUpto - _g12++;
				var w1 = this2[0];
				var s0 = 2 + w1 * j | 0;
				var e0 = 2 + w1 * (j + l) | 0;
				var _g13 = 0;
				while(_g13 < w1) {
					var i = _g13++;
					this2[e0 + i] = this2[s0 + i];
					this2[s0 + i] = 0;
				}
			}
			if(l > rowUpto) {
				var _g14 = 0;
				var _g3 = l - rowUpto;
				while(_g14 < _g3) {
					var w2 = this2[0];
					var s1 = 2 + w2 * _g14++ | 0;
					var _g15 = 0;
					while(_g15 < w2) this2[s1 + _g15++] = 0;
				}
			}
			var this3 = this.inertArr;
			var arr1 = [];
			var _g16 = 0;
			var _g4 = this3[1];
			while(_g16 < _g4) {
				var y1 = _g16++;
				var w3 = this3[0];
				var s2 = 2 + w3 * y1 | 0;
				var e1 = s2 + w3;
				var ful1 = true;
				var _g17 = s2;
				while(_g17 < e1) if(this3[_g17++] == 0) {
					ful1 = false;
					break;
				}
				arr1[y1] = ful1;
			}
			rowsFull = arr1;
			arr1.pop();
			countTrue = 0;
			var _g5 = 0;
			while(_g5 < arr1.length) {
				var row1 = arr1[_g5];
				++_g5;
				if(row1) {
					++countTrue;
				}
			}
			if(countTrue > 0) {
				this.removeFullRows(arr1,countTrue);
			}
		}
	}
	,shapeKill: function(shape,count) {
		var beta;
		if(shape.angle < 0) {
			beta = -shape.angle + 180;
		}
		beta = shape.angle % (2 * Math.PI);
		shape.rotate(shape.rook - beta);
		var newLoc;
		var _g1 = 0;
		var _g = shape.lastLocation.length;
		while(_g1 < _g) {
			var i = _g1++;
			newLoc = shape.newLocation[i];
			shape.blocks[i].set_x(newLoc.x * shape.dia);
			shape.blocks[i].set_y(newLoc.y * shape.dia);
			shape.virtualBlocks[i].set_x(newLoc.x * shape.dia);
			shape.virtualBlocks[i].set_y(newLoc.y * shape.dia);
		}
		var newBlocks = shape.clearBlocks();
		var l = newBlocks.length;
		var _g11 = 0;
		while(_g11 < l) this.bottom.pushBlock(newBlocks[_g11++]);
		var arrP = shape.lastLocation;
		var arr2d = this.inertArr;
		var lp = arrP.length;
		var p;
		var _g12 = 0;
		while(_g12 < lp) {
			p = arrP[_g12++];
			arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
		}
	}
	,shapesOnBg: function() {
		var l = this.shapes.length;
		var arr = [];
		var _g1 = 0;
		while(_g1 < l) this.shapes[_g1++].getVirtualCentreInt(arr);
		this.bottom.getCentreInt(arr);
		var _this = this.background;
		var col0_ = _this.bgCol0;
		var col1_ = _this.bgCol1;
		var col2_ = _this.bgCol2;
		var col3_ = _this.bgCol3;
		var c0;
		var c1;
		var toggle = false;
		var indx = 0;
		var _g11 = 0;
		var _g = _this.wide;
		while(_g11 < _g) {
			var w = _g11++;
			if(toggle) {
				c0 = col0_;
				c1 = col1_;
			} else {
				c0 = col2_;
				c1 = col3_;
			}
			toggle = !toggle;
			var _g3 = 0;
			var _g2 = _this.hi;
			while(_g3 < _g2) {
				indx = 2 + _this.wide * _g3++ + w | 0;
				var _this1 = _this.bgSquares[indx];
				_this1.col0 = c0;
				_this1.col1 = c1;
				_this1.t0.colorID = c0;
				_this1.t1.colorID = c1;
				_this1.t0.colorA = c0;
				_this1.t0.colorB = c0;
				_this1.t0.colorC = c0;
				_this1.t1.colorA = c1;
				_this1.t1.colorB = c1;
				_this1.t1.colorC = c1;
			}
		}
		var ls = arr.length;
		var pos;
		var indx1 = 0;
		var dx = 0;
		var dy = 0;
		var _g12 = 0;
		while(_g12 < ls) {
			pos = arr[_g12++];
			dx = pos.x;
			dy = pos.y;
			if(dx > 0 && dx < _this.wide && dy > 0 && dy < _this.hi) {
				indx1 = 2 + _this.wide * dy + dx | 0;
				var _this2 = _this.bgSquares[indx1];
				_this2.col0 = 14;
				_this2.col1 = 14;
				_this2.t0.colorID = 14;
				_this2.t1.colorID = 14;
				_this2.t0.colorA = 14;
				_this2.t0.colorB = 14;
				_this2.t0.colorC = 14;
				_this2.t1.colorA = 14;
				_this2.t1.colorB = 14;
				_this2.t1.colorC = 14;
			}
		}
	}
	,rotate: function(theta) {
		var l = this.shapes.length;
		var _g1 = 0;
		while(_g1 < l) this.shapes[_g1++].rotate(theta);
	}
	,moveX: function(x,leftStop,rightStop) {
		var l = this.shapes.length;
		var shape;
		var _g1 = 0;
		while(_g1 < l) {
			shape = this.shapes[_g1++];
			if(shape.blocks != null && shape.blocks.length != 0) {
				var sqr = shape.blocks;
				var sides0;
				if(sqr == null) {
					sides0 = null;
				} else if(sqr.length == 0) {
					sides0 = null;
				} else {
					var l1 = sqr.length;
					var square = sqr[0];
					var bx = square.get_x();
					var br = square.get_right();
					var _g11 = 1;
					while(_g11 < l1) {
						square = sqr[_g11++];
						bx = Math.min(bx,square.get_x());
						br = Math.max(br,square.get_right());
					}
					sides0 = { x : bx, right : br};
				}
				var sqr1 = shape.virtualBlocks;
				var sides1;
				if(sqr1 == null) {
					sides1 = null;
				} else if(sqr1.length == 0) {
					sides1 = null;
				} else {
					var l2 = sqr1.length;
					var square1 = sqr1[0];
					var bx1 = square1.get_x();
					var br1 = square1.get_right();
					var _g12 = 1;
					while(_g12 < l2) {
						square1 = sqr1[_g12++];
						bx1 = Math.min(bx1,square1.get_x());
						br1 = Math.max(br1,square1.get_right());
					}
					sides1 = { x : bx1, right : br1};
				}
				var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
				if(sides != null) {
					if(x < 0) {
						if(sides.x + x > leftStop) {
							shape.moveX(x);
						} else {
							shape.moveX(leftStop - sides.x);
						}
					} else if(x > 0) {
						if(sides.right + x < rightStop) {
							shape.moveX(x);
						} else {
							shape.moveX(rightStop - sides.right);
						}
					}
				}
			}
		}
	}
	,moveShapeX: function(shape,x,leftStop,rightStop) {
		if(shape.blocks != null && shape.blocks.length != 0) {
			var sqr = shape.blocks;
			var sides0;
			if(sqr == null) {
				sides0 = null;
			} else if(sqr.length == 0) {
				sides0 = null;
			} else {
				var l = sqr.length;
				var square = sqr[0];
				var bx = square.get_x();
				var br = square.get_right();
				var _g1 = 1;
				while(_g1 < l) {
					square = sqr[_g1++];
					bx = Math.min(bx,square.get_x());
					br = Math.max(br,square.get_right());
				}
				sides0 = { x : bx, right : br};
			}
			var sqr1 = shape.virtualBlocks;
			var sides1;
			if(sqr1 == null) {
				sides1 = null;
			} else if(sqr1.length == 0) {
				sides1 = null;
			} else {
				var l1 = sqr1.length;
				var square1 = sqr1[0];
				var bx1 = square1.get_x();
				var br1 = square1.get_right();
				var _g11 = 1;
				while(_g11 < l1) {
					square1 = sqr1[_g11++];
					bx1 = Math.min(bx1,square1.get_x());
					br1 = Math.max(br1,square1.get_right());
				}
				sides1 = { x : bx1, right : br1};
			}
			var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
			if(sides != null) {
				if(x < 0) {
					if(sides.x + x > leftStop) {
						shape.moveX(x);
					} else {
						shape.moveX(leftStop - sides.x);
					}
				} else if(x > 0) {
					if(sides.right + x < rightStop) {
						shape.moveX(x);
					} else {
						shape.moveX(rightStop - sides.right);
					}
				}
			}
		}
	}
	,moveDelta: function(x,y) {
		var l = this.shapes.length;
		var _g1 = 0;
		while(_g1 < l) this.shapes[_g1++].moveDelta(x,y);
	}
	,createPolyomino: function(p,snapped) {
		return new polyominoTriangles_game_Shape(this.id,this.triangles,p,this.col0,this.col1,this.dia,this.gap,snapped,this.offX,this.offY);
	}
	,createBg: function(p,wide,hi,col0_,col1_,col2_,col3_) {
		this.background = new polyominoTriangles_game_Background(new polyominoTriangles_game_Shape(this.id,this.triangles,p,this.col0,this.col1,this.dia,this.gap,null,this.offX,this.offY),wide,hi + 1,col0_,col1_,col0_,col1_);
	}
	,addHitPointsInt: function(arrP) {
		var arr2d = this.inertArr;
		var lp = arrP.length;
		var p;
		var _g1 = 0;
		while(_g1 < lp) {
			p = arrP[_g1++];
			arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
		}
	}
	,offSetAddPoints: function(arr2d,arrP) {
		var lp = arrP.length;
		var p;
		var _g1 = 0;
		while(_g1 < lp) {
			p = arrP[_g1++];
			arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
		}
	}
	,createBottom: function(p,wide,col0_,col1_) {
		var templates = new polyominoTriangles_game_Templates($bind(this,this.createPolyomino));
		this.col0 = col0_;
		this.col1 = col1_;
		var ts = templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
		var _g1 = 0;
		while(_g1 < wide) ts.addBlock(_g1++,0,false,true);
		this.bottom = ts;
		var arr = [];
		var bottomPositions = this.bottom.getCentreInt(arr);
		var arr2d = this.inertArr;
		var lp = bottomPositions.length;
		var p1;
		var _g11 = 0;
		while(_g11 < lp) {
			p1 = bottomPositions[_g11++];
			arr2d[2 + arr2d[0] * (p1.y + -2) + p1.x | 0] = 1;
		}
	}
	,__class__: polyominoTriangles_game_Controller
};
var polyominoTriangles_game_Layout = function(controller_,originP_,wide_,hi_,dia_) {
	this.shapeid = 1;
	this.noBlocks = 1;
	this.above = 7;
	this.controller = controller_;
	this.wide = wide_;
	this.hi = hi_;
	this.dia = dia_;
	this.originP = originP_;
	var bottomP = { x : this.originP.x, y : this.originP.y + this.dia * this.hi};
	this.background();
	this.fallingBlocks(this.noBlocks,this.above * this.dia);
	this.bottom(bottomP);
};
polyominoTriangles_game_Layout.__name__ = ["polyominoTriangles","game","Layout"];
polyominoTriangles_game_Layout.prototype = {
	controller: null
	,above: null
	,noBlocks: null
	,originP: null
	,wide: null
	,hi: null
	,dia: null
	,shapeid: null
	,background: function() {
		this.controller.createBg(this.originP,this.wide,this.hi,10,0,9,0);
	}
	,fallingBlocks: function(noBlocks,aboveY) {
		var randX = 0.;
		var x = this.originP.x;
		var y = this.originP.y;
		var _g1 = 0;
		while(_g1 < noBlocks) {
			var i = _g1++;
			var m = i % 6 + 1;
			randX = this.dia + this.dia * Math.round(Math.random() * (this.wide - 2));
			this.controller.createShape({ x : x + randX, y : y - i * aboveY},m,m + 1);
		}
	}
	,createTile: function() {
		var x = this.originP.x;
		var y = this.originP.y;
		var m = this.shapeid % 6 + 1;
		var randX = this.dia;
		var randX1 = this.dia;
		var randX2 = Math.random();
		this.controller.createShape({ x : x + (randX + randX1 * Math.round(randX2 * (this.wide - 2))), y : y},m,m + 1);
		this.shapeid++;
	}
	,bottom: function(p) {
		this.controller.createBottom(p,this.wide,8,9);
	}
	,__class__: polyominoTriangles_game_Layout
};
var polyominoTriangles_game_Movement = function(controller_,dia_) {
	this.jy = 0.;
	this.jx = 0.;
	this.toggleY = false;
	this.toggleX = false;
	this.jumpY = .0;
	this.jumpX = .0;
	this.jumpSpeed = 7;
	this.fallSpeed = 0.01;
	this.controller = controller_;
	this.dia = dia_;
};
polyominoTriangles_game_Movement.__name__ = ["polyominoTriangles","game","Movement"];
polyominoTriangles_game_Movement.prototype = {
	controller: null
	,dia: null
	,fallSpeed: null
	,jumpSpeed: null
	,jumpX: null
	,jumpY: null
	,toggleX: null
	,toggleY: null
	,jx: null
	,jy: null
	,leftStop: null
	,rightStop: null
	,move: function(x,y) {
		if(this.toggleX) {
			return false;
		} else if(this.toggleY) {
			return false;
		} else {
			if(x != 0) {
				this.toggleX = true;
			}
			if(y != 0) {
				this.toggleY = true;
			}
			this.jumpX = x * this.dia;
			this.jumpY = y * this.dia;
			return true;
		}
	}
	,update: function() {
		var djx = 0.;
		var djy = 0.;
		if(this.toggleX) {
			if(this.jumpX > 0) {
				djx = this.jumpX / this.jumpSpeed;
				this.jx += djx;
				if(this.jx > this.jumpX + djx / 2) {
					this.toggleX = false;
					this.jx = 0.;
					djx = 0.;
				}
			} else {
				djx = this.jumpX / this.jumpSpeed;
				this.jx += djx;
				if(this.jx < this.jumpX + djx / 2) {
					this.toggleX = false;
					this.jx = 0.;
					djx = 0.;
				}
			}
		}
		if(this.toggleY) {
			if(this.jumpY > 0) {
				djy = this.jumpY / this.jumpSpeed;
				this.jy += djy;
				if(this.jy > this.jumpY + djy / 2) {
					this.toggleY = false;
					this.jy = 0.;
					djy = 0.;
				}
			} else {
				djy = this.jumpY / this.jumpSpeed;
				this.jy += djx;
				if(this.jy < this.jumpY + djy / 2) {
					this.toggleY = false;
					this.jy = 0.;
					djy = 0.;
				}
			}
		}
		if(this.toggleX) {
			var _this = this.controller;
			var leftStop = this.leftStop;
			var rightStop = this.rightStop;
			var l = _this.shapes.length;
			var shape;
			var _g1 = 0;
			while(_g1 < l) {
				shape = _this.shapes[_g1++];
				if(shape.blocks != null && shape.blocks.length != 0) {
					var sqr = shape.blocks;
					var sides0;
					if(sqr == null) {
						sides0 = null;
					} else if(sqr.length == 0) {
						sides0 = null;
					} else {
						var l1 = sqr.length;
						var square = sqr[0];
						var bx = square.get_x();
						var br = square.get_right();
						var _g11 = 1;
						while(_g11 < l1) {
							square = sqr[_g11++];
							bx = Math.min(bx,square.get_x());
							br = Math.max(br,square.get_right());
						}
						sides0 = { x : bx, right : br};
					}
					var sqr1 = shape.virtualBlocks;
					var sides1;
					if(sqr1 == null) {
						sides1 = null;
					} else if(sqr1.length == 0) {
						sides1 = null;
					} else {
						var l2 = sqr1.length;
						var square1 = sqr1[0];
						var bx1 = square1.get_x();
						var br1 = square1.get_right();
						var _g12 = 1;
						while(_g12 < l2) {
							square1 = sqr1[_g12++];
							bx1 = Math.min(bx1,square1.get_x());
							br1 = Math.max(br1,square1.get_right());
						}
						sides1 = { x : bx1, right : br1};
					}
					var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
					if(sides != null) {
						if(djx < 0) {
							if(sides.x + djx > leftStop) {
								shape.moveX(djx);
							} else {
								shape.moveX(leftStop - sides.x);
							}
						} else if(djx > 0) {
							if(sides.right + djx < rightStop) {
								shape.moveX(djx);
							} else {
								shape.moveX(rightStop - sides.right);
							}
						}
					}
				}
			}
		}
		var _this1 = this.controller;
		var y = this.fallSpeed + djy;
		var l3 = _this1.shapes.length;
		var _g13 = 0;
		while(_g13 < l3) _this1.shapes[_g13++].moveDelta(0.0,y);
	}
	,updateSimple: function() {
		var _this = this.controller;
		var x = this.jumpX;
		var leftStop = this.leftStop;
		var rightStop = this.rightStop;
		var l = _this.shapes.length;
		var shape;
		var _g1 = 0;
		while(_g1 < l) {
			shape = _this.shapes[_g1++];
			if(shape.blocks != null && shape.blocks.length != 0) {
				var sqr = shape.blocks;
				var sides0;
				if(sqr == null) {
					sides0 = null;
				} else if(sqr.length == 0) {
					sides0 = null;
				} else {
					var l1 = sqr.length;
					var square = sqr[0];
					var bx = square.get_x();
					var br = square.get_right();
					var _g11 = 1;
					while(_g11 < l1) {
						square = sqr[_g11++];
						bx = Math.min(bx,square.get_x());
						br = Math.max(br,square.get_right());
					}
					sides0 = { x : bx, right : br};
				}
				var sqr1 = shape.virtualBlocks;
				var sides1;
				if(sqr1 == null) {
					sides1 = null;
				} else if(sqr1.length == 0) {
					sides1 = null;
				} else {
					var l2 = sqr1.length;
					var square1 = sqr1[0];
					var bx1 = square1.get_x();
					var br1 = square1.get_right();
					var _g12 = 1;
					while(_g12 < l2) {
						square1 = sqr1[_g12++];
						bx1 = Math.min(bx1,square1.get_x());
						br1 = Math.max(br1,square1.get_right());
					}
					sides1 = { x : bx1, right : br1};
				}
				var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
				if(sides != null) {
					if(x < 0) {
						if(sides.x + x > leftStop) {
							shape.moveX(x);
						} else {
							shape.moveX(leftStop - sides.x);
						}
					} else if(x > 0) {
						if(sides.right + x < rightStop) {
							shape.moveX(x);
						} else {
							shape.moveX(rightStop - sides.right);
						}
					}
				}
			}
		}
		var _this1 = this.controller;
		var y = this.fallSpeed + this.jumpY;
		var l3 = _this1.shapes.length;
		var _g13 = 0;
		while(_g13 < l3) _this1.shapes[_g13++].moveDelta(0.0,y);
		this.jumpX = 0.;
		this.jumpY = 0.;
	}
	,reset: function() {
		this.toggleY = false;
		this.toggleX = false;
		this.jumpX = 0.;
		this.jumpY = 0.;
		this.jy = 0.;
		this.jx = 0.;
	}
	,__class__: polyominoTriangles_game_Movement
};
var polyominoTriangles_game_Polyomino = function(scale) {
	if(scale == null) {
		scale = 1;
	}
	this.end = false;
	this.offY = 0;
	this.offX = 0;
	this.hi = 30;
	this.wide = 8;
	this.edge = 0.01;
	this.dia = 0.075;
	this.scaleDimensions(scale);
	this.createPolyomino();
	this.interaction();
	this.startGame();
};
polyominoTriangles_game_Polyomino.__name__ = ["polyominoTriangles","game","Polyomino"];
polyominoTriangles_game_Polyomino.prototype = {
	controller: null
	,dia: null
	,edge: null
	,wide: null
	,hi: null
	,offX: null
	,offY: null
	,layout: null
	,rotation: null
	,movement: null
	,end: null
	,scaleDimensions: function(scale) {
		this.dia = scale * this.dia;
		this.edge = scale * this.edge;
	}
	,setLeftRightStops: function() {
		this.movement.leftStop = this.dia * this.offX;
		this.movement.rightStop = this.dia * this.offX + this.wide * this.dia;
	}
	,createPolyomino: function() {
		this.controller = new polyominoTriangles_game_Controller(0,justTriangles_Triangle.triangles,this.wide,this.hi,this.dia,this.edge,this.offX,this.offY - 4);
	}
	,startGame: function() {
		this.layout = new polyominoTriangles_game_Layout(this.controller,{ x : this.dia * this.offX, y : this.dia * this.offY},this.wide,this.hi,this.dia);
		this.controller.onPolyominoShapeLanded = $bind(this,this.newShape);
		this.controller.onGameEnd = $bind(this,this.gameEnd);
	}
	,newShape: function() {
		this.rotation.reset();
		this.movement.reset();
		this.layout.createTile();
	}
	,gameEnd: function() {
		this.end = true;
	}
	,interaction: function() {
		this.rotation = new polyominoTriangles_game_Rotation(this.controller);
		this.movement = new polyominoTriangles_game_Movement(this.controller,this.dia);
		this.setLeftRightStops();
	}
	,update: function() {
		var c1_y;
		var c1_x;
		var c0_y;
		var c0_x;
		if(this.end) {
			return;
		}
		var _this = this.controller;
		var l = _this.shapes.length;
		var shape;
		var hit = false;
		var _g1 = 0;
		while(_g1 < l) {
			shape = _this.shapes[_g1++];
			shape.getLocation();
			var diaSq = _this.diaSq;
			var vb0 = shape.virtualBlocks;
			var vb1 = _this.bottom.blocks;
			var l0 = vb0.length;
			var l1 = vb1.length;
			var sq0;
			var sq1;
			var out = false;
			var _g11 = 0;
			while(_g11 < l0) {
				sq0 = vb0[_g11++];
				var _g3 = 0;
				while(_g3 < l1) {
					sq1 = vb1[_g3++];
					var dx = sq0.t0.bx;
					var dy = sq0.t0.by;
					var ex = sq0.t0.cx;
					var ey = sq0.t0.cy;
					if(dx < ex) {
						c0_x = dx + (ex - dx) / 2;
					} else {
						c0_x = ex + (dx - ex) / 2;
					}
					if(dy < ey) {
						c0_y = dy + (ey - dy) / 2;
					} else {
						c0_y = dy + (dy - ey) / 2 - sq0.dia;
					}
					var dx1 = sq1.t0.bx;
					var dy1 = sq1.t0.by;
					var ex1 = sq1.t0.cx;
					var ey1 = sq1.t0.cy;
					if(dx1 < ex1) {
						c1_x = dx1 + (ex1 - dx1) / 2;
					} else {
						c1_x = ex1 + (dx1 - ex1) / 2;
					}
					if(dy1 < ey1) {
						c1_y = dy1 + (ey1 - dy1) / 2;
					} else {
						c1_y = dy1 + (dy1 - ey1) / 2 - sq1.dia;
					}
					var dx2 = c0_x - c1_x;
					var dy2 = c0_y - c1_y;
					if(dx2 * dx2 + dy2 * dy2 < diaSq) {
						out = true;
						break;
					}
				}
			}
			if(out) {
				var beta;
				if(shape.angle < 0) {
					beta = -shape.angle + 180;
				}
				beta = shape.angle % (2 * Math.PI);
				shape.rotate(shape.rook - beta);
				var newLoc;
				var _g12 = 0;
				var _g = shape.lastLocation.length;
				while(_g12 < _g) {
					var i = _g12++;
					newLoc = shape.newLocation[i];
					shape.blocks[i].set_x(newLoc.x * shape.dia);
					shape.blocks[i].set_y(newLoc.y * shape.dia);
					shape.virtualBlocks[i].set_x(newLoc.x * shape.dia);
					shape.virtualBlocks[i].set_y(newLoc.y * shape.dia);
				}
				var newBlocks = shape.clearBlocks();
				var l2 = newBlocks.length;
				var _g13 = 0;
				while(_g13 < l2) _this.bottom.pushBlock(newBlocks[_g13++]);
				var arrP = shape.lastLocation;
				var arr2d = _this.inertArr;
				var lp = arrP.length;
				var p;
				var _g14 = 0;
				while(_g14 < lp) {
					p = arrP[_g14++];
					arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
				}
				_this.removeFullRows();
				hit = true;
			}
		}
		var this1 = _this.inertArr;
		var w = this1[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var emp = true;
		var _g15 = s;
		while(_g15 < e) if(this1[_g15++] == 1) {
			emp = false;
			break;
		}
		var end = !emp;
		if(end) {
			_this.onGameEnd();
		}
		if(_this.onPolyominoShapeLanded != null && hit && !end) {
			_this.onPolyominoShapeLanded();
		}
		if(!hit) {
			var _this1 = this.rotation;
			if(_this1.toggle) {
				var _this2 = _this1.controller;
				var theta = Math.PI / _this1.rotationSpeed;
				var l3 = _this2.shapes.length;
				var _g16 = 0;
				while(_g16 < l3) _this2.shapes[_g16++].rotate(theta);
			}
			if(_this1.count % (_this1.rotationSpeed / 2) == 0.) {
				_this1.count = 0.;
				_this1.toggle = false;
			}
			_this1.count += 1.;
			var _this3 = this.movement;
			var djx = 0.;
			var djy = 0.;
			if(_this3.toggleX) {
				if(_this3.jumpX > 0) {
					djx = _this3.jumpX / _this3.jumpSpeed;
					if((_this3.jx += djx) > _this3.jumpX + djx / 2) {
						_this3.toggleX = false;
						_this3.jx = 0.;
						djx = 0.;
					}
				} else {
					djx = _this3.jumpX / _this3.jumpSpeed;
					if((_this3.jx += djx) < _this3.jumpX + djx / 2) {
						_this3.toggleX = false;
						_this3.jx = 0.;
						djx = 0.;
					}
				}
			}
			if(_this3.toggleY) {
				if(_this3.jumpY > 0) {
					djy = _this3.jumpY / _this3.jumpSpeed;
					if((_this3.jy += djy) > _this3.jumpY + djy / 2) {
						_this3.toggleY = false;
						_this3.jy = 0.;
						djy = 0.;
					}
				} else {
					djy = _this3.jumpY / _this3.jumpSpeed;
					if((_this3.jy += djx) < _this3.jumpY + djy / 2) {
						_this3.toggleY = false;
						_this3.jy = 0.;
						djy = 0.;
					}
				}
			}
			if(_this3.toggleX) {
				var _this4 = _this3.controller;
				var leftStop = _this3.leftStop;
				var rightStop = _this3.rightStop;
				var l4 = _this4.shapes.length;
				var shape1;
				var _g17 = 0;
				while(_g17 < l4) {
					shape1 = _this4.shapes[_g17++];
					if(shape1.blocks != null && shape1.blocks.length != 0) {
						var sqr = shape1.blocks;
						var sides0;
						if(sqr == null) {
							sides0 = null;
						} else if(sqr.length == 0) {
							sides0 = null;
						} else {
							var l5 = sqr.length;
							var square = sqr[0];
							var bx = square.get_x();
							var br = square.get_right();
							var _g18 = 1;
							while(_g18 < l5) {
								square = sqr[_g18++];
								bx = Math.min(bx,square.get_x());
								br = Math.max(br,square.get_right());
							}
							sides0 = { x : bx, right : br};
						}
						var sqr1 = shape1.virtualBlocks;
						var sides1;
						if(sqr1 == null) {
							sides1 = null;
						} else if(sqr1.length == 0) {
							sides1 = null;
						} else {
							var l6 = sqr1.length;
							var square1 = sqr1[0];
							var bx1 = square1.get_x();
							var br1 = square1.get_right();
							var _g19 = 1;
							while(_g19 < l6) {
								square1 = sqr1[_g19++];
								bx1 = Math.min(bx1,square1.get_x());
								br1 = Math.max(br1,square1.get_right());
							}
							sides1 = { x : bx1, right : br1};
						}
						var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
						if(sides != null) {
							if(djx < 0) {
								if(sides.x + djx > leftStop) {
									shape1.moveX(djx);
								} else {
									shape1.moveX(leftStop - sides.x);
								}
							} else if(djx > 0) {
								if(sides.right + djx < rightStop) {
									shape1.moveX(djx);
								} else {
									shape1.moveX(rightStop - sides.right);
								}
							}
						}
					}
				}
			}
			var _this5 = _this3.controller;
			var y = _this3.fallSpeed + djy;
			var l7 = _this5.shapes.length;
			var _g110 = 0;
			while(_g110 < l7) _this5.shapes[_g110++].moveDelta(0.0,y);
		}
	}
	,rotate: function(i) {
		var _this = this.rotation;
		if(!_this.toggle) {
			_this.toggle = true;
			_this.count = 1.0;
		}
	}
	,move: function(x,y) {
		var _this = this.movement;
		if(!_this.toggleX) {
			if(!_this.toggleY) {
				if(x != 0) {
					_this.toggleX = true;
				}
				if(y != 0) {
					_this.toggleY = true;
				}
				_this.jumpX = x * _this.dia;
				_this.jumpY = y * _this.dia;
			}
		}
	}
	,__class__: polyominoTriangles_game_Polyomino
};
var polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$ = {};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.__name__ = ["polyominoTriangles","game","_RookAngle","RookAngle_Impl_"];
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$._new = function(angle) {
	var this1;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else {
			this1 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this1 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else {
			this1 = 0.;
		}
	}
	return this1;
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat = function(f) {
	var this1;
	if(f < 0) {
		var angle = -f % (2 * Math.PI);
		if(angle == 0.) {
			this1 = 0.;
		} else if(angle < Math.PI / 4) {
			this1 = 0.;
		} else if(angle < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else if(angle < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else {
			this1 = 0.;
		}
	} else {
		var angle1 = f % (2 * Math.PI);
		if(angle1 == 0.) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else {
			this1 = 0.;
		}
	}
	return this1;
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromInt = function(i) {
	var angle = i * 1.;
	var this1;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else {
			this1 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this1 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else {
			this1 = 0.;
		}
	}
	return this1;
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.limit0_2pi = function(angle) {
	return angle % (2 * Math.PI);
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.rook0_2pi = function(angle) {
	if(angle == 0.) {
		return 0.;
	} else if(angle < Math.PI / 4) {
		return 0.;
	} else if(angle < Math.PI / 2 + Math.PI / 4) {
		return Math.PI / 2;
	} else if(angle < Math.PI + Math.PI / 4) {
		return Math.PI;
	} else if(angle < Math.PI + Math.PI / 2 + Math.PI / 4) {
		return Math.PI + Math.PI / 2;
	} else {
		return 0.;
	}
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.negativeRook0_2pi = function(angle) {
	if(angle == 0.) {
		return 0.;
	} else if(angle < Math.PI / 4) {
		return 0.;
	} else if(angle < Math.PI / 2 + Math.PI / 4) {
		return Math.PI + Math.PI / 2;
	} else if(angle < Math.PI + Math.PI / 4) {
		return Math.PI;
	} else if(angle < Math.PI + Math.PI / 2 + Math.PI / 4) {
		return Math.PI / 2;
	} else {
		return 0.;
	}
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.compassString = function(this1) {
	if(this1 == 0.) {
		return "North";
	} else if(this1 == Math.PI / 2) {
		return "East";
	} else if(this1 == Math.PI) {
		return "South";
	} else if(this1 == Math.PI + Math.PI / 2) {
		return "West";
	} else {
		return "angle not found " + this1;
	}
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.radiusString = function(this1) {
	if(this1 == 0.) {
		return "0";
	} else if(this1 == Math.PI / 2) {
		return "pi/2";
	} else if(this1 == Math.PI) {
		return "pi";
	} else if(this1 == Math.PI + Math.PI / 2) {
		return "3/4 pi";
	} else {
		return "angle not found " + this1;
	}
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.degrees = function(this1) {
	if(this1 == 0.) {
		return 0.;
	} else if(this1 == Math.PI / 2) {
		return 90.;
	} else if(this1 == Math.PI) {
		return 180.;
	} else if(this1 == Math.PI + Math.PI / 2) {
		return 270.;
	} else {
		return 0;
	}
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.clockRotate = function(this1) {
	var angle = this1 + 90;
	var this2;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else {
			this2 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else {
			this2 = 0.;
		}
	}
	this1 = this2;
	return polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this1);
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.antiClockRotate = function(this1) {
	var angle = this1 - 90;
	var this2;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else {
			this2 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else {
			this2 = 0.;
		}
	}
	this1 = this2;
	return polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this1);
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.upsideDown = function(this1) {
	var angle = this1 + 180;
	var this2;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else {
			this2 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else {
			this2 = 0.;
		}
	}
	this1 = this2;
	return polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this1);
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.pp = function(this1) {
	var angle = this1 + 90;
	var this2;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else {
			this2 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else {
			this2 = 0.;
		}
	}
	this1 = this2;
	return polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this1);
};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.mm = function(this1) {
	var angle = this1 - 90;
	var this2;
	if(angle < 0) {
		var angle1 = -angle % (2 * Math.PI);
		if(angle1 == 0.) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else {
			this2 = 0.;
		}
	} else {
		var angle2 = angle % (2 * Math.PI);
		if(angle2 == 0.) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 4) {
			this2 = 0.;
		} else if(angle2 < Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI / 2;
		} else if(angle2 < Math.PI + Math.PI / 4) {
			this2 = Math.PI;
		} else if(angle2 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this2 = Math.PI + Math.PI / 2;
		} else {
			this2 = 0.;
		}
	}
	this1 = this2;
	return polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this1);
};
var polyominoTriangles_game_Rotation = function(controller_) {
	this.rotationSpeed = 20;
	this.count = 0.;
	this.toggle = false;
	this.controller = controller_;
};
polyominoTriangles_game_Rotation.__name__ = ["polyominoTriangles","game","Rotation"];
polyominoTriangles_game_Rotation.prototype = {
	controller: null
	,toggle: null
	,count: null
	,rotationSpeed: null
	,rotate: function(i) {
		if(this.toggle) {
			return false;
		} else {
			this.toggle = true;
			this.count = 1.0;
			return true;
		}
	}
	,update: function() {
		if(this.toggle) {
			var _this = this.controller;
			var theta = Math.PI / this.rotationSpeed;
			var l = _this.shapes.length;
			var _g1 = 0;
			while(_g1 < l) _this.shapes[_g1++].rotate(theta);
		}
		if(this.count % (this.rotationSpeed / 2) == 0.) {
			this.count = 0.;
			this.toggle = false;
		}
		this.count += 1.;
	}
	,reset: function() {
		this.toggle = false;
		this.count = 0;
	}
	,__class__: polyominoTriangles_game_Rotation
};
var polyominoTriangles_game_Snapped = { __ename__ : true, __constructs__ : ["Always","Zero","Ninety","Fix"] };
polyominoTriangles_game_Snapped.Always = ["Always",0];
polyominoTriangles_game_Snapped.Always.toString = $estr;
polyominoTriangles_game_Snapped.Always.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Zero = ["Zero",1];
polyominoTriangles_game_Snapped.Zero.toString = $estr;
polyominoTriangles_game_Snapped.Zero.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Ninety = ["Ninety",2];
polyominoTriangles_game_Snapped.Ninety.toString = $estr;
polyominoTriangles_game_Snapped.Ninety.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Fix = ["Fix",3];
polyominoTriangles_game_Snapped.Fix.toString = $estr;
polyominoTriangles_game_Snapped.Fix.__enum__ = polyominoTriangles_game_Snapped;
var polyominoTriangles_game_Shape = function(id_,triangles_,centre_,col0_,col1_,dia_,gap_,snapped_,offX_,offY_) {
	if(offY_ == null) {
		offY_ = 0;
	}
	if(offX_ == null) {
		offX_ = 0;
	}
	this.newLocation = [];
	this.lastLocation = [];
	this.locked = false;
	this.lastRook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(0.);
	this.rook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(0.);
	this.angle = 0.;
	if(snapped_ == polyominoTriangles_game_Snapped.Zero || snapped_ == polyominoTriangles_game_Snapped.Fix) {
		centre_.x -= dia_ / 2;
	}
	this.centre = centre_;
	this.snapped = snapped_;
	this.offX = offX_;
	this.offY = offY_;
	this.start = { x : centre_.x, y : centre_.y};
	this.id = id_;
	this.triangles = triangles_;
	this.col0 = col0_;
	this.col1 = col1_;
	this.dia = dia_;
	this.gap = gap_;
	this.blocks = [];
	this.virtualBlocks = [];
};
polyominoTriangles_game_Shape.__name__ = ["polyominoTriangles","game","Shape"];
polyominoTriangles_game_Shape.getShapeBounds = function(sqr) {
	if(sqr == null) {
		return null;
	} else if(sqr.length == 0) {
		return null;
	} else {
		var l = sqr.length;
		var square = sqr[0];
		var bx = square.get_x();
		var by = square.get_y();
		var br = square.get_right();
		var bb = square.get_bottom();
		var _g1 = 1;
		while(_g1 < l) {
			square = sqr[_g1++];
			bx = Math.min(bx,square.get_x());
			by = Math.min(by,square.get_y());
			br = Math.max(br,square.get_right());
			bb = Math.max(br,square.get_bottom());
		}
		return { x : bx, y : by, right : br, bottom : bb};
	}
};
polyominoTriangles_game_Shape.getShapeSides = function(sqr) {
	if(sqr == null) {
		return null;
	} else if(sqr.length == 0) {
		return null;
	} else {
		var l = sqr.length;
		var square = sqr[0];
		var bx = square.get_x();
		var br = square.get_right();
		var _g1 = 1;
		while(_g1 < l) {
			square = sqr[_g1++];
			bx = Math.min(bx,square.get_x());
			br = Math.max(br,square.get_right());
		}
		return { x : bx, right : br};
	}
};
polyominoTriangles_game_Shape.shapeClose = function(sh0,sh1,diaSq) {
	var c1_y;
	var c1_x;
	var c0_y;
	var c0_x;
	var vb0 = sh0.virtualBlocks;
	var vb1 = sh1.blocks;
	var l0 = vb0.length;
	var l1 = vb1.length;
	var sq0;
	var sq1;
	var out = false;
	var _g1 = 0;
	while(_g1 < l0) {
		sq0 = vb0[_g1++];
		var _g3 = 0;
		while(_g3 < l1) {
			sq1 = vb1[_g3++];
			var dx = sq0.t0.bx;
			var dy = sq0.t0.by;
			var ex = sq0.t0.cx;
			var ey = sq0.t0.cy;
			if(dx < ex) {
				c0_x = dx + (ex - dx) / 2;
			} else {
				c0_x = ex + (dx - ex) / 2;
			}
			if(dy < ey) {
				c0_y = dy + (ey - dy) / 2;
			} else {
				c0_y = dy + (dy - ey) / 2 - sq0.dia;
			}
			var dx1 = sq1.t0.bx;
			var dy1 = sq1.t0.by;
			var ex1 = sq1.t0.cx;
			var ey1 = sq1.t0.cy;
			if(dx1 < ex1) {
				c1_x = dx1 + (ex1 - dx1) / 2;
			} else {
				c1_x = ex1 + (dx1 - ex1) / 2;
			}
			if(dy1 < ey1) {
				c1_y = dy1 + (ey1 - dy1) / 2;
			} else {
				c1_y = dy1 + (dy1 - ey1) / 2 - sq1.dia;
			}
			var dx2 = c0_x - c1_x;
			var dy2 = c0_y - c1_y;
			if(dx2 * dx2 + dy2 * dy2 < diaSq) {
				out = true;
				break;
			}
		}
	}
	return out;
};
polyominoTriangles_game_Shape.prototype = {
	start: null
	,snapped: null
	,centre: null
	,blocks: null
	,virtualBlocks: null
	,id: null
	,triangles: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,angle: null
	,rook: null
	,lastRook: null
	,offX: null
	,offY: null
	,locked: null
	,changeColor: function(col0_,col1_) {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			this.col0 = col0_;
			this.col1 = col1_;
			b.col0 = col0_;
			b.col1 = col1_;
			b.t0.colorID = col0_;
			b.t1.colorID = col1_;
			b.t0.colorA = col0_;
			b.t0.colorB = col0_;
			b.t0.colorC = col0_;
			b.t1.colorA = col1_;
			b.t1.colorB = col1_;
			b.t1.colorC = col1_;
		}
	}
	,addBlock: function(x_,y_,addVirtual,show) {
		if(show == null) {
			show = true;
		}
		if(addVirtual == null) {
			addVirtual = true;
		}
		var x0 = x_ * this.dia + this.centre.x;
		var y0 = y_ * this.dia + this.centre.y;
		var tri = this.triangles;
		if(!show) {
			tri = [];
		}
		if(addVirtual) {
			this.virtualBlocks[this.blocks.length] = new polyominoTriangles_game_Square(this.id,[],x0,y0,this.dia,this.gap,13,13);
		}
		var sq = new polyominoTriangles_game_Square(this.id,tri,x0,y0,this.dia,this.gap,this.col0,this.col1);
		this.blocks[this.blocks.length] = sq;
		return sq;
	}
	,pushBlock: function(square) {
		this.blocks[this.blocks.length] = square;
	}
	,clearBlocks: function() {
		var newBlocks = [];
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var i = _g1++;
			newBlocks[i] = this.blocks[i];
		}
		this.blocks = [];
		this.virtualBlocks = [];
		this.locked = true;
		return newBlocks;
	}
	,removeRow: function(r) {
		var sq;
		var sq1;
		var posInt;
		var found = [];
		var lr = 0;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			sq1 = this.blocks[_g1++];
			if(sq1 != null) {
				if(sq1.hasTriangles()) {
					posInt = sq1.getCentreInt();
					if(posInt.y == r) {
						found[lr++] = sq1;
					}
				}
			}
		}
		while(found.length != 0) {
			sq = found.pop();
			HxOverrides.remove(this.blocks,sq);
			sq.destroy();
			sq = null;
		}
		this.moveRowsDown(r);
	}
	,findRow: function(r) {
		var sq;
		var posInt;
		var found = [];
		var lr = 0;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			sq = this.blocks[_g1++];
			if(sq != null) {
				if(sq.hasTriangles()) {
					posInt = sq.getCentreInt();
					if(posInt.y == r) {
						found[lr++] = sq;
					}
				}
			}
		}
		return found;
	}
	,moveRowsDown: function(end) {
		var sq;
		var posInt;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			sq = this.blocks[_g1++];
			posInt = sq.getCentreInt();
			if(posInt.y < end) {
				sq.moveDelta(0,this.dia);
			}
		}
	}
	,rotate: function(theta) {
		this.angle += theta;
		this.rook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this.angle);
		var l = this.blocks.length;
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var offset;
		if(this.snapped != null) {
			switch(this.snapped[1]) {
			case 0:
				this.offsetX(0);
				break;
			case 1:case 2:
				offset = -(this.dia / 2) * cos;
				this.offsetX(offset);
				break;
			case 3:
				offset = this.dia / 2 * cos;
				this.offsetX(offset);
				break;
			}
		}
		var cos1 = Math.cos(Math.PI / 2);
		var sin1 = Math.sin(Math.PI / 2);
		if(polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this.rook) != this.lastRook) {
			var l1 = this.virtualBlocks.length;
			var _g1 = 0;
			while(_g1 < l1) {
				var _this = this.virtualBlocks[_g1++];
				var p = this.centre;
				var _this1 = _this.t0;
				var px = p.x;
				var py = p.y;
				_this1.ax -= px;
				_this1.ay -= py;
				_this1.bx -= px;
				_this1.by -= py;
				_this1.cx -= px;
				_this1.cy -= py;
				var dx;
				var dy;
				dx = _this1.ax;
				dy = _this1.ay;
				_this1.ax = dx * cos1 - dy * sin1;
				_this1.ay = dx * sin1 + dy * cos1;
				dx = _this1.bx;
				dy = _this1.by;
				_this1.bx = dx * cos1 - dy * sin1;
				_this1.by = dx * sin1 + dy * cos1;
				dx = _this1.cx;
				dy = _this1.cy;
				_this1.cx = dx * cos1 - dy * sin1;
				_this1.cy = dx * sin1 + dy * cos1;
				_this1.ax += px;
				_this1.ay += py;
				_this1.bx += px;
				_this1.by += py;
				_this1.cx += px;
				_this1.cy += py;
				var _this2 = _this.t1;
				var px1 = p.x;
				var py1 = p.y;
				_this2.ax -= px1;
				_this2.ay -= py1;
				_this2.bx -= px1;
				_this2.by -= py1;
				_this2.cx -= px1;
				_this2.cy -= py1;
				var dx1;
				var dy1;
				dx1 = _this2.ax;
				dy1 = _this2.ay;
				_this2.ax = dx1 * cos1 - dy1 * sin1;
				_this2.ay = dx1 * sin1 + dy1 * cos1;
				dx1 = _this2.bx;
				dy1 = _this2.by;
				_this2.bx = dx1 * cos1 - dy1 * sin1;
				_this2.by = dx1 * sin1 + dy1 * cos1;
				dx1 = _this2.cx;
				dy1 = _this2.cy;
				_this2.cx = dx1 * cos1 - dy1 * sin1;
				_this2.cy = dx1 * sin1 + dy1 * cos1;
				_this2.ax += px1;
				_this2.ay += py1;
				_this2.bx += px1;
				_this2.by += py1;
				_this2.cx += px1;
				_this2.cy += py1;
			}
		}
		var _g11 = 0;
		while(_g11 < l) {
			var _this3 = this.blocks[_g11++];
			var p1 = this.centre;
			var _this4 = _this3.t0;
			var px2 = p1.x;
			var py2 = p1.y;
			_this4.ax -= px2;
			_this4.ay -= py2;
			_this4.bx -= px2;
			_this4.by -= py2;
			_this4.cx -= px2;
			_this4.cy -= py2;
			var dx2;
			var dy2;
			dx2 = _this4.ax;
			dy2 = _this4.ay;
			_this4.ax = dx2 * cos - dy2 * sin;
			_this4.ay = dx2 * sin + dy2 * cos;
			dx2 = _this4.bx;
			dy2 = _this4.by;
			_this4.bx = dx2 * cos - dy2 * sin;
			_this4.by = dx2 * sin + dy2 * cos;
			dx2 = _this4.cx;
			dy2 = _this4.cy;
			_this4.cx = dx2 * cos - dy2 * sin;
			_this4.cy = dx2 * sin + dy2 * cos;
			_this4.ax += px2;
			_this4.ay += py2;
			_this4.bx += px2;
			_this4.by += py2;
			_this4.cx += px2;
			_this4.cy += py2;
			var _this5 = _this3.t1;
			var px3 = p1.x;
			var py3 = p1.y;
			_this5.ax -= px3;
			_this5.ay -= py3;
			_this5.bx -= px3;
			_this5.by -= py3;
			_this5.cx -= px3;
			_this5.cy -= py3;
			var dx3;
			var dy3;
			dx3 = _this5.ax;
			dy3 = _this5.ay;
			_this5.ax = dx3 * cos - dy3 * sin;
			_this5.ay = dx3 * sin + dy3 * cos;
			dx3 = _this5.bx;
			dy3 = _this5.by;
			_this5.bx = dx3 * cos - dy3 * sin;
			_this5.by = dx3 * sin + dy3 * cos;
			dx3 = _this5.cx;
			dy3 = _this5.cy;
			_this5.cx = dx3 * cos - dy3 * sin;
			_this5.cy = dx3 * sin + dy3 * cos;
			_this5.ax += px3;
			_this5.ay += py3;
			_this5.bx += px3;
			_this5.by += py3;
			_this5.cx += px3;
			_this5.cy += py3;
		}
		this.lastRook = this.rook;
	}
	,rotateVirtual: function(rook) {
		var cos = Math.cos(Math.PI / 2);
		var sin = Math.sin(Math.PI / 2);
		if(polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(rook) != this.lastRook) {
			var l = this.virtualBlocks.length;
			var _g1 = 0;
			while(_g1 < l) {
				var _this = this.virtualBlocks[_g1++];
				var p = this.centre;
				var _this1 = _this.t0;
				var px = p.x;
				var py = p.y;
				_this1.ax -= px;
				_this1.ay -= py;
				_this1.bx -= px;
				_this1.by -= py;
				_this1.cx -= px;
				_this1.cy -= py;
				var dx;
				var dy;
				dx = _this1.ax;
				dy = _this1.ay;
				_this1.ax = dx * cos - dy * sin;
				_this1.ay = dx * sin + dy * cos;
				dx = _this1.bx;
				dy = _this1.by;
				_this1.bx = dx * cos - dy * sin;
				_this1.by = dx * sin + dy * cos;
				dx = _this1.cx;
				dy = _this1.cy;
				_this1.cx = dx * cos - dy * sin;
				_this1.cy = dx * sin + dy * cos;
				_this1.ax += px;
				_this1.ay += py;
				_this1.bx += px;
				_this1.by += py;
				_this1.cx += px;
				_this1.cy += py;
				var _this2 = _this.t1;
				var px1 = p.x;
				var py1 = p.y;
				_this2.ax -= px1;
				_this2.ay -= py1;
				_this2.bx -= px1;
				_this2.by -= py1;
				_this2.cx -= px1;
				_this2.cy -= py1;
				var dx1;
				var dy1;
				dx1 = _this2.ax;
				dy1 = _this2.ay;
				_this2.ax = dx1 * cos - dy1 * sin;
				_this2.ay = dx1 * sin + dy1 * cos;
				dx1 = _this2.bx;
				dy1 = _this2.by;
				_this2.bx = dx1 * cos - dy1 * sin;
				_this2.by = dx1 * sin + dy1 * cos;
				dx1 = _this2.cx;
				dy1 = _this2.cy;
				_this2.cx = dx1 * cos - dy1 * sin;
				_this2.cy = dx1 * sin + dy1 * cos;
				_this2.ax += px1;
				_this2.ay += py1;
				_this2.bx += px1;
				_this2.by += py1;
				_this2.cx += px1;
				_this2.cy += py1;
			}
		}
	}
	,rookSnapping: function(cos,sin) {
		var offset;
		if(this.snapped != null) {
			switch(this.snapped[1]) {
			case 0:
				this.offsetX(0);
				break;
			case 1:case 2:
				offset = -(this.dia / 2) * cos;
				this.offsetX(offset);
				break;
			case 3:
				offset = this.dia / 2 * cos;
				this.offsetX(offset);
				break;
			}
		}
	}
	,offsetX: function(ox) {
		this.centre.x = this.start.x + ox;
	}
	,snap: function() {
		var beta;
		if(this.angle < 0) {
			beta = -this.angle + 180;
		}
		beta = this.angle % (2 * Math.PI);
		this.rotate(this.rook - beta);
		var newLoc;
		var _g1 = 0;
		var _g = this.lastLocation.length;
		while(_g1 < _g) {
			var i = _g1++;
			newLoc = this.newLocation[i];
			this.blocks[i].set_x(newLoc.x * this.dia);
			this.blocks[i].set_y(newLoc.y * this.dia);
			this.virtualBlocks[i].set_x(newLoc.x * this.dia);
			this.virtualBlocks[i].set_y(newLoc.y * this.dia);
		}
	}
	,getPoints: function(points) {
		var l = this.blocks.length;
		var _g1 = 0;
		while(_g1 < l) this.blocks[_g1++].getPoints(points);
		return points;
	}
	,moveX: function(dx) {
		this.start.x += dx;
		var l = this.blocks.length;
		var _g1 = 0;
		while(_g1 < l) this.blocks[_g1++].moveDelta(dx,0.);
		var _g11 = 0;
		while(_g11 < l) this.virtualBlocks[_g11++].moveDelta(dx,0.);
	}
	,moveDelta: function(dx,dy) {
		if(this.blocks.length == 0) {
			return;
		}
		if(this.blocks == null) {
			return;
		}
		this.centre.x += dx;
		this.centre.y += dy;
		var l = this.blocks.length;
		var _g1 = 0;
		while(_g1 < l) this.blocks[_g1++].moveDelta(dx,dy);
		var _g11 = 0;
		while(_g11 < l) this.virtualBlocks[_g11++].moveDelta(dx,dy);
	}
	,hitInt: function(p) {
		var out = false;
		var l = this.virtualBlocks.length;
		var p2;
		var _g1 = 0;
		while(_g1 < l) {
			p2 = this.virtualBlocks[_g1++].getCentreInt();
			if(p2.x == p.x && p2.y == p.y) {
				out = true;
				break;
			}
		}
		return out;
	}
	,lastLocation: null
	,newLocation: null
	,getLocation: function() {
		this.lastLocation = this.newLocation;
		var arr = [];
		this.newLocation = arr;
		if(this.locked) {
			return arr;
		}
		return this.getVirtualCentreInt(this.newLocation);
	}
	,getLocationNew: function() {
		this.lastLocation = this.newLocation;
		var arr = [];
		this.newLocation = arr;
		if(this.locked) {
			return arr;
		}
		return this.getCentreInt(this.newLocation);
	}
	,getCentreInt: function(centresInt) {
		var l = this.blocks.length;
		var lc = centresInt.length;
		if(this.locked) {
			return centresInt;
		}
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			centresInt[i + lc] = this.blocks[i].getCentreInt();
		}
		return centresInt;
	}
	,getVirtualCentreInt: function(virtualInt) {
		var l = this.virtualBlocks.length;
		if(this.locked) {
			return virtualInt;
		}
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			virtualInt[i] = this.virtualBlocks[i].getCentreInt();
		}
		return virtualInt;
	}
	,__class__: polyominoTriangles_game_Shape
};
var polyominoTriangles_game_ShapeGenerator = function(createShape) {
	this.random = 0;
	this.last = -1;
	this.templates = new polyominoTriangles_game_Templates(createShape);
};
polyominoTriangles_game_ShapeGenerator.__name__ = ["polyominoTriangles","game","ShapeGenerator"];
polyominoTriangles_game_ShapeGenerator.prototype = {
	templates: null
	,abc: null
	,last: null
	,random: null
	,randomShape: function(p,col0_,col1_,shape) {
		if(shape == null) {
			shape = "polyomino_random";
		}
		var ts;
		if(shape == null) {
			if(shape == null) {
				var ts1 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts1.addBlock(-1,-1);
				ts1.addBlock(0,-1);
				ts1.addBlock(-1,0);
				ts1.addBlock(0,0);
				ts = ts1;
			} else {
				switch(shape) {
				case "polyomino_L":
					var ts2 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
					ts2.addBlock(-1,-1.5);
					ts2.addBlock(-1,-0.5);
					ts2.addBlock(-1,0.5);
					ts2.addBlock(0,0.5);
					ts = ts2;
					break;
				case "polyomino_Z":
					var ts3 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
					ts3.addBlock(-0.5,-1);
					ts3.addBlock(0.5,0);
					ts3.addBlock(0.5,-1);
					ts3.addBlock(1.5,0);
					ts = ts3;
					break;
				case "polyomino_box":
					var ts4 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
					ts4.addBlock(-1,-1);
					ts4.addBlock(0,-1);
					ts4.addBlock(-1,0);
					ts4.addBlock(0,0);
					ts = ts4;
					break;
				case "polyomino_l":
					var ts5 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
					ts5.addBlock(-0.5,-2);
					ts5.addBlock(-0.5,-1);
					ts5.addBlock(-0.5,0);
					ts5.addBlock(-0.5,1);
					ts = ts5;
					break;
				case "polyomino_t":
					var ts6 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
					ts6.addBlock(-1,-1.5);
					ts6.addBlock(-1,-0.5);
					ts6.addBlock(-1,0.5);
					ts6.addBlock(0,-0.5);
					ts = ts6;
					break;
				default:
					var ts7 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
					ts7.addBlock(-1,-1);
					ts7.addBlock(0,-1);
					ts7.addBlock(-1,0);
					ts7.addBlock(0,0);
					ts = ts7;
				}
			}
		} else if(shape == "polyomino_random") {
			var random = Math.round(4 * Math.random());
			haxe_Log.trace(random,{ fileName : "ShapeGenerator.hx", lineNumber : 47, className : "polyominoTriangles.game.ShapeGenerator", methodName : "randomShape"});
			if(random == this.last) {
				return this.randomShape(p,col0_,col1_);
			}
			switch(random) {
			case 0:
				var ts8 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts8.addBlock(-0.5,-1);
				ts8.addBlock(0.5,0);
				ts8.addBlock(0.5,-1);
				ts8.addBlock(1.5,0);
				ts = ts8;
				ts = ts8;
				break;
			case 1:
				var ts9 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts9.addBlock(-1,-1.5);
				ts9.addBlock(-1,-0.5);
				ts9.addBlock(-1,0.5);
				ts9.addBlock(0,0.5);
				ts = ts9;
				ts = ts9;
				break;
			case 2:
				var ts10 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts10.addBlock(-1,-1);
				ts10.addBlock(0,-1);
				ts10.addBlock(-1,0);
				ts10.addBlock(0,0);
				ts = ts10;
				ts = ts10;
				break;
			case 3:
				var ts11 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts11.addBlock(-1,-1.5);
				ts11.addBlock(-1,-0.5);
				ts11.addBlock(-1,0.5);
				ts11.addBlock(0,-0.5);
				ts = ts11;
				ts = ts11;
				break;
			case 4:
				var ts12 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
				ts12.addBlock(-0.5,-2);
				ts12.addBlock(-0.5,-1);
				ts12.addBlock(-0.5,0);
				ts12.addBlock(-0.5,1);
				ts = ts12;
				ts = ts12;
				break;
			default:
				var ts13 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts13.addBlock(-0.5,-1);
				ts13.addBlock(0.5,0);
				ts13.addBlock(0.5,-1);
				ts13.addBlock(1.5,0);
				ts = ts13;
				ts = ts13;
			}
		} else if(shape == null) {
			var ts14 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
			ts14.addBlock(-1,-1);
			ts14.addBlock(0,-1);
			ts14.addBlock(-1,0);
			ts14.addBlock(0,0);
			ts = ts14;
		} else {
			switch(shape) {
			case "polyomino_L":
				var ts15 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts15.addBlock(-1,-1.5);
				ts15.addBlock(-1,-0.5);
				ts15.addBlock(-1,0.5);
				ts15.addBlock(0,0.5);
				ts = ts15;
				break;
			case "polyomino_Z":
				var ts16 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts16.addBlock(-0.5,-1);
				ts16.addBlock(0.5,0);
				ts16.addBlock(0.5,-1);
				ts16.addBlock(1.5,0);
				ts = ts16;
				break;
			case "polyomino_box":
				var ts17 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts17.addBlock(-1,-1);
				ts17.addBlock(0,-1);
				ts17.addBlock(-1,0);
				ts17.addBlock(0,0);
				ts = ts17;
				break;
			case "polyomino_l":
				var ts18 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
				ts18.addBlock(-0.5,-2);
				ts18.addBlock(-0.5,-1);
				ts18.addBlock(-0.5,0);
				ts18.addBlock(-0.5,1);
				ts = ts18;
				break;
			case "polyomino_t":
				var ts19 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts19.addBlock(-1,-1.5);
				ts19.addBlock(-1,-0.5);
				ts19.addBlock(-1,0.5);
				ts19.addBlock(0,-0.5);
				ts = ts19;
				break;
			default:
				var ts20 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts20.addBlock(-1,-1);
				ts20.addBlock(0,-1);
				ts20.addBlock(-1,0);
				ts20.addBlock(0,0);
				ts = ts20;
			}
		}
		this.last = this.random;
		return ts;
	}
	,__class__: polyominoTriangles_game_ShapeGenerator
};
var polyominoTriangles_game_Square = function(id,triangles_,x_,y_,dia_,gap_,col0_,col1_) {
	this._x = x_;
	this._y = y_;
	this.col0 = col0_;
	this.col1 = col1_;
	this.dia = dia_;
	this.gap = 0.;
	this._x2 = x_ + dia_;
	this._y2 = y_ + dia_;
	var x2 = this._x2;
	var y2 = this._y2;
	this.triangles = triangles_;
	var l = triangles_.length;
	this.t0 = new justTriangles_Triangle(id,true,{ x : x_, y : y_},{ x : x2, y : y_},{ x : x_, y : y2},0,this.col0);
	this.t1 = new justTriangles_Triangle(id,true,{ x : x_, y : y2},{ x : x2, y : y_},{ x : x2, y : y2},0,this.col1);
	this.triangles[l++] = this.t0;
	this.triangles[l++] = this.t1;
};
polyominoTriangles_game_Square.__name__ = ["polyominoTriangles","game","Square"];
polyominoTriangles_game_Square.squareClose = function(s0,s1,diaSq) {
	var dx = s0.t0.bx;
	var dy = s0.t0.by;
	var ex = s0.t0.cx;
	var ey = s0.t0.cy;
	var dx1 = s1.t0.bx;
	var dy1 = s1.t0.by;
	var ex1 = s1.t0.cx;
	var ey1 = s1.t0.cy;
	var dx2 = (dx < ex ? dx + (ex - dx) / 2 : ex + (dx - ex) / 2) - (dx1 < ex1 ? dx1 + (ex1 - dx1) / 2 : ex1 + (dx1 - ex1) / 2);
	var dy2 = (dy < ey ? dy + (ey - dy) / 2 : dy + (dy - ey) / 2 - s0.dia) - (dy1 < ey1 ? dy1 + (ey1 - dy1) / 2 : dy1 + (dy1 - ey1) / 2 - s1.dia);
	return dx2 * dx2 + dy2 * dy2 < diaSq;
};
polyominoTriangles_game_Square.prototype = {
	t0: null
	,t1: null
	,id: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,_x: null
	,_y: null
	,_x2: null
	,_y2: null
	,triangles: null
	,destroy: function() {
		this.removeTriangles();
		this.t0 = null;
		this.t1 = null;
	}
	,removeTriangles: function() {
		HxOverrides.remove(this.triangles,this.t0);
		HxOverrides.remove(this.triangles,this.t1);
	}
	,changeColor: function(col0_,col1_) {
		this.col0 = col0_;
		this.col1 = col1_;
		this.t0.colorID = col0_;
		this.t1.colorID = col1_;
		this.t0.colorA = col0_;
		this.t0.colorB = col0_;
		this.t0.colorC = col0_;
		this.t1.colorA = col1_;
		this.t1.colorB = col1_;
		this.t1.colorC = col1_;
	}
	,getPoints: function(arr) {
		var l = arr.length;
		arr[l++] = { x : this.t0.ax, y : this.t0.ay};
		arr[l++] = { x : this.t0.bx, y : this.t0.by};
		arr[l++] = { x : this.t0.cx, y : this.t0.cy};
		arr[l++] = { x : this.t1.ax, y : this.t1.ay};
		arr[l++] = { x : this.t1.bx, y : this.t1.by};
		arr[l++] = { x : this.t1.cx, y : this.t1.cy};
		return arr;
	}
	,moveDelta: function(dx,dy) {
		var _this = this.t0;
		_this.ax += dx;
		_this.ay += dy;
		_this.bx += dx;
		_this.by += dy;
		_this.cx += dx;
		_this.cy += dy;
		var _this1 = this.t1;
		_this1.ax += dx;
		_this1.ay += dy;
		_this1.bx += dx;
		_this1.by += dy;
		_this1.cx += dx;
		_this1.cy += dy;
	}
	,rotateAroundTheta: function(p,theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var _this = this.t0;
		var px = p.x;
		var py = p.y;
		_this.ax -= px;
		_this.ay -= py;
		_this.bx -= px;
		_this.by -= py;
		_this.cx -= px;
		_this.cy -= py;
		var dx;
		var dy;
		dx = _this.ax;
		dy = _this.ay;
		_this.ax = dx * cos - dy * sin;
		_this.ay = dx * sin + dy * cos;
		dx = _this.bx;
		dy = _this.by;
		_this.bx = dx * cos - dy * sin;
		_this.by = dx * sin + dy * cos;
		dx = _this.cx;
		dy = _this.cy;
		_this.cx = dx * cos - dy * sin;
		_this.cy = dx * sin + dy * cos;
		_this.ax += px;
		_this.ay += py;
		_this.bx += px;
		_this.by += py;
		_this.cx += px;
		_this.cy += py;
		var _this1 = this.t1;
		var px1 = p.x;
		var py1 = p.y;
		_this1.ax -= px1;
		_this1.ay -= py1;
		_this1.bx -= px1;
		_this1.by -= py1;
		_this1.cx -= px1;
		_this1.cy -= py1;
		var dx1;
		var dy1;
		dx1 = _this1.ax;
		dy1 = _this1.ay;
		_this1.ax = dx1 * cos - dy1 * sin;
		_this1.ay = dx1 * sin + dy1 * cos;
		dx1 = _this1.bx;
		dy1 = _this1.by;
		_this1.bx = dx1 * cos - dy1 * sin;
		_this1.by = dx1 * sin + dy1 * cos;
		dx1 = _this1.cx;
		dy1 = _this1.cy;
		_this1.cx = dx1 * cos - dy1 * sin;
		_this1.cy = dx1 * sin + dy1 * cos;
		_this1.ax += px1;
		_this1.ay += py1;
		_this1.bx += px1;
		_this1.by += py1;
		_this1.cx += px1;
		_this1.cy += py1;
	}
	,rotateAround: function(p,cos,sin) {
		var _this = this.t0;
		var px = p.x;
		var py = p.y;
		_this.ax -= px;
		_this.ay -= py;
		_this.bx -= px;
		_this.by -= py;
		_this.cx -= px;
		_this.cy -= py;
		var dx;
		var dy;
		dx = _this.ax;
		dy = _this.ay;
		_this.ax = dx * cos - dy * sin;
		_this.ay = dx * sin + dy * cos;
		dx = _this.bx;
		dy = _this.by;
		_this.bx = dx * cos - dy * sin;
		_this.by = dx * sin + dy * cos;
		dx = _this.cx;
		dy = _this.cy;
		_this.cx = dx * cos - dy * sin;
		_this.cy = dx * sin + dy * cos;
		_this.ax += px;
		_this.ay += py;
		_this.bx += px;
		_this.by += py;
		_this.cx += px;
		_this.cy += py;
		var _this1 = this.t1;
		var px1 = p.x;
		var py1 = p.y;
		_this1.ax -= px1;
		_this1.ay -= py1;
		_this1.bx -= px1;
		_this1.by -= py1;
		_this1.cx -= px1;
		_this1.cy -= py1;
		var dx1;
		var dy1;
		dx1 = _this1.ax;
		dy1 = _this1.ay;
		_this1.ax = dx1 * cos - dy1 * sin;
		_this1.ay = dx1 * sin + dy1 * cos;
		dx1 = _this1.bx;
		dy1 = _this1.by;
		_this1.bx = dx1 * cos - dy1 * sin;
		_this1.by = dx1 * sin + dy1 * cos;
		dx1 = _this1.cx;
		dy1 = _this1.cy;
		_this1.cx = dx1 * cos - dy1 * sin;
		_this1.cy = dx1 * sin + dy1 * cos;
		_this1.ax += px1;
		_this1.ay += py1;
		_this1.bx += px1;
		_this1.by += py1;
		_this1.cx += px1;
		_this1.cy += py1;
	}
	,hasTriangles: function() {
		if(this.t0 != null) {
			return this.t1 != null;
		} else {
			return false;
		}
	}
	,getCentre: function() {
		var dx = this.t0.bx;
		var dy = this.t0.by;
		var ex = this.t0.cx;
		var ey = this.t0.cy;
		return { x : dx < ex ? dx + (ex - dx) / 2 : ex + (dx - ex) / 2, y : dy < ey ? dy + (ey - dy) / 2 : dy + (dy - ey) / 2 - this.dia};
	}
	,getCentreInt: function() {
		var dx = this.t0.bx;
		var dy = this.t0.by;
		var ex = this.t0.cx;
		var ey = this.t0.cy;
		return { x : (dx < ex ? dx + (ex - dx) / 2 : ex + (dx - ex) / 2) / this.dia | 0, y : (dy < ey ? dy + (ey - dy) / 2 : dy + (dy - ey) / 2 - this.dia) / this.dia | 0};
	}
	,get_right: function() {
		return Math.max(this.t0.get_right(),this.t1.get_right());
	}
	,get_bottom: function() {
		return Math.max(this.t0.get_bottom(),this.t1.get_bottom());
	}
	,get_x: function() {
		return Math.min(this.t0.get_x(),this.t1.get_x());
	}
	,set_x: function(x_) {
		var x0 = this.t0.get_x();
		var x1 = this.t1.get_x();
		if(x0 < x1) {
			this.t0.set_x(x_);
			var _g = this.t1;
			_g.set_x(_g.get_x() + (x_ - x0));
		} else {
			this.t1.set_x(x_);
			var _g1 = this.t0;
			_g1.set_x(_g1.get_x() + (x_ - x1));
		}
		this._x = x_;
		return x_;
	}
	,get_y: function() {
		return Math.min(this.t0.get_y(),this.t1.get_y());
	}
	,set_y: function(y_) {
		var y0 = this.t0.get_y();
		var y1 = this.t1.get_y();
		if(y0 < y1) {
			this.t0.set_y(y_);
			var _g = this.t1;
			_g.set_y(_g.get_y() + (y_ - y0));
		} else {
			this.t1.set_y(y_);
			var _g1 = this.t0;
			_g1.set_y(_g1.get_y() + (y_ - y1));
		}
		this._y = y_;
		return y_;
	}
	,hitTest: function(p) {
		if(!this.t0.hitTest(p)) {
			return this.t1.hitTest(p);
		} else {
			return true;
		}
	}
	,__class__: polyominoTriangles_game_Square
};
var polyominoTriangles_game_Templates = function(createPolyomino_) {
	this.createPolyomino = createPolyomino_;
};
polyominoTriangles_game_Templates.__name__ = ["polyominoTriangles","game","Templates"];
polyominoTriangles_game_Templates.prototype = {
	createPolyomino: null
	,Z: function(p) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
		ts.addBlock(-0.5,-1);
		ts.addBlock(0.5,0);
		ts.addBlock(0.5,-1);
		ts.addBlock(1.5,0);
		return ts;
	}
	,l: function(p) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
		ts.addBlock(-0.5,-2);
		ts.addBlock(-0.5,-1);
		ts.addBlock(-0.5,0);
		ts.addBlock(-0.5,1);
		return ts;
	}
	,box: function(p) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
		ts.addBlock(-1,-1);
		ts.addBlock(0,-1);
		ts.addBlock(-1,0);
		ts.addBlock(0,0);
		return ts;
	}
	,L: function(p) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
		ts.addBlock(-1,-1.5);
		ts.addBlock(-1,-0.5);
		ts.addBlock(-1,0.5);
		ts.addBlock(0,0.5);
		return ts;
	}
	,t: function(p) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
		ts.addBlock(-1,-1.5);
		ts.addBlock(-1,-0.5);
		ts.addBlock(-1,0.5);
		ts.addBlock(0,-0.5);
		return ts;
	}
	,bottom: function(p,wide) {
		var ts = this.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
		var _g1 = 0;
		while(_g1 < wide) ts.addBlock(_g1++,0,false,true);
		return ts;
	}
	,__class__: polyominoTriangles_game_Templates
};
var polyominoTriangles_test_Arr2DTest = function() {
	haxe_unit_TestCase.call(this);
};
polyominoTriangles_test_Arr2DTest.__name__ = ["polyominoTriangles","test","Arr2DTest"];
polyominoTriangles_test_Arr2DTest.UnitTest = function() {
	var r = new haxe_unit_TestRunner();
	haxe_Log.trace("Running unit test",{ fileName : "Arr2DTest.hx", lineNumber : 8, className : "polyominoTriangles.test.Arr2DTest", methodName : "UnitTest"});
	r.add(new polyominoTriangles_test_Arr2DTest());
	r.run();
	haxe_Log.trace(r,{ fileName : "Arr2DTest.hx", lineNumber : 11, className : "polyominoTriangles.test.Arr2DTest", methodName : "UnitTest"});
};
polyominoTriangles_test_Arr2DTest.__super__ = haxe_unit_TestCase;
polyominoTriangles_test_Arr2DTest.prototype = $extend(haxe_unit_TestCase.prototype,{
	filledArr2D: null
	,emptyArr2D: null
	,testClear: function() {
		var w = this.filledArr2D[0];
		var h = this.filledArr2D[1];
		var v = null;
		var this1;
		if(v == null) {
			if(w == null) {
				w = 100;
			}
			if(h == null) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.filledArr2D = this1;
		this.assertTrue(this.filledArr2D.toString() == this.emptyArr2D.toString(),{ fileName : "Arr2DTest.hx", lineNumber : 15, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClear"});
	}
	,testFill: function() {
		var this1 = this.emptyArr2D;
		var i = 2;
		var l = this1.length;
		while(i < l) {
			this1[i] = 1;
			++i;
		}
		this.assertTrue(this.filledArr2D.toString() == this.emptyArr2D.toString(),{ fileName : "Arr2DTest.hx", lineNumber : 19, className : "polyominoTriangles.test.Arr2DTest", methodName : "testFill"});
	}
	,testAddOne: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		this.assertTrue(this2[2 + this2[0] * 0 | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 23, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddOne"});
		var this3 = this.emptyArr2D;
		this.assertFalse(this3[2 + this3[0] | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 24, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddOne"});
	}
	,testAddZero: function() {
		var this1 = this.filledArr2D;
		this1[2 + this1[0] * 0 | 0] = 0;
		var this2 = this.filledArr2D;
		this.assertTrue(this2[2 + this2[0] * 0 | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 28, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddZero"});
		var this3 = this.filledArr2D;
		this.assertFalse(this3[2 + this3[0] | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 29, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddZero"});
	}
	,testIsZero: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var ix = _g1++;
				var this1 = this.emptyArr2D;
				this.assertTrue(this1[2 + this1[0] * iy + ix | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 34, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsZero"});
				var this2 = this.filledArr2D;
				this.assertFalse(this2[2 + this2[0] * iy + ix | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 35, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsZero"});
			}
		}
	}
	,testIsOne: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var ix = _g1++;
				var this1 = this.emptyArr2D;
				this.assertFalse(this1[2 + this1[0] * iy + ix | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 42, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsOne"});
				var this2 = this.filledArr2D;
				this.assertTrue(this2[2 + this2[0] * iy + ix | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 43, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsOne"});
			}
		}
	}
	,testLength: function() {
		this.assertTrue(this.filledArr2D.length == 11,{ fileName : "Arr2DTest.hx", lineNumber : 48, className : "polyominoTriangles.test.Arr2DTest", methodName : "testLength"});
	}
	,testRowFull: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var this1 = this.emptyArr2D;
			this1[2 + this1[0] * iy | 0] = 1;
			var this2 = this.emptyArr2D;
			this2[2 + this2[0] * iy + 1 | 0] = 1;
			var this3 = this.emptyArr2D;
			this3[2 + this3[0] * iy + 2 | 0] = 1;
			var this4 = this.emptyArr2D;
			var w = this4[0];
			var s = 2 + w * iy | 0;
			var e = s + w;
			var ful = true;
			var _g1 = s;
			while(_g1 < e) if(this4[_g1++] == 0) {
				ful = false;
				break;
			}
			this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 55, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowFull"});
			this.setup();
		}
		var _g2 = 0;
		while(_g2 < 3) {
			var iy1 = _g2++;
			var this5 = this.filledArr2D;
			this5[2 + this5[0] * iy1 | 0] = 0;
			var this6 = this.filledArr2D;
			this6[2 + this6[0] * iy1 + 1 | 0] = 0;
			var this7 = this.filledArr2D;
			this7[2 + this7[0] * iy1 + 2 | 0] = 0;
			var this8 = this.filledArr2D;
			var w1 = this8[0];
			var s1 = 2 + w1 * iy1 | 0;
			var e1 = s1 + w1;
			var ful1 = true;
			var _g11 = s1;
			while(_g11 < e1) if(this8[_g11++] == 0) {
				ful1 = false;
				break;
			}
			this.assertFalse(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 62, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowFull"});
			this.setup();
		}
	}
	,testMoveRow: function() {
		var this1 = this.filledArr2D;
		var w = this1[0];
		var s0 = 2 + w | 0;
		var e0 = 2 + w * 2 | 0;
		var _g1 = 0;
		while(_g1 < w) {
			var i = _g1++;
			this1[e0 + i] = this1[s0 + i];
			this1[s0 + i] = 0;
		}
		var this2 = this.filledArr2D;
		var w1 = this2[0];
		var s = 2 + w1 * 0 | 0;
		var e = s + w1;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 68, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
		var this3 = this.filledArr2D;
		var w2 = this3[0];
		var s1 = 2 + w2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this3[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertFalse(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 69, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
		var this4 = this.filledArr2D;
		var w3 = this4[0];
		var s2 = 2 + w3 * 2 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this4[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertTrue(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 70, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
	}
	,testCopyRow: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] + 1 | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] + 2 | 0] = 1;
		var this4 = this.emptyArr2D;
		var w = this4[0];
		var s0 = 2 + w | 0;
		var e0 = 2 + w * 2 | 0;
		var _g1 = 0;
		while(_g1 < w) {
			var i = _g1++;
			this4[e0 + i] = this4[s0 + i];
		}
		var this5 = this.emptyArr2D;
		var w1 = this5[0];
		var s = 2 + w1 * 0 | 0;
		var e = s + w1;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this5[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertFalse(ful,{ fileName : "Arr2DTest.hx", lineNumber : 77, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
		var this6 = this.emptyArr2D;
		var w2 = this6[0];
		var s1 = 2 + w2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this6[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 78, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
		var this7 = this.emptyArr2D;
		var w3 = this7[0];
		var s2 = 2 + w3 * 2 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this7[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertTrue(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 79, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
	}
	,testOneRow: function() {
		var this1 = this.emptyArr2D;
		var w = this1[0];
		var s = 2 + w | 0;
		var _g1 = 0;
		while(_g1 < w) this1[s + _g1++] = 1;
		var this2 = this.emptyArr2D;
		var w1 = this2[0];
		var s1 = 2 + w1 | 0;
		var e = s1 + w1;
		var ful = true;
		var _g11 = s1;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 83, className : "polyominoTriangles.test.Arr2DTest", methodName : "testOneRow"});
	}
	,testZeroRow: function() {
		var this1 = this.filledArr2D;
		var w = this1[0];
		var s = 2 + w | 0;
		var _g1 = 0;
		while(_g1 < w) this1[s + _g1++] = 0;
		var this2 = this.filledArr2D;
		var w1 = this2[0];
		var s1 = 2 + w1 | 0;
		var e = s1 + w1;
		var emp = true;
		var _g11 = s1;
		while(_g11 < e) if(this2[_g11++] == 1) {
			emp = false;
			break;
		}
		this.assertTrue(emp,{ fileName : "Arr2DTest.hx", lineNumber : 87, className : "polyominoTriangles.test.Arr2DTest", methodName : "testZeroRow"});
	}
	,testRemoveRowsUnshift0: function() {
		var this1 = this.filledArr2D;
		this1[2 + this1[0] + 1 | 0] = 0;
		var this2 = this.filledArr2D;
		this2[2 + this2[0] * 2 + 1 | 0] = 0;
		var this3 = this.filledArr2D;
		var _g1 = 0;
		while(_g1 < 1) {
			var j = 0 - _g1++;
			var w = this3[0];
			var s0 = 2 + w * j | 0;
			var e0 = 2 + w * (j + 2) | 0;
			var _g11 = 0;
			while(_g11 < w) {
				var i = _g11++;
				this3[e0 + i] = this3[s0 + i];
				this3[s0 + i] = 0;
			}
		}
		var _g12 = 0;
		while(_g12 < 2) {
			var w1 = this3[0];
			var s = 2 + w1 * _g12++ | 0;
			var _g13 = 0;
			while(_g13 < w1) this3[s + _g13++] = 0;
		}
		var this4 = this.filledArr2D;
		var w2 = this4[0];
		var s1 = 2 + w2 * 0 | 0;
		var e = s1 + w2;
		var emp = true;
		var _g14 = s1;
		while(_g14 < e) if(this4[_g14++] == 1) {
			emp = false;
			break;
		}
		this.assertTrue(emp,{ fileName : "Arr2DTest.hx", lineNumber : 93, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
		var this5 = this.filledArr2D;
		var w3 = this5[0];
		var s2 = 2 + w3 | 0;
		var e1 = s2 + w3;
		var emp1 = true;
		var _g15 = s2;
		while(_g15 < e1) if(this5[_g15++] == 1) {
			emp1 = false;
			break;
		}
		this.assertTrue(emp1,{ fileName : "Arr2DTest.hx", lineNumber : 94, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
		var this6 = this.filledArr2D;
		var w4 = this6[0];
		var s3 = 2 + w4 * 2 | 0;
		var e2 = s3 + w4;
		var ful = true;
		var _g16 = s3;
		while(_g16 < e2) if(this6[_g16++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 95, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
	}
	,testClash: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] * 2 | 0] = 1;
		var a2 = [{ x : 1, y : 0},{ x : 1, y : 1},{ x : 1, y : 2}];
		var this4 = this.emptyArr2D;
		var lp = a2.length;
		var p;
		var clash = false;
		var _g1 = 0;
		while(_g1 < lp) {
			p = a2[_g1++];
			if(this4[2 + this4[0] * p.y + p.x | 0] == 1) {
				clash = true;
				break;
			}
		}
		this.assertFalse(clash,{ fileName : "Arr2DTest.hx", lineNumber : 102, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClash"});
		var this5 = this.emptyArr2D;
		this5[2 + this5[0] * 0 | 0] = 1;
		var this6 = this.emptyArr2D;
		this6[2 + this6[0] | 0] = 1;
		var this7 = this.emptyArr2D;
		this7[2 + this7[0] * 2 | 0] = 1;
		var a21 = [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2}];
		var this8 = this.emptyArr2D;
		var lp1 = a21.length;
		var p1;
		var clash1 = false;
		var _g11 = 0;
		while(_g11 < lp1) {
			p1 = a21[_g11++];
			if(this8[2 + this8[0] * p1.y + p1.x | 0] == 1) {
				clash1 = true;
				break;
			}
		}
		this.assertTrue(clash1,{ fileName : "Arr2DTest.hx", lineNumber : 107, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClash"});
	}
	,testAddPoints: function() {
		var a2 = [{ x : 0, y : 1},{ x : 1, y : 1},{ x : 2, y : 1}];
		var this1 = this.emptyArr2D;
		var lp = a2.length;
		var p;
		var _g1 = 0;
		while(_g1 < lp) {
			p = a2[_g1++];
			this1[2 + this1[0] * p.y + p.x | 0] = 1;
		}
		var this2 = this.emptyArr2D;
		var w = this2[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertFalse(ful,{ fileName : "Arr2DTest.hx", lineNumber : 112, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
		var this3 = this.emptyArr2D;
		var w1 = this3[0];
		var s1 = 2 + w1 | 0;
		var e1 = s1 + w1;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this3[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 113, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
		var this4 = this.emptyArr2D;
		var w2 = this4[0];
		var s2 = 2 + w2 * 2 | 0;
		var e2 = s2 + w2;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this4[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertFalse(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 114, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
	}
	,testOverlap: function() {
		var a = this.filledArr2D;
		var b = this.emptyArr2D;
		var la = a.length;
		if(la != b.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped = false;
		var ai;
		var bi;
		var _g1 = 2;
		while(_g1 < la) {
			var i = _g1++;
			ai = a[i];
			bi = b[i];
			if(ai == 1 && bi == 1) {
				overlapped = true;
				break;
			}
		}
		this.assertFalse(overlapped,{ fileName : "Arr2DTest.hx", lineNumber : 117, className : "polyominoTriangles.test.Arr2DTest", methodName : "testOverlap"});
	}
	,testID: function() {
		var w = 4;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		var a0 = this1;
		a0[2 + a0[0] * 2 | 0] = 1;
		a0[2 + a0[0] | 0] = 1;
		this.assertTrue(a0.toString() == "4,3,0,0,0,0,1,0,0,0,1,0,0,0",{ fileName : "Arr2DTest.hx", lineNumber : 124, className : "polyominoTriangles.test.Arr2DTest", methodName : "testID"});
		var count = 2;
		var _g1 = 0;
		while(_g1 < 4) {
			var y = _g1++;
			var _g3 = 0;
			while(_g3 < 3) {
				this.assertTrue((2 + 3 * y + _g3++ | 0) == count,{ fileName : "Arr2DTest.hx", lineNumber : 130, className : "polyominoTriangles.test.Arr2DTest", methodName : "testID"});
				++count;
			}
		}
	}
	,testMerge: function(b) {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] + 1 | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] + 2 | 0] = 1;
		var this4 = this.emptyArr2D;
		var w = this4[0];
		var s = 2 + w | 0;
		var e = s + w;
		var ful = true;
		var _g1 = s;
		while(_g1 < e) if(this4[_g1++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 139, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var w1 = 3;
		var h = 3;
		var v = null;
		var this5;
		if(v == null) {
			if(false) {
				w1 = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w1 * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w1;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w1,h,_g);
		}
		this5 = v;
		var a0 = this5;
		a0[2 + a0[0] * 2 | 0] = 1;
		a0[2 + a0[0] * 2 + 1 | 0] = 1;
		a0[2 + a0[0] * 2 + 2 | 0] = 1;
		var w2 = a0[0];
		var s1 = 2 + w2 * 2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g11 = s1;
		while(_g11 < e1) if(a0[_g11++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 144, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var a = this.emptyArr2D;
		var la = a.length;
		if(la != a0.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped = false;
		var ai;
		var bi;
		var _g12 = 2;
		while(_g12 < la) {
			var i = _g12++;
			ai = a[i];
			bi = a0[i];
			if(ai == 1 && bi == 1) {
				overlapped = true;
				break;
			}
		}
		this.assertFalse(overlapped,{ fileName : "Arr2DTest.hx", lineNumber : 145, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this6 = this.emptyArr2D;
		var tmp;
		var la1 = this6.length;
		if(la1 != a0.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped1 = false;
		var ai1;
		var bi1;
		var _g13 = 2;
		while(_g13 < la1) {
			var i1 = _g13++;
			ai1 = this6[i1];
			bi1 = a0[i1];
			if(ai1 == 1 && bi1 == 1) {
				overlapped1 = true;
				break;
			}
		}
		if(overlapped1) {
			tmp = false;
		} else {
			var la2 = this6.length;
			var ai2;
			var _g14 = 2;
			while(_g14 < la2) {
				var i2 = _g14++;
				ai2 = this6[i2];
				if(ai2 == 0) {
					this6[i2] = a0[i2];
				}
			}
			tmp = true;
		}
		this.assertTrue(tmp,{ fileName : "Arr2DTest.hx", lineNumber : 146, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this7 = this.emptyArr2D;
		var w3 = this7[0];
		var s2 = 2 + w3 * 0 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g15 = s2;
		while(_g15 < e2) if(this7[_g15++] == 0) {
			ful2 = false;
			break;
		}
		this.assertFalse(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 147, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this8 = this.emptyArr2D;
		var w4 = this8[0];
		var s3 = 2 + w4 | 0;
		var e3 = s3 + w4;
		var ful3 = true;
		var _g16 = s3;
		while(_g16 < e3) if(this8[_g16++] == 0) {
			ful3 = false;
			break;
		}
		this.assertTrue(ful3,{ fileName : "Arr2DTest.hx", lineNumber : 148, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this9 = this.emptyArr2D;
		var w5 = this9[0];
		var s4 = 2 + w5 * 2 | 0;
		var e4 = s4 + w5;
		var ful4 = true;
		var _g17 = s4;
		while(_g17 < e4) if(this9[_g17++] == 0) {
			ful4 = false;
			break;
		}
		this.assertTrue(ful4,{ fileName : "Arr2DTest.hx", lineNumber : 149, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
	}
	,testRowToString: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		var w = this2[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var str = "\n";
		var _g1 = s;
		while(_g1 < e) str = str + this2[_g1++] + "  ";
		this.assertTrue(str == "\n1  0  0  ",{ fileName : "Arr2DTest.hx", lineNumber : 154, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowToString"});
	}
	,testPrettyString: function() {
		var str = "\n1  0  0  " + "\n0  0  0  " + "\n0  0  0  ";
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		var str1 = "";
		var _g1 = 0;
		var _g = this2[1];
		while(_g1 < _g) {
			var w = this2[0];
			var s = 2 + w * _g1++ | 0;
			var e = s + w;
			var str2 = "\n";
			var _g11 = s;
			while(_g11 < e) str2 = str2 + this2[_g11++] + "  ";
			str1 += str2;
		}
		this.assertTrue(str1 == str,{ fileName : "Arr2DTest.hx", lineNumber : 161, className : "polyominoTriangles.test.Arr2DTest", methodName : "testPrettyString"});
	}
	,setup: function() {
		this.createfilledArr2D();
		var w = 3;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.emptyArr2D = this1;
	}
	,createfilledArr2D: function() {
		var w = 3;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.filledArr2D = this1;
		var _g1 = 0;
		while(_g1 < 3) {
			var iy = _g1++;
			var _g11 = 0;
			while(_g11 < 3) {
				var this2 = this.filledArr2D;
				this2[2 + this2[0] * iy + _g11++ | 0] = 1;
			}
		}
	}
	,__class__: polyominoTriangles_test_Arr2DTest
});
var polyominoTriangles_test_UnitTest = function() {
	var r = new haxe_unit_TestRunner();
	haxe_Log.trace("Running unit test",{ fileName : "UnitTest.hx", lineNumber : 6, className : "polyominoTriangles.test.UnitTest", methodName : "new"});
	r.add(new polyominoTriangles_test_Arr2DTest());
	r.run();
	haxe_Log.trace(r,{ fileName : "UnitTest.hx", lineNumber : 9, className : "polyominoTriangles.test.UnitTest", methodName : "new"});
};
polyominoTriangles_test_UnitTest.__name__ = ["polyominoTriangles","test","UnitTest"];
polyominoTriangles_test_UnitTest.prototype = {
	__class__: polyominoTriangles_test_UnitTest
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.svgNameSpace = "http://www.w3.org/2000/svg";
htmlHelper_tools_AnimateTimer.counter = 0;
js_Boot.__toStr = ({ }).toString;
justDrawing_Surface.svgNameSpace = "http://www.w3.org/2000/svg";
justDrawing_Surface.cubicStep = 0.03;
justTriangles_Draw.circleSides = 60;
justTriangles_ShapePoints.quadStep = 0.03;
justTriangles_ShapePoints.cubicStep = 0.03;
justTriangles_Triangle.triangles = [];
polyominoTriangles_PolyominoTrianglesSvg.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
