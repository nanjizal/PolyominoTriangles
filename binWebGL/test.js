// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return (1 - (i >>> 31 << 1)) * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var haxe_unit_TestCase = function() {
};
haxe_unit_TestCase.__name__ = ["haxe","unit","TestCase"];
haxe_unit_TestCase.prototype = {
	currentTest: null
	,setup: function() {
	}
	,tearDown: function() {
	}
	,print: function(v) {
		haxe_unit_TestRunner.print(v);
	}
	,assertTrue: function(b,c) {
		this.currentTest.done = true;
		if(b != true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected true but was false";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertFalse: function(b,c) {
		this.currentTest.done = true;
		if(b == true) {
			this.currentTest.success = false;
			this.currentTest.error = "expected false but was true";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,assertEquals: function(expected,actual,c) {
		this.currentTest.done = true;
		if(actual != expected) {
			this.currentTest.success = false;
			this.currentTest.error = "expected '" + Std.string(expected) + "' but was '" + Std.string(actual) + "'";
			this.currentTest.posInfos = c;
			throw new js__$Boot_HaxeError(this.currentTest);
		}
	}
	,__class__: haxe_unit_TestCase
};
var haxe_unit_TestResult = function() {
	this.m_tests = new List();
	this.success = true;
};
haxe_unit_TestResult.__name__ = ["haxe","unit","TestResult"];
haxe_unit_TestResult.prototype = {
	m_tests: null
	,success: null
	,add: function(t) {
		this.m_tests.add(t);
		if(!t.success) {
			this.success = false;
		}
	}
	,toString: function() {
		var buf_b = "";
		var failures = 0;
		var _g_head = this.m_tests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.success == false) {
				buf_b += "* ";
				buf_b += Std.string(val.classname);
				buf_b += "::";
				buf_b += Std.string(val.method);
				buf_b += "()";
				buf_b += "\n";
				buf_b += "ERR: ";
				if(val.posInfos != null) {
					buf_b += Std.string(val.posInfos.fileName);
					buf_b += ":";
					buf_b += Std.string(val.posInfos.lineNumber);
					buf_b += "(";
					buf_b += Std.string(val.posInfos.className);
					buf_b += ".";
					buf_b += Std.string(val.posInfos.methodName);
					buf_b += ") - ";
				}
				buf_b += Std.string(val.error);
				buf_b += "\n";
				if(val.backtrace != null) {
					buf_b += Std.string(val.backtrace);
					buf_b += "\n";
				}
				buf_b += "\n";
				++failures;
			}
		}
		buf_b += "\n";
		if(failures == 0) {
			buf_b += "OK ";
		} else {
			buf_b += "FAILED ";
		}
		buf_b += Std.string(this.m_tests.length);
		buf_b += " tests, ";
		buf_b += failures == null ? "null" : "" + failures;
		buf_b += " failed, ";
		buf_b += Std.string(this.m_tests.length - failures);
		buf_b += " success";
		buf_b += "\n";
		return buf_b;
	}
	,__class__: haxe_unit_TestResult
};
var haxe_unit_TestRunner = function() {
	this.result = new haxe_unit_TestResult();
	this.cases = new List();
};
haxe_unit_TestRunner.__name__ = ["haxe","unit","TestRunner"];
haxe_unit_TestRunner.print = function(v) {
	var msg = js_Boot.__string_rec(v,"");
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		msg = StringTools.htmlEscape(msg).split("\n").join("<br/>");
		d.innerHTML += msg + "<br/>";
	} else if(typeof process != "undefined" && process.stdout != null && process.stdout.write != null) {
		process.stdout.write(msg);
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
haxe_unit_TestRunner.customTrace = function(v,p) {
	haxe_unit_TestRunner.print(p.fileName + ":" + p.lineNumber + ": " + Std.string(v) + "\n");
};
haxe_unit_TestRunner.prototype = {
	result: null
	,cases: null
	,add: function(c) {
		this.cases.add(c);
	}
	,run: function() {
		this.result = new haxe_unit_TestResult();
		var _g_head = this.cases.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.runCase(val);
		}
		haxe_unit_TestRunner.print(this.result.toString());
		return this.result.success;
	}
	,runCase: function(t) {
		var old = haxe_Log.trace;
		haxe_Log.trace = haxe_unit_TestRunner.customTrace;
		var cl = t == null ? null : js_Boot.getClass(t);
		var fields = Type.getInstanceFields(cl);
		haxe_unit_TestRunner.print("Class: " + Type.getClassName(cl) + " ");
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var field = Reflect.field(t,f);
			if(StringTools.startsWith(f,"test") && Reflect.isFunction(field)) {
				t.currentTest = new haxe_unit_TestStatus();
				t.currentTest.classname = Type.getClassName(cl);
				t.currentTest.method = f;
				t.setup();
				try {
					var args = [];
					field.apply(t,args);
					if(t.currentTest.done) {
						t.currentTest.success = true;
						haxe_unit_TestRunner.print(".");
					} else {
						t.currentTest.success = false;
						t.currentTest.error = "(warning) no assert";
						haxe_unit_TestRunner.print("W");
					}
				} catch( $e0 ) {
					haxe_CallStack.lastException = $e0;
					if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
					if( js_Boot.__instanceof($e0,haxe_unit_TestStatus) ) {
						var e = $e0;
						haxe_unit_TestRunner.print("F");
						var tmp = haxe_CallStack.exceptionStack();
						t.currentTest.backtrace = haxe_CallStack.toString(tmp);
					} else {
					var e1 = $e0;
					haxe_unit_TestRunner.print("E");
					if(e1.message != null) {
						t.currentTest.error = "exception thrown : " + Std.string(e1) + " [" + Std.string(e1.message) + "]";
					} else {
						t.currentTest.error = "exception thrown : " + Std.string(e1);
					}
					var tmp1 = haxe_CallStack.exceptionStack();
					t.currentTest.backtrace = haxe_CallStack.toString(tmp1);
					}
				}
				this.result.add(t.currentTest);
			}
		}
		haxe_unit_TestRunner.print("\n");
		haxe_Log.trace = old;
	}
	,__class__: haxe_unit_TestRunner
};
var haxe_unit_TestStatus = function() {
	this.done = false;
	this.success = false;
};
haxe_unit_TestStatus.__name__ = ["haxe","unit","TestStatus"];
haxe_unit_TestStatus.prototype = {
	done: null
	,success: null
	,error: null
	,method: null
	,classname: null
	,posInfos: null
	,backtrace: null
	,__class__: haxe_unit_TestStatus
};
var htmlHelper_tools_AnimateTimer = function() { };
htmlHelper_tools_AnimateTimer.__name__ = ["htmlHelper","tools","AnimateTimer"];
htmlHelper_tools_AnimateTimer.loop = function(tim) {
	window.requestAnimationFrame(htmlHelper_tools_AnimateTimer.loop);
	if(htmlHelper_tools_AnimateTimer.onFrame != null) {
		htmlHelper_tools_AnimateTimer.onFrame(htmlHelper_tools_AnimateTimer.counter);
	}
	htmlHelper_tools_AnimateTimer.counter++;
	return true;
};
var htmlHelper_webgl_WebGLSetup = function(width_,height_,autoChild) {
	if(autoChild == null) {
		autoChild = true;
	}
	this.colors = [];
	this.indices = [];
	this.vertices = [];
	this.matrix32Array = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.1,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.bgAlpha = 1.;
	this.bgBlue = 1.;
	this.bgGreen = 1.;
	this.bgRed = 1.;
	this.width = width_;
	this.height = height_;
	this.canvas = window.document.createElement("canvas");
	this.canvas.width = this.width;
	this.canvas.height = this.height;
	var style = this.canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	if(autoChild) {
		window.document.body.appendChild(this.canvas);
	}
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
};
htmlHelper_webgl_WebGLSetup.__name__ = ["htmlHelper","webgl","WebGLSetup"];
htmlHelper_webgl_WebGLSetup.prototype = {
	gl: null
	,program: null
	,width: null
	,height: null
	,canvas: null
	,bgRed: null
	,bgGreen: null
	,bgBlue: null
	,bgAlpha: null
	,modelViewProjection: null
	,matrix32Array: null
	,vertices: null
	,indices: null
	,colors: null
	,setupProgram: function(vertexString,fragmentString) {
		var gl = this.gl;
		var vertexShader = gl.createShader(35633);
		gl.shaderSource(vertexShader,vertexString);
		gl.compileShader(vertexShader);
		var gl1 = this.gl;
		var fragmentShader = gl1.createShader(35632);
		gl1.shaderSource(fragmentShader,fragmentString);
		gl1.compileShader(fragmentShader);
		var gl2 = this.gl;
		var program = gl2.createProgram();
		gl2.attachShader(program,vertexShader);
		gl2.attachShader(program,fragmentShader);
		gl2.linkProgram(program);
		gl2.useProgram(program);
		this.program = program;
		return this.program;
	}
	,render: function() {
		this.gl.clearColor(this.bgRed,this.bgGreen,this.bgBlue,this.bgAlpha);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.clear(16384);
		this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		var modelViewProjectionID = this.gl.getUniformLocation(this.program,"modelViewProjection");
		var m = this.modelViewProjection;
		this.matrix32Array.set([m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33]);
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
	,__class__: htmlHelper_webgl_WebGLSetup
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var justTriangles_Draw = function() { };
justTriangles_Draw.__name__ = ["justTriangles","Draw"];
var justTriangles_Triangle = function(id_,outline_,A_,B_,C_,depth_,colorID_) {
	var p1_y;
	var p1_x;
	var p0_y;
	var p0_x;
	this.id = id_;
	this.outline = outline_;
	p0_x = B_.x - A_.x;
	p0_y = B_.y - A_.y;
	p1_x = C_.x - A_.x;
	p1_y = C_.y - A_.y;
	var val = !(p0_x * p1_y - p0_y * p1_x < 0);
	if(val) {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = C_.x;
		this.by = C_.y;
		this.cx = B_.x;
		this.cy = B_.y;
	} else {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = B_.x;
		this.by = B_.y;
		this.cx = C_.x;
		this.cy = C_.y;
	}
	this.windingAdjusted = val;
	this.depth = depth_;
	this.colorID = colorID_;
	this.colorA = colorID_;
	this.colorB = colorID_;
	this.colorC = colorID_;
};
justTriangles_Triangle.__name__ = ["justTriangles","Triangle"];
justTriangles_Triangle.drawTri = function(id,outline,p0,p1,p2,colorID) {
	justTriangles_Triangle.triangles.push(new justTriangles_Triangle(id,outline,p0,p1,p2,0,colorID));
};
justTriangles_Triangle.prototype = {
	id: null
	,colorID: null
	,windingAdjusted: null
	,colorA: null
	,colorB: null
	,colorC: null
	,outline: null
	,depth: null
	,ax: null
	,bx: null
	,cx: null
	,ay: null
	,by: null
	,cy: null
	,get_x: function() {
		return Math.min(Math.min(this.ax,this.bx),this.cx);
	}
	,set_x: function(x) {
		var dx = x - this.get_x();
		this.ax += dx;
		this.bx += dx;
		this.cx += dx;
		return x;
	}
	,get_y: function() {
		return Math.min(Math.min(this.ay,this.by),this.cy);
	}
	,set_y: function(y) {
		var dy = y - this.get_y();
		this.ay += dy;
		this.by += dy;
		this.cy += dy;
		return y;
	}
	,get_right: function() {
		return Math.max(Math.max(this.ax,this.bx),this.cx);
	}
	,__class__: justTriangles_Triangle
};
var khaMath_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
khaMath_Matrix4.__name__ = ["khaMath","Matrix4"];
khaMath_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: khaMath_Matrix4
};
var polyominoTriangles_PolyominoTrianglesWebGL = function() {
	this.upDown = false;
	this.downDown = false;
	this.rightDown = false;
	this.leftDown = false;
	this.gameColors = [0,16711680,16744192,16776960,65280,255,4915330,9699539,4473924,3355443,789516,1118481,16777215,255,65280,16711680];
	htmlHelper_webgl_WebGLSetup.call(this,1140,1140);
	this.polyomino = new polyominoTriangles_game_Polyomino(0.6);
	justTriangles_Draw.drawTri = justTriangles_Triangle.drawTri;
	this.bgRed = 0.09375;
	this.bgGreen = 0.09375;
	this.bgBlue = 0.09375;
	this.setupProgram("attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.0);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	if(htmlHelper_tools_AnimateTimer.s == null) {
		htmlHelper_tools_AnimateTimer.s = window.document.createElement("style");
		htmlHelper_tools_AnimateTimer.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
		window.document.getElementsByTagName("head")[0].appendChild(htmlHelper_tools_AnimateTimer.s);
		htmlHelper_tools_AnimateTimer.s.animation = "spin 1s linear infinite";
		htmlHelper_tools_AnimateTimer.loop(60.0);
	}
	htmlHelper_tools_AnimateTimer.onFrame = $bind(this,this.render_);
	window.document.onkeydown = $bind(this,this.keyDown);
	window.document.onkeyup = $bind(this,this.keyUp);
};
polyominoTriangles_PolyominoTrianglesWebGL.__name__ = ["polyominoTriangles","PolyominoTrianglesWebGL"];
polyominoTriangles_PolyominoTrianglesWebGL.main = function() {
	new polyominoTriangles_PolyominoTrianglesWebGL();
};
polyominoTriangles_PolyominoTrianglesWebGL.__super__ = htmlHelper_webgl_WebGLSetup;
polyominoTriangles_PolyominoTrianglesWebGL.prototype = $extend(htmlHelper_webgl_WebGLSetup.prototype,{
	polyomino: null
	,gameColors: null
	,leftDown: null
	,rightDown: null
	,downDown: null
	,upDown: null
	,setTriangles: function(triangles,triangleColors) {
		var rgb;
		var count = 0;
		var i = 0;
		var c = 0;
		var j = 0;
		var _g = 0;
		while(_g < triangles.length) {
			var tri = triangles[_g];
			++_g;
			this.vertices[i++] = tri.ax + -0.5;
			this.vertices[i++] = -tri.ay + 1.05;
			this.vertices[i++] = tri.depth;
			this.vertices[i++] = tri.bx + -0.5;
			this.vertices[i++] = -tri.by + 1.05;
			this.vertices[i++] = tri.depth;
			this.vertices[i++] = tri.cx + -0.5;
			this.vertices[i++] = -tri.cy + 1.05;
			this.vertices[i++] = tri.depth;
			var $int = triangleColors[tri.colorID];
			rgb = { r : ($int >> 16 & 255) / 255, g : ($int >> 8 & 255) / 255, b : ($int & 255) / 255};
			var _g1 = 0;
			while(_g1 < 3) {
				++_g1;
				this.colors[c++] = rgb.r;
				this.colors[c++] = rgb.g;
				this.colors[c++] = rgb.b;
				this.colors[c++] = 1.0;
				this.indices[j++] = count++;
			}
		}
		var gl = this.gl;
		var program = this.program;
		var vertices = this.vertices;
		var colors = this.colors;
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(vertices),35044);
		var position = gl.getAttribLocation(program,"pos");
		gl.vertexAttribPointer(position,3,5126,false,0,0);
		gl.enableVertexAttribArray(position);
		gl.bindBuffer(34962,null);
		gl.bindBuffer(34962,gl.createBuffer());
		gl.bufferData(34962,new Float32Array(colors),35044);
		var col = gl.getAttribLocation(program,"color");
		gl.vertexAttribPointer(col,4,5126,false,0,0);
		gl.enableVertexAttribArray(col);
		gl.bindBuffer(34962,null);
	}
	,render_: function(i) {
		this.render();
	}
	,render: function() {
		var c1_y;
		var c1_x;
		var c0_y;
		var c0_x;
		var _this = this.polyomino;
		if(!_this.end) {
			var _this1 = _this.controller;
			var l = _this1.shapes.length;
			var shape;
			var hit = false;
			var _g1 = 0;
			while(_g1 < l) {
				shape = _this1.shapes[_g1++];
				shape.getLocation();
				var diaSq = _this1.diaSq;
				var vb0 = shape.virtualBlocks;
				var vb1 = _this1.bottom.blocks;
				var l0 = vb0.length;
				var l1 = vb1.length;
				var sq0;
				var sq1;
				var out = false;
				var _g11 = 0;
				while(_g11 < l0) {
					sq0 = vb0[_g11++];
					var _g3 = 0;
					while(_g3 < l1) {
						sq1 = vb1[_g3++];
						var dx = sq0.t0.bx;
						var dy = sq0.t0.by;
						var ex = sq0.t0.cx;
						var ey = sq0.t0.cy;
						if(dx < ex) {
							c0_x = dx + (ex - dx) / 2;
						} else {
							c0_x = ex + (dx - ex) / 2;
						}
						if(dy < ey) {
							c0_y = dy + (ey - dy) / 2;
						} else {
							c0_y = dy + (dy - ey) / 2 - sq0.dia;
						}
						var dx1 = sq1.t0.bx;
						var dy1 = sq1.t0.by;
						var ex1 = sq1.t0.cx;
						var ey1 = sq1.t0.cy;
						if(dx1 < ex1) {
							c1_x = dx1 + (ex1 - dx1) / 2;
						} else {
							c1_x = ex1 + (dx1 - ex1) / 2;
						}
						if(dy1 < ey1) {
							c1_y = dy1 + (ey1 - dy1) / 2;
						} else {
							c1_y = dy1 + (dy1 - ey1) / 2 - sq1.dia;
						}
						var dx2 = c0_x - c1_x;
						var dy2 = c0_y - c1_y;
						if(dx2 * dx2 + dy2 * dy2 < diaSq) {
							out = true;
							break;
						}
					}
				}
				if(out) {
					var beta;
					if(shape.angle < 0) {
						beta = -shape.angle + 180;
					}
					beta = shape.angle % (2 * Math.PI);
					shape.rotate(shape.rook - beta);
					var newLoc;
					var _g12 = 0;
					var _g = shape.lastLocation.length;
					while(_g12 < _g) {
						var i = _g12++;
						newLoc = shape.newLocation[i];
						shape.blocks[i].set_x(newLoc.x * shape.dia);
						shape.blocks[i].set_y(newLoc.y * shape.dia);
						shape.virtualBlocks[i].set_x(newLoc.x * shape.dia);
						shape.virtualBlocks[i].set_y(newLoc.y * shape.dia);
					}
					var newBlocks = shape.clearBlocks();
					var l2 = newBlocks.length;
					var _g13 = 0;
					while(_g13 < l2) _this1.bottom.pushBlock(newBlocks[_g13++]);
					var arrP = shape.lastLocation;
					var arr2d = _this1.inertArr;
					var lp = arrP.length;
					var p;
					var _g14 = 0;
					while(_g14 < lp) {
						p = arrP[_g14++];
						arr2d[2 + arr2d[0] * (p.y + -2) + p.x | 0] = 1;
					}
					_this1.removeFullRows();
					hit = true;
				}
			}
			var this1 = _this1.inertArr;
			var w = this1[0];
			var s = 2 + w * 0 | 0;
			var e = s + w;
			var emp = true;
			var _g15 = s;
			while(_g15 < e) if(this1[_g15++] == 1) {
				emp = false;
				break;
			}
			var end = !emp;
			if(end) {
				_this1.onGameEnd();
			}
			if(_this1.onPolyominoShapeLanded != null && hit && !end) {
				_this1.onPolyominoShapeLanded();
			}
			if(!hit) {
				var _this2 = _this.rotation;
				if(_this2.toggle) {
					var _this3 = _this2.controller;
					var theta = Math.PI / _this2.rotationSpeed;
					var l3 = _this3.shapes.length;
					var _g16 = 0;
					while(_g16 < l3) _this3.shapes[_g16++].rotate(theta);
				}
				if(_this2.count % (_this2.rotationSpeed / 2) == 0.) {
					_this2.count = 0.;
					_this2.toggle = false;
				}
				_this2.count += 1.;
				var _this4 = _this.movement;
				var djx = 0.;
				var djy = 0.;
				if(_this4.toggleX) {
					if(_this4.jumpX > 0) {
						djx = _this4.jumpX / _this4.jumpSpeed;
						if((_this4.jx += djx) > _this4.jumpX + djx / 2) {
							_this4.toggleX = false;
							_this4.jx = 0.;
							djx = 0.;
						}
					} else {
						djx = _this4.jumpX / _this4.jumpSpeed;
						if((_this4.jx += djx) < _this4.jumpX + djx / 2) {
							_this4.toggleX = false;
							_this4.jx = 0.;
							djx = 0.;
						}
					}
				}
				if(_this4.toggleY) {
					if(_this4.jumpY > 0) {
						djy = _this4.jumpY / _this4.jumpSpeed;
						if((_this4.jy += djy) > _this4.jumpY + djy / 2) {
							_this4.toggleY = false;
							_this4.jy = 0.;
							djy = 0.;
						}
					} else {
						djy = _this4.jumpY / _this4.jumpSpeed;
						if((_this4.jy += djx) < _this4.jumpY + djy / 2) {
							_this4.toggleY = false;
							_this4.jy = 0.;
							djy = 0.;
						}
					}
				}
				if(_this4.toggleX) {
					var _this5 = _this4.controller;
					var leftStop = _this4.leftStop;
					var rightStop = _this4.rightStop;
					var l4 = _this5.shapes.length;
					var shape1;
					var _g17 = 0;
					while(_g17 < l4) {
						shape1 = _this5.shapes[_g17++];
						if(shape1.blocks != null && shape1.blocks.length != 0) {
							var sqr = shape1.blocks;
							var sides0;
							if(sqr == null) {
								sides0 = null;
							} else if(sqr.length == 0) {
								sides0 = null;
							} else {
								var l5 = sqr.length;
								var square = sqr[0];
								var bx = square.get_x();
								var br = square.get_right();
								var _g18 = 1;
								while(_g18 < l5) {
									square = sqr[_g18++];
									bx = Math.min(bx,square.get_x());
									br = Math.max(br,square.get_right());
								}
								sides0 = { x : bx, right : br};
							}
							var sqr1 = shape1.virtualBlocks;
							var sides1;
							if(sqr1 == null) {
								sides1 = null;
							} else if(sqr1.length == 0) {
								sides1 = null;
							} else {
								var l6 = sqr1.length;
								var square1 = sqr1[0];
								var bx1 = square1.get_x();
								var br1 = square1.get_right();
								var _g19 = 1;
								while(_g19 < l6) {
									square1 = sqr1[_g19++];
									bx1 = Math.min(bx1,square1.get_x());
									br1 = Math.max(br1,square1.get_right());
								}
								sides1 = { x : bx1, right : br1};
							}
							var sides = { x : Math.min(sides0.x,sides1.x), right : Math.max(sides0.right,sides1.right)};
							if(sides != null) {
								if(djx < 0) {
									if(sides.x + djx > leftStop) {
										shape1.moveX(djx);
									} else {
										shape1.moveX(leftStop - sides.x);
									}
								} else if(djx > 0) {
									if(sides.right + djx < rightStop) {
										shape1.moveX(djx);
									} else {
										shape1.moveX(rightStop - sides.right);
									}
								}
							}
						}
					}
				}
				var _this6 = _this4.controller;
				var y = _this4.fallSpeed + djy;
				var l7 = _this6.shapes.length;
				var _g110 = 0;
				while(_g110 < l7) _this6.shapes[_g110++].moveDelta(0.0,y);
			}
		}
		this.vertices = [];
		this.indices = [];
		this.colors = [];
		this.setTriangles(justTriangles_Triangle.triangles,this.gameColors);
		htmlHelper_webgl_WebGLSetup.prototype.render.call(this);
	}
	,keyDown: function(e) {
		e.preventDefault();
		switch(e.keyCode) {
		case 37:
			this.leftDown = true;
			break;
		case 38:
			this.upDown = true;
			break;
		case 39:
			this.rightDown = true;
			break;
		case 40:
			this.downDown = true;
			break;
		default:
		}
		if(this.upDown) {
			var _this = this.polyomino.rotation;
			if(!_this.toggle) {
				_this.toggle = true;
				_this.count = 1.0;
			}
		} else if(this.downDown) {
			var _this1 = this.polyomino.movement;
			if(!_this1.toggleX) {
				if(!_this1.toggleY) {
					_this1.toggleY = true;
					_this1.jumpX = 0 * _this1.dia;
					_this1.jumpY = _this1.dia;
				}
			}
		}
		if(this.leftDown) {
			var _this2 = this.polyomino.movement;
			if(!_this2.toggleX) {
				if(!_this2.toggleY) {
					_this2.toggleX = true;
					_this2.jumpX = -1 * _this2.dia;
					_this2.jumpY = 0 * _this2.dia;
				}
			}
		} else if(this.rightDown) {
			var _this3 = this.polyomino.movement;
			if(!_this3.toggleX) {
				if(!_this3.toggleY) {
					_this3.toggleX = true;
					_this3.jumpX = _this3.dia;
					_this3.jumpY = 0 * _this3.dia;
				}
			}
		}
		this.leftDown = false;
		this.rightDown = false;
		this.downDown = false;
		this.upDown = false;
	}
	,keyUp: function(e) {
		e.preventDefault();
		switch(e.keyCode) {
		case 37:
			this.leftDown = false;
			break;
		case 38:
			this.upDown = false;
			break;
		case 39:
			this.rightDown = false;
			break;
		case 40:
			this.downDown = false;
			break;
		default:
		}
	}
	,__class__: polyominoTriangles_PolyominoTrianglesWebGL
});
var polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$ = {};
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$.__name__ = ["polyominoTriangles","game","_Arr2D","Arr2D_Impl_"];
polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new = function(w,h,v) {
	if(h == null) {
		h = 100;
	}
	if(w == null) {
		w = 100;
	}
	var this1;
	if(v == null) {
		if(w == null) {
			w = 100;
		}
		if(h == null) {
			h = 100;
		}
		var l = w * h + 2;
		var _g = [];
		var _g2 = 0;
		while(_g2 < l) {
			++_g2;
			_g.push(0);
		}
		_g[0] = w;
		_g[1] = h;
		v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
	}
	this1 = v;
	return this1;
};
var polyominoTriangles_game_Background = function(shape_,wide_,hi_,col0_,col1_,col2_,col3_) {
	this.shape = shape_;
	this.wide = wide_;
	this.hi = hi_;
	this.bgCol0 = col0_;
	this.bgCol1 = col1_;
	this.bgCol2 = col2_;
	this.bgCol3 = col3_;
	this.bgSquares = [];
	var toggle = false;
	var _g1 = 0;
	var _g = this.wide;
	while(_g1 < _g) {
		var w = _g1++;
		if(toggle) {
			shape_.col0 = col0_;
			shape_.col1 = col1_;
		} else {
			shape_.col0 = col2_;
			shape_.col1 = col3_;
		}
		toggle = !toggle;
		var _g3 = 2;
		var _g2 = this.hi;
		while(_g3 < _g2) {
			var h = _g3++;
			this.bgSquares[2 + this.wide * h + w | 0] = shape_.addBlock(w,h,false);
		}
	}
};
polyominoTriangles_game_Background.__name__ = ["polyominoTriangles","game","Background"];
polyominoTriangles_game_Background.prototype = {
	shape: null
	,wide: null
	,hi: null
	,bgCol0: null
	,bgCol1: null
	,bgCol2: null
	,bgCol3: null
	,bgSquares: null
	,__class__: polyominoTriangles_game_Background
};
var polyominoTriangles_game_Controller = function(id_,triangles_,wide_,hi_,dia_,gap_,offX_,offY_) {
	this.col1 = 5;
	this.col0 = 1;
	this.shapes = [];
	this.id = id_;
	var w = wide_;
	var h = hi_ - 1;
	var v = null;
	var this1;
	if(v == null) {
		if(wide_ == null) {
			w = 100;
		}
		if(h == null) {
			h = 100;
		}
		var l = w * h + 2;
		var _g = [];
		var _g2 = 0;
		while(_g2 < l) {
			++_g2;
			_g.push(0);
		}
		_g[0] = w;
		_g[1] = h;
		v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
	}
	this1 = v;
	this.inertArr = this1;
	this.wide = wide_;
	this.hi = hi_;
	this.triangles = triangles_;
	this.dia = dia_;
	this.gap = gap_;
	this.offX = offX_;
	this.offY = offY_;
	this.diaSq = (this.dia - this.dia / 10000) * (this.dia - this.dia / 10000);
	this.shapeGenerator = new polyominoTriangles_game_ShapeGenerator($bind(this,this.createPolyomino));
};
polyominoTriangles_game_Controller.__name__ = ["polyominoTriangles","game","Controller"];
polyominoTriangles_game_Controller.prototype = {
	inertArr: null
	,shapes: null
	,shapeGenerator: null
	,bottom: null
	,background: null
	,id: null
	,triangles: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,offX: null
	,offY: null
	,wide: null
	,hi: null
	,diaSq: null
	,onPolyominoShapeLanded: null
	,onGameEnd: null
	,createShape: function(p,col0_,col1_,shapePreference) {
		if(shapePreference == null) {
			shapePreference = "polyomino_random";
		}
		this.col0 = col0_;
		this.col1 = col1_;
		var shape = this.shapeGenerator.randomShape(p,col0_,col1_,shapePreference);
		this.shapes[this.shapes.length] = shape;
		return shape;
	}
	,removeFullRows: function(rowsFull,countTrue) {
		if(rowsFull == null) {
			var this1 = this.inertArr;
			var arr = [];
			var _g1 = 0;
			var _g = this1[1];
			while(_g1 < _g) {
				var y = _g1++;
				var w = this1[0];
				var s = 2 + w * y | 0;
				var e = s + w;
				var ful = true;
				var _g11 = s;
				while(_g11 < e) if(this1[_g11++] == 0) {
					ful = false;
					break;
				}
				arr[y] = ful;
			}
			rowsFull = arr;
			arr.pop();
			countTrue = 0;
			var _g2 = 0;
			while(_g2 < arr.length) {
				var row = arr[_g2];
				++_g2;
				if(row) {
					++countTrue;
				}
			}
		}
		if(countTrue > 0) {
			var indx = rowsFull.lastIndexOf(true);
			this.bottom.removeRow(indx + 2);
			var this2 = this.inertArr;
			var l = indx - indx + 1;
			var rowUpto = indx - 1;
			var _g12 = 0;
			while(_g12 < indx) {
				var j = rowUpto - _g12++;
				var w1 = this2[0];
				var s0 = 2 + w1 * j | 0;
				var e0 = 2 + w1 * (j + l) | 0;
				var _g13 = 0;
				while(_g13 < w1) {
					var i = _g13++;
					this2[e0 + i] = this2[s0 + i];
					this2[s0 + i] = 0;
				}
			}
			if(l > rowUpto) {
				var _g14 = 0;
				var _g3 = l - rowUpto;
				while(_g14 < _g3) {
					var w2 = this2[0];
					var s1 = 2 + w2 * _g14++ | 0;
					var _g15 = 0;
					while(_g15 < w2) this2[s1 + _g15++] = 0;
				}
			}
			var this3 = this.inertArr;
			var arr1 = [];
			var _g16 = 0;
			var _g4 = this3[1];
			while(_g16 < _g4) {
				var y1 = _g16++;
				var w3 = this3[0];
				var s2 = 2 + w3 * y1 | 0;
				var e1 = s2 + w3;
				var ful1 = true;
				var _g17 = s2;
				while(_g17 < e1) if(this3[_g17++] == 0) {
					ful1 = false;
					break;
				}
				arr1[y1] = ful1;
			}
			rowsFull = arr1;
			arr1.pop();
			countTrue = 0;
			var _g5 = 0;
			while(_g5 < arr1.length) {
				var row1 = arr1[_g5];
				++_g5;
				if(row1) {
					++countTrue;
				}
			}
			if(countTrue > 0) {
				this.removeFullRows(arr1,countTrue);
			}
		}
	}
	,createPolyomino: function(p,snapped) {
		return new polyominoTriangles_game_Shape(this.id,this.triangles,p,this.col0,this.col1,this.dia,this.gap,snapped,this.offX,this.offY);
	}
	,createBg: function(p,wide,hi,col0_,col1_,col2_,col3_) {
		this.background = new polyominoTriangles_game_Background(new polyominoTriangles_game_Shape(this.id,this.triangles,p,this.col0,this.col1,this.dia,this.gap,null,this.offX,this.offY),wide,hi + 1,col0_,col1_,col0_,col1_);
	}
	,createBottom: function(p,wide,col0_,col1_) {
		var templates = new polyominoTriangles_game_Templates($bind(this,this.createPolyomino));
		this.col0 = col0_;
		this.col1 = col1_;
		var ts = templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
		var _g1 = 0;
		while(_g1 < wide) ts.addBlock(_g1++,0,false,true);
		this.bottom = ts;
		var arr = [];
		var bottomPositions = this.bottom.getCentreInt(arr);
		var arr2d = this.inertArr;
		var lp = bottomPositions.length;
		var p1;
		var _g11 = 0;
		while(_g11 < lp) {
			p1 = bottomPositions[_g11++];
			arr2d[2 + arr2d[0] * (p1.y + -2) + p1.x | 0] = 1;
		}
	}
	,__class__: polyominoTriangles_game_Controller
};
var polyominoTriangles_game_Layout = function(controller_,originP_,wide_,hi_,dia_) {
	this.shapeid = 1;
	this.noBlocks = 1;
	this.above = 7;
	this.controller = controller_;
	this.wide = wide_;
	this.hi = hi_;
	this.dia = dia_;
	this.originP = originP_;
	var bottomP = { x : this.originP.x, y : this.originP.y + this.dia * this.hi};
	this.background();
	this.fallingBlocks(this.noBlocks,this.above * this.dia);
	this.bottom(bottomP);
};
polyominoTriangles_game_Layout.__name__ = ["polyominoTriangles","game","Layout"];
polyominoTriangles_game_Layout.prototype = {
	controller: null
	,above: null
	,noBlocks: null
	,originP: null
	,wide: null
	,hi: null
	,dia: null
	,shapeid: null
	,background: function() {
		this.controller.createBg(this.originP,this.wide,this.hi,10,0,9,0);
	}
	,fallingBlocks: function(noBlocks,aboveY) {
		var randX = 0.;
		var x = this.originP.x;
		var y = this.originP.y;
		var _g1 = 0;
		while(_g1 < noBlocks) {
			var i = _g1++;
			var m = i % 6 + 1;
			randX = this.dia + this.dia * Math.round(Math.random() * (this.wide - 2));
			this.controller.createShape({ x : x + randX, y : y - i * aboveY},m,m + 1);
		}
	}
	,createTile: function() {
		var x = this.originP.x;
		var y = this.originP.y;
		var m = this.shapeid % 6 + 1;
		var randX = this.dia;
		var randX1 = this.dia;
		var randX2 = Math.random();
		this.controller.createShape({ x : x + (randX + randX1 * Math.round(randX2 * (this.wide - 2))), y : y},m,m + 1);
		this.shapeid++;
	}
	,bottom: function(p) {
		this.controller.createBottom(p,this.wide,8,9);
	}
	,__class__: polyominoTriangles_game_Layout
};
var polyominoTriangles_game_Movement = function(controller_,dia_) {
	this.jy = 0.;
	this.jx = 0.;
	this.toggleY = false;
	this.toggleX = false;
	this.jumpY = .0;
	this.jumpX = .0;
	this.jumpSpeed = 7;
	this.fallSpeed = 0.01;
	this.controller = controller_;
	this.dia = dia_;
};
polyominoTriangles_game_Movement.__name__ = ["polyominoTriangles","game","Movement"];
polyominoTriangles_game_Movement.prototype = {
	controller: null
	,dia: null
	,fallSpeed: null
	,jumpSpeed: null
	,jumpX: null
	,jumpY: null
	,toggleX: null
	,toggleY: null
	,jx: null
	,jy: null
	,leftStop: null
	,rightStop: null
	,reset: function() {
		this.toggleY = false;
		this.toggleX = false;
		this.jumpX = 0.;
		this.jumpY = 0.;
		this.jy = 0.;
		this.jx = 0.;
	}
	,__class__: polyominoTriangles_game_Movement
};
var polyominoTriangles_game_Polyomino = function(scale) {
	if(scale == null) {
		scale = 1;
	}
	this.end = false;
	this.offY = 0;
	this.offX = 0;
	this.hi = 30;
	this.wide = 8;
	this.edge = 0.01;
	this.dia = 0.075;
	this.scaleDimensions(scale);
	this.createPolyomino();
	this.interaction();
	this.startGame();
};
polyominoTriangles_game_Polyomino.__name__ = ["polyominoTriangles","game","Polyomino"];
polyominoTriangles_game_Polyomino.prototype = {
	controller: null
	,dia: null
	,edge: null
	,wide: null
	,hi: null
	,offX: null
	,offY: null
	,layout: null
	,rotation: null
	,movement: null
	,end: null
	,scaleDimensions: function(scale) {
		this.dia = scale * this.dia;
		this.edge = scale * this.edge;
	}
	,setLeftRightStops: function() {
		this.movement.leftStop = this.dia * this.offX;
		this.movement.rightStop = this.dia * this.offX + this.wide * this.dia;
	}
	,createPolyomino: function() {
		this.controller = new polyominoTriangles_game_Controller(0,justTriangles_Triangle.triangles,this.wide,this.hi,this.dia,this.edge,this.offX,this.offY - 4);
	}
	,startGame: function() {
		this.layout = new polyominoTriangles_game_Layout(this.controller,{ x : this.dia * this.offX, y : this.dia * this.offY},this.wide,this.hi,this.dia);
		this.controller.onPolyominoShapeLanded = $bind(this,this.newShape);
		this.controller.onGameEnd = $bind(this,this.gameEnd);
	}
	,newShape: function() {
		this.rotation.reset();
		this.movement.reset();
		this.layout.createTile();
	}
	,gameEnd: function() {
		this.end = true;
	}
	,interaction: function() {
		this.rotation = new polyominoTriangles_game_Rotation(this.controller);
		this.movement = new polyominoTriangles_game_Movement(this.controller,this.dia);
		this.setLeftRightStops();
	}
	,__class__: polyominoTriangles_game_Polyomino
};
var polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$ = {};
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.__name__ = ["polyominoTriangles","game","_RookAngle","RookAngle_Impl_"];
polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat = function(f) {
	var this1;
	if(f < 0) {
		var angle = -f % (2 * Math.PI);
		if(angle == 0.) {
			this1 = 0.;
		} else if(angle < Math.PI / 4) {
			this1 = 0.;
		} else if(angle < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else if(angle < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else {
			this1 = 0.;
		}
	} else {
		var angle1 = f % (2 * Math.PI);
		if(angle1 == 0.) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 4) {
			this1 = 0.;
		} else if(angle1 < Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI / 2;
		} else if(angle1 < Math.PI + Math.PI / 4) {
			this1 = Math.PI;
		} else if(angle1 < Math.PI + Math.PI / 2 + Math.PI / 4) {
			this1 = Math.PI + Math.PI / 2;
		} else {
			this1 = 0.;
		}
	}
	return this1;
};
var polyominoTriangles_game_Rotation = function(controller_) {
	this.rotationSpeed = 20;
	this.count = 0.;
	this.toggle = false;
	this.controller = controller_;
};
polyominoTriangles_game_Rotation.__name__ = ["polyominoTriangles","game","Rotation"];
polyominoTriangles_game_Rotation.prototype = {
	controller: null
	,toggle: null
	,count: null
	,rotationSpeed: null
	,reset: function() {
		this.toggle = false;
		this.count = 0;
	}
	,__class__: polyominoTriangles_game_Rotation
};
var polyominoTriangles_game_Snapped = { __ename__ : true, __constructs__ : ["Always","Zero","Ninety","Fix"] };
polyominoTriangles_game_Snapped.Always = ["Always",0];
polyominoTriangles_game_Snapped.Always.toString = $estr;
polyominoTriangles_game_Snapped.Always.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Zero = ["Zero",1];
polyominoTriangles_game_Snapped.Zero.toString = $estr;
polyominoTriangles_game_Snapped.Zero.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Ninety = ["Ninety",2];
polyominoTriangles_game_Snapped.Ninety.toString = $estr;
polyominoTriangles_game_Snapped.Ninety.__enum__ = polyominoTriangles_game_Snapped;
polyominoTriangles_game_Snapped.Fix = ["Fix",3];
polyominoTriangles_game_Snapped.Fix.toString = $estr;
polyominoTriangles_game_Snapped.Fix.__enum__ = polyominoTriangles_game_Snapped;
var polyominoTriangles_game_Shape = function(id_,triangles_,centre_,col0_,col1_,dia_,gap_,snapped_,offX_,offY_) {
	if(offY_ == null) {
		offY_ = 0;
	}
	if(offX_ == null) {
		offX_ = 0;
	}
	this.newLocation = [];
	this.lastLocation = [];
	this.locked = false;
	this.lastRook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(0.);
	this.rook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(0.);
	this.angle = 0.;
	if(snapped_ == polyominoTriangles_game_Snapped.Zero || snapped_ == polyominoTriangles_game_Snapped.Fix) {
		centre_.x -= dia_ / 2;
	}
	this.centre = centre_;
	this.snapped = snapped_;
	this.offX = offX_;
	this.offY = offY_;
	this.start = { x : centre_.x, y : centre_.y};
	this.id = id_;
	this.triangles = triangles_;
	this.col0 = col0_;
	this.col1 = col1_;
	this.dia = dia_;
	this.gap = gap_;
	this.blocks = [];
	this.virtualBlocks = [];
};
polyominoTriangles_game_Shape.__name__ = ["polyominoTriangles","game","Shape"];
polyominoTriangles_game_Shape.prototype = {
	start: null
	,snapped: null
	,centre: null
	,blocks: null
	,virtualBlocks: null
	,id: null
	,triangles: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,angle: null
	,rook: null
	,lastRook: null
	,offX: null
	,offY: null
	,locked: null
	,addBlock: function(x_,y_,addVirtual,show) {
		if(show == null) {
			show = true;
		}
		if(addVirtual == null) {
			addVirtual = true;
		}
		var x0 = x_ * this.dia + this.centre.x;
		var y0 = y_ * this.dia + this.centre.y;
		var tri = this.triangles;
		if(!show) {
			tri = [];
		}
		if(addVirtual) {
			this.virtualBlocks[this.blocks.length] = new polyominoTriangles_game_Square(this.id,[],x0,y0,this.dia,this.gap,13,13);
		}
		var sq = new polyominoTriangles_game_Square(this.id,tri,x0,y0,this.dia,this.gap,this.col0,this.col1);
		this.blocks[this.blocks.length] = sq;
		return sq;
	}
	,pushBlock: function(square) {
		this.blocks[this.blocks.length] = square;
	}
	,clearBlocks: function() {
		var newBlocks = [];
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			var i = _g1++;
			newBlocks[i] = this.blocks[i];
		}
		this.blocks = [];
		this.virtualBlocks = [];
		this.locked = true;
		return newBlocks;
	}
	,removeRow: function(r) {
		var sq;
		var sq1;
		var posInt;
		var found = [];
		var lr = 0;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			sq1 = this.blocks[_g1++];
			if(sq1 != null) {
				if(sq1.hasTriangles()) {
					posInt = sq1.getCentreInt();
					if(posInt.y == r) {
						found[lr++] = sq1;
					}
				}
			}
		}
		while(found.length != 0) {
			sq = found.pop();
			HxOverrides.remove(this.blocks,sq);
			sq.destroy();
			sq = null;
		}
		this.moveRowsDown(r);
	}
	,moveRowsDown: function(end) {
		var sq;
		var posInt;
		var _g1 = 0;
		var _g = this.blocks.length;
		while(_g1 < _g) {
			sq = this.blocks[_g1++];
			posInt = sq.getCentreInt();
			if(posInt.y < end) {
				sq.moveDelta(0,this.dia);
			}
		}
	}
	,rotate: function(theta) {
		this.angle += theta;
		this.rook = polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this.angle);
		var l = this.blocks.length;
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var offset;
		if(this.snapped != null) {
			switch(this.snapped[1]) {
			case 0:
				this.offsetX(0);
				break;
			case 1:case 2:
				offset = -(this.dia / 2) * cos;
				this.offsetX(offset);
				break;
			case 3:
				offset = this.dia / 2 * cos;
				this.offsetX(offset);
				break;
			}
		}
		var cos1 = Math.cos(Math.PI / 2);
		var sin1 = Math.sin(Math.PI / 2);
		if(polyominoTriangles_game__$RookAngle_RookAngle_$Impl_$.fromFloat(this.rook) != this.lastRook) {
			var l1 = this.virtualBlocks.length;
			var _g1 = 0;
			while(_g1 < l1) {
				var _this = this.virtualBlocks[_g1++];
				var p = this.centre;
				var _this1 = _this.t0;
				var px = p.x;
				var py = p.y;
				_this1.ax -= px;
				_this1.ay -= py;
				_this1.bx -= px;
				_this1.by -= py;
				_this1.cx -= px;
				_this1.cy -= py;
				var dx;
				var dy;
				dx = _this1.ax;
				dy = _this1.ay;
				_this1.ax = dx * cos1 - dy * sin1;
				_this1.ay = dx * sin1 + dy * cos1;
				dx = _this1.bx;
				dy = _this1.by;
				_this1.bx = dx * cos1 - dy * sin1;
				_this1.by = dx * sin1 + dy * cos1;
				dx = _this1.cx;
				dy = _this1.cy;
				_this1.cx = dx * cos1 - dy * sin1;
				_this1.cy = dx * sin1 + dy * cos1;
				_this1.ax += px;
				_this1.ay += py;
				_this1.bx += px;
				_this1.by += py;
				_this1.cx += px;
				_this1.cy += py;
				var _this2 = _this.t1;
				var px1 = p.x;
				var py1 = p.y;
				_this2.ax -= px1;
				_this2.ay -= py1;
				_this2.bx -= px1;
				_this2.by -= py1;
				_this2.cx -= px1;
				_this2.cy -= py1;
				var dx1;
				var dy1;
				dx1 = _this2.ax;
				dy1 = _this2.ay;
				_this2.ax = dx1 * cos1 - dy1 * sin1;
				_this2.ay = dx1 * sin1 + dy1 * cos1;
				dx1 = _this2.bx;
				dy1 = _this2.by;
				_this2.bx = dx1 * cos1 - dy1 * sin1;
				_this2.by = dx1 * sin1 + dy1 * cos1;
				dx1 = _this2.cx;
				dy1 = _this2.cy;
				_this2.cx = dx1 * cos1 - dy1 * sin1;
				_this2.cy = dx1 * sin1 + dy1 * cos1;
				_this2.ax += px1;
				_this2.ay += py1;
				_this2.bx += px1;
				_this2.by += py1;
				_this2.cx += px1;
				_this2.cy += py1;
			}
		}
		var _g11 = 0;
		while(_g11 < l) {
			var _this3 = this.blocks[_g11++];
			var p1 = this.centre;
			var _this4 = _this3.t0;
			var px2 = p1.x;
			var py2 = p1.y;
			_this4.ax -= px2;
			_this4.ay -= py2;
			_this4.bx -= px2;
			_this4.by -= py2;
			_this4.cx -= px2;
			_this4.cy -= py2;
			var dx2;
			var dy2;
			dx2 = _this4.ax;
			dy2 = _this4.ay;
			_this4.ax = dx2 * cos - dy2 * sin;
			_this4.ay = dx2 * sin + dy2 * cos;
			dx2 = _this4.bx;
			dy2 = _this4.by;
			_this4.bx = dx2 * cos - dy2 * sin;
			_this4.by = dx2 * sin + dy2 * cos;
			dx2 = _this4.cx;
			dy2 = _this4.cy;
			_this4.cx = dx2 * cos - dy2 * sin;
			_this4.cy = dx2 * sin + dy2 * cos;
			_this4.ax += px2;
			_this4.ay += py2;
			_this4.bx += px2;
			_this4.by += py2;
			_this4.cx += px2;
			_this4.cy += py2;
			var _this5 = _this3.t1;
			var px3 = p1.x;
			var py3 = p1.y;
			_this5.ax -= px3;
			_this5.ay -= py3;
			_this5.bx -= px3;
			_this5.by -= py3;
			_this5.cx -= px3;
			_this5.cy -= py3;
			var dx3;
			var dy3;
			dx3 = _this5.ax;
			dy3 = _this5.ay;
			_this5.ax = dx3 * cos - dy3 * sin;
			_this5.ay = dx3 * sin + dy3 * cos;
			dx3 = _this5.bx;
			dy3 = _this5.by;
			_this5.bx = dx3 * cos - dy3 * sin;
			_this5.by = dx3 * sin + dy3 * cos;
			dx3 = _this5.cx;
			dy3 = _this5.cy;
			_this5.cx = dx3 * cos - dy3 * sin;
			_this5.cy = dx3 * sin + dy3 * cos;
			_this5.ax += px3;
			_this5.ay += py3;
			_this5.bx += px3;
			_this5.by += py3;
			_this5.cx += px3;
			_this5.cy += py3;
		}
		this.lastRook = this.rook;
	}
	,offsetX: function(ox) {
		this.centre.x = this.start.x + ox;
	}
	,moveX: function(dx) {
		this.start.x += dx;
		var l = this.blocks.length;
		var _g1 = 0;
		while(_g1 < l) this.blocks[_g1++].moveDelta(dx,0.);
		var _g11 = 0;
		while(_g11 < l) this.virtualBlocks[_g11++].moveDelta(dx,0.);
	}
	,moveDelta: function(dx,dy) {
		if(this.blocks.length == 0) {
			return;
		}
		if(this.blocks == null) {
			return;
		}
		this.centre.x += dx;
		this.centre.y += dy;
		var l = this.blocks.length;
		var _g1 = 0;
		while(_g1 < l) this.blocks[_g1++].moveDelta(dx,dy);
		var _g11 = 0;
		while(_g11 < l) this.virtualBlocks[_g11++].moveDelta(dx,dy);
	}
	,lastLocation: null
	,newLocation: null
	,getLocation: function() {
		this.lastLocation = this.newLocation;
		var arr = [];
		this.newLocation = arr;
		if(this.locked) {
			return arr;
		}
		return this.getVirtualCentreInt(this.newLocation);
	}
	,getCentreInt: function(centresInt) {
		var l = this.blocks.length;
		var lc = centresInt.length;
		if(this.locked) {
			return centresInt;
		}
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			centresInt[i + lc] = this.blocks[i].getCentreInt();
		}
		return centresInt;
	}
	,getVirtualCentreInt: function(virtualInt) {
		var l = this.virtualBlocks.length;
		if(this.locked) {
			return virtualInt;
		}
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			virtualInt[i] = this.virtualBlocks[i].getCentreInt();
		}
		return virtualInt;
	}
	,__class__: polyominoTriangles_game_Shape
};
var polyominoTriangles_game_ShapeGenerator = function(createShape) {
	this.random = 0;
	this.last = -1;
	this.templates = new polyominoTriangles_game_Templates(createShape);
};
polyominoTriangles_game_ShapeGenerator.__name__ = ["polyominoTriangles","game","ShapeGenerator"];
polyominoTriangles_game_ShapeGenerator.prototype = {
	templates: null
	,last: null
	,random: null
	,randomShape: function(p,col0_,col1_,shape) {
		if(shape == null) {
			shape = "polyomino_random";
		}
		var ts;
		if(shape == null) {
			if(shape == null) {
				var ts1 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts1.addBlock(-1,-1);
				ts1.addBlock(0,-1);
				ts1.addBlock(-1,0);
				ts1.addBlock(0,0);
				ts = ts1;
			} else {
				switch(shape) {
				case "polyomino_L":
					var ts2 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
					ts2.addBlock(-1,-1.5);
					ts2.addBlock(-1,-0.5);
					ts2.addBlock(-1,0.5);
					ts2.addBlock(0,0.5);
					ts = ts2;
					break;
				case "polyomino_Z":
					var ts3 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
					ts3.addBlock(-0.5,-1);
					ts3.addBlock(0.5,0);
					ts3.addBlock(0.5,-1);
					ts3.addBlock(1.5,0);
					ts = ts3;
					break;
				case "polyomino_box":
					var ts4 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
					ts4.addBlock(-1,-1);
					ts4.addBlock(0,-1);
					ts4.addBlock(-1,0);
					ts4.addBlock(0,0);
					ts = ts4;
					break;
				case "polyomino_l":
					var ts5 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
					ts5.addBlock(-0.5,-2);
					ts5.addBlock(-0.5,-1);
					ts5.addBlock(-0.5,0);
					ts5.addBlock(-0.5,1);
					ts = ts5;
					break;
				case "polyomino_t":
					var ts6 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
					ts6.addBlock(-1,-1.5);
					ts6.addBlock(-1,-0.5);
					ts6.addBlock(-1,0.5);
					ts6.addBlock(0,-0.5);
					ts = ts6;
					break;
				default:
					var ts7 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
					ts7.addBlock(-1,-1);
					ts7.addBlock(0,-1);
					ts7.addBlock(-1,0);
					ts7.addBlock(0,0);
					ts = ts7;
				}
			}
		} else if(shape == "polyomino_random") {
			var random = Math.round(4 * Math.random());
			haxe_Log.trace(random,{ fileName : "ShapeGenerator.hx", lineNumber : 47, className : "polyominoTriangles.game.ShapeGenerator", methodName : "randomShape"});
			if(random == this.last) {
				return this.randomShape(p,col0_,col1_);
			}
			switch(random) {
			case 0:
				var ts8 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts8.addBlock(-0.5,-1);
				ts8.addBlock(0.5,0);
				ts8.addBlock(0.5,-1);
				ts8.addBlock(1.5,0);
				ts = ts8;
				ts = ts8;
				break;
			case 1:
				var ts9 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts9.addBlock(-1,-1.5);
				ts9.addBlock(-1,-0.5);
				ts9.addBlock(-1,0.5);
				ts9.addBlock(0,0.5);
				ts = ts9;
				ts = ts9;
				break;
			case 2:
				var ts10 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts10.addBlock(-1,-1);
				ts10.addBlock(0,-1);
				ts10.addBlock(-1,0);
				ts10.addBlock(0,0);
				ts = ts10;
				ts = ts10;
				break;
			case 3:
				var ts11 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts11.addBlock(-1,-1.5);
				ts11.addBlock(-1,-0.5);
				ts11.addBlock(-1,0.5);
				ts11.addBlock(0,-0.5);
				ts = ts11;
				ts = ts11;
				break;
			case 4:
				var ts12 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
				ts12.addBlock(-0.5,-2);
				ts12.addBlock(-0.5,-1);
				ts12.addBlock(-0.5,0);
				ts12.addBlock(-0.5,1);
				ts = ts12;
				ts = ts12;
				break;
			default:
				var ts13 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts13.addBlock(-0.5,-1);
				ts13.addBlock(0.5,0);
				ts13.addBlock(0.5,-1);
				ts13.addBlock(1.5,0);
				ts = ts13;
				ts = ts13;
			}
		} else if(shape == null) {
			var ts14 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
			ts14.addBlock(-1,-1);
			ts14.addBlock(0,-1);
			ts14.addBlock(-1,0);
			ts14.addBlock(0,0);
			ts = ts14;
		} else {
			switch(shape) {
			case "polyomino_L":
				var ts15 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts15.addBlock(-1,-1.5);
				ts15.addBlock(-1,-0.5);
				ts15.addBlock(-1,0.5);
				ts15.addBlock(0,0.5);
				ts = ts15;
				break;
			case "polyomino_Z":
				var ts16 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Fix);
				ts16.addBlock(-0.5,-1);
				ts16.addBlock(0.5,0);
				ts16.addBlock(0.5,-1);
				ts16.addBlock(1.5,0);
				ts = ts16;
				break;
			case "polyomino_box":
				var ts17 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts17.addBlock(-1,-1);
				ts17.addBlock(0,-1);
				ts17.addBlock(-1,0);
				ts17.addBlock(0,0);
				ts = ts17;
				break;
			case "polyomino_l":
				var ts18 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Zero);
				ts18.addBlock(-0.5,-2);
				ts18.addBlock(-0.5,-1);
				ts18.addBlock(-0.5,0);
				ts18.addBlock(-0.5,1);
				ts = ts18;
				break;
			case "polyomino_t":
				var ts19 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Ninety);
				ts19.addBlock(-1,-1.5);
				ts19.addBlock(-1,-0.5);
				ts19.addBlock(-1,0.5);
				ts19.addBlock(0,-0.5);
				ts = ts19;
				break;
			default:
				var ts20 = this.templates.createPolyomino(p,polyominoTriangles_game_Snapped.Always);
				ts20.addBlock(-1,-1);
				ts20.addBlock(0,-1);
				ts20.addBlock(-1,0);
				ts20.addBlock(0,0);
				ts = ts20;
			}
		}
		this.last = this.random;
		return ts;
	}
	,__class__: polyominoTriangles_game_ShapeGenerator
};
var polyominoTriangles_game_Square = function(id,triangles_,x_,y_,dia_,gap_,col0_,col1_) {
	this._x = x_;
	this._y = y_;
	this.col0 = col0_;
	this.col1 = col1_;
	this.dia = dia_;
	this.gap = 0.;
	this._x2 = x_ + dia_;
	this._y2 = y_ + dia_;
	var x2 = this._x2;
	var y2 = this._y2;
	this.triangles = triangles_;
	var l = triangles_.length;
	this.t0 = new justTriangles_Triangle(id,true,{ x : x_, y : y_},{ x : x2, y : y_},{ x : x_, y : y2},0,this.col0);
	this.t1 = new justTriangles_Triangle(id,true,{ x : x_, y : y2},{ x : x2, y : y_},{ x : x2, y : y2},0,this.col1);
	this.triangles[l++] = this.t0;
	this.triangles[l++] = this.t1;
};
polyominoTriangles_game_Square.__name__ = ["polyominoTriangles","game","Square"];
polyominoTriangles_game_Square.prototype = {
	t0: null
	,t1: null
	,col0: null
	,col1: null
	,dia: null
	,gap: null
	,_x: null
	,_y: null
	,_x2: null
	,_y2: null
	,triangles: null
	,destroy: function() {
		this.removeTriangles();
		this.t0 = null;
		this.t1 = null;
	}
	,removeTriangles: function() {
		HxOverrides.remove(this.triangles,this.t0);
		HxOverrides.remove(this.triangles,this.t1);
	}
	,moveDelta: function(dx,dy) {
		var _this = this.t0;
		_this.ax += dx;
		_this.ay += dy;
		_this.bx += dx;
		_this.by += dy;
		_this.cx += dx;
		_this.cy += dy;
		var _this1 = this.t1;
		_this1.ax += dx;
		_this1.ay += dy;
		_this1.bx += dx;
		_this1.by += dy;
		_this1.cx += dx;
		_this1.cy += dy;
	}
	,hasTriangles: function() {
		if(this.t0 != null) {
			return this.t1 != null;
		} else {
			return false;
		}
	}
	,getCentreInt: function() {
		var dx = this.t0.bx;
		var dy = this.t0.by;
		var ex = this.t0.cx;
		var ey = this.t0.cy;
		return { x : (dx < ex ? dx + (ex - dx) / 2 : ex + (dx - ex) / 2) / this.dia | 0, y : (dy < ey ? dy + (ey - dy) / 2 : dy + (dy - ey) / 2 - this.dia) / this.dia | 0};
	}
	,get_right: function() {
		return Math.max(this.t0.get_right(),this.t1.get_right());
	}
	,get_x: function() {
		return Math.min(this.t0.get_x(),this.t1.get_x());
	}
	,set_x: function(x_) {
		var x0 = this.t0.get_x();
		var x1 = this.t1.get_x();
		if(x0 < x1) {
			this.t0.set_x(x_);
			var _g = this.t1;
			_g.set_x(_g.get_x() + (x_ - x0));
		} else {
			this.t1.set_x(x_);
			var _g1 = this.t0;
			_g1.set_x(_g1.get_x() + (x_ - x1));
		}
		this._x = x_;
		return x_;
	}
	,set_y: function(y_) {
		var y0 = this.t0.get_y();
		var y1 = this.t1.get_y();
		if(y0 < y1) {
			this.t0.set_y(y_);
			var _g = this.t1;
			_g.set_y(_g.get_y() + (y_ - y0));
		} else {
			this.t1.set_y(y_);
			var _g1 = this.t0;
			_g1.set_y(_g1.get_y() + (y_ - y1));
		}
		this._y = y_;
		return y_;
	}
	,__class__: polyominoTriangles_game_Square
};
var polyominoTriangles_game_Templates = function(createPolyomino_) {
	this.createPolyomino = createPolyomino_;
};
polyominoTriangles_game_Templates.__name__ = ["polyominoTriangles","game","Templates"];
polyominoTriangles_game_Templates.prototype = {
	createPolyomino: null
	,__class__: polyominoTriangles_game_Templates
};
var polyominoTriangles_test_Arr2DTest = function() {
	haxe_unit_TestCase.call(this);
};
polyominoTriangles_test_Arr2DTest.__name__ = ["polyominoTriangles","test","Arr2DTest"];
polyominoTriangles_test_Arr2DTest.UnitTest = function() {
	var r = new haxe_unit_TestRunner();
	haxe_Log.trace("Running unit test",{ fileName : "Arr2DTest.hx", lineNumber : 8, className : "polyominoTriangles.test.Arr2DTest", methodName : "UnitTest"});
	r.add(new polyominoTriangles_test_Arr2DTest());
	r.run();
	haxe_Log.trace(r,{ fileName : "Arr2DTest.hx", lineNumber : 11, className : "polyominoTriangles.test.Arr2DTest", methodName : "UnitTest"});
};
polyominoTriangles_test_Arr2DTest.__super__ = haxe_unit_TestCase;
polyominoTriangles_test_Arr2DTest.prototype = $extend(haxe_unit_TestCase.prototype,{
	filledArr2D: null
	,emptyArr2D: null
	,testClear: function() {
		var w = this.filledArr2D[0];
		var h = this.filledArr2D[1];
		var v = null;
		var this1;
		if(v == null) {
			if(w == null) {
				w = 100;
			}
			if(h == null) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.filledArr2D = this1;
		this.assertTrue(this.filledArr2D.toString() == this.emptyArr2D.toString(),{ fileName : "Arr2DTest.hx", lineNumber : 15, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClear"});
	}
	,testFill: function() {
		var this1 = this.emptyArr2D;
		var i = 2;
		var l = this1.length;
		while(i < l) {
			this1[i] = 1;
			++i;
		}
		this.assertTrue(this.filledArr2D.toString() == this.emptyArr2D.toString(),{ fileName : "Arr2DTest.hx", lineNumber : 19, className : "polyominoTriangles.test.Arr2DTest", methodName : "testFill"});
	}
	,testAddOne: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		this.assertTrue(this2[2 + this2[0] * 0 | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 23, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddOne"});
		var this3 = this.emptyArr2D;
		this.assertFalse(this3[2 + this3[0] | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 24, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddOne"});
	}
	,testAddZero: function() {
		var this1 = this.filledArr2D;
		this1[2 + this1[0] * 0 | 0] = 0;
		var this2 = this.filledArr2D;
		this.assertTrue(this2[2 + this2[0] * 0 | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 28, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddZero"});
		var this3 = this.filledArr2D;
		this.assertFalse(this3[2 + this3[0] | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 29, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddZero"});
	}
	,testIsZero: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var ix = _g1++;
				var this1 = this.emptyArr2D;
				this.assertTrue(this1[2 + this1[0] * iy + ix | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 34, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsZero"});
				var this2 = this.filledArr2D;
				this.assertFalse(this2[2 + this2[0] * iy + ix | 0] == 0,{ fileName : "Arr2DTest.hx", lineNumber : 35, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsZero"});
			}
		}
	}
	,testIsOne: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var ix = _g1++;
				var this1 = this.emptyArr2D;
				this.assertFalse(this1[2 + this1[0] * iy + ix | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 42, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsOne"});
				var this2 = this.filledArr2D;
				this.assertTrue(this2[2 + this2[0] * iy + ix | 0] == 1,{ fileName : "Arr2DTest.hx", lineNumber : 43, className : "polyominoTriangles.test.Arr2DTest", methodName : "testIsOne"});
			}
		}
	}
	,testLength: function() {
		this.assertTrue(this.filledArr2D.length == 11,{ fileName : "Arr2DTest.hx", lineNumber : 48, className : "polyominoTriangles.test.Arr2DTest", methodName : "testLength"});
	}
	,testRowFull: function() {
		var _g = 0;
		while(_g < 3) {
			var iy = _g++;
			var this1 = this.emptyArr2D;
			this1[2 + this1[0] * iy | 0] = 1;
			var this2 = this.emptyArr2D;
			this2[2 + this2[0] * iy + 1 | 0] = 1;
			var this3 = this.emptyArr2D;
			this3[2 + this3[0] * iy + 2 | 0] = 1;
			var this4 = this.emptyArr2D;
			var w = this4[0];
			var s = 2 + w * iy | 0;
			var e = s + w;
			var ful = true;
			var _g1 = s;
			while(_g1 < e) if(this4[_g1++] == 0) {
				ful = false;
				break;
			}
			this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 55, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowFull"});
			this.setup();
		}
		var _g2 = 0;
		while(_g2 < 3) {
			var iy1 = _g2++;
			var this5 = this.filledArr2D;
			this5[2 + this5[0] * iy1 | 0] = 0;
			var this6 = this.filledArr2D;
			this6[2 + this6[0] * iy1 + 1 | 0] = 0;
			var this7 = this.filledArr2D;
			this7[2 + this7[0] * iy1 + 2 | 0] = 0;
			var this8 = this.filledArr2D;
			var w1 = this8[0];
			var s1 = 2 + w1 * iy1 | 0;
			var e1 = s1 + w1;
			var ful1 = true;
			var _g11 = s1;
			while(_g11 < e1) if(this8[_g11++] == 0) {
				ful1 = false;
				break;
			}
			this.assertFalse(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 62, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowFull"});
			this.setup();
		}
	}
	,testMoveRow: function() {
		var this1 = this.filledArr2D;
		var w = this1[0];
		var s0 = 2 + w | 0;
		var e0 = 2 + w * 2 | 0;
		var _g1 = 0;
		while(_g1 < w) {
			var i = _g1++;
			this1[e0 + i] = this1[s0 + i];
			this1[s0 + i] = 0;
		}
		var this2 = this.filledArr2D;
		var w1 = this2[0];
		var s = 2 + w1 * 0 | 0;
		var e = s + w1;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 68, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
		var this3 = this.filledArr2D;
		var w2 = this3[0];
		var s1 = 2 + w2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this3[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertFalse(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 69, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
		var this4 = this.filledArr2D;
		var w3 = this4[0];
		var s2 = 2 + w3 * 2 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this4[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertTrue(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 70, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMoveRow"});
	}
	,testCopyRow: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] + 1 | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] + 2 | 0] = 1;
		var this4 = this.emptyArr2D;
		var w = this4[0];
		var s0 = 2 + w | 0;
		var e0 = 2 + w * 2 | 0;
		var _g1 = 0;
		while(_g1 < w) {
			var i = _g1++;
			this4[e0 + i] = this4[s0 + i];
		}
		var this5 = this.emptyArr2D;
		var w1 = this5[0];
		var s = 2 + w1 * 0 | 0;
		var e = s + w1;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this5[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertFalse(ful,{ fileName : "Arr2DTest.hx", lineNumber : 77, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
		var this6 = this.emptyArr2D;
		var w2 = this6[0];
		var s1 = 2 + w2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this6[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 78, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
		var this7 = this.emptyArr2D;
		var w3 = this7[0];
		var s2 = 2 + w3 * 2 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this7[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertTrue(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 79, className : "polyominoTriangles.test.Arr2DTest", methodName : "testCopyRow"});
	}
	,testOneRow: function() {
		var this1 = this.emptyArr2D;
		var w = this1[0];
		var s = 2 + w | 0;
		var _g1 = 0;
		while(_g1 < w) this1[s + _g1++] = 1;
		var this2 = this.emptyArr2D;
		var w1 = this2[0];
		var s1 = 2 + w1 | 0;
		var e = s1 + w1;
		var ful = true;
		var _g11 = s1;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 83, className : "polyominoTriangles.test.Arr2DTest", methodName : "testOneRow"});
	}
	,testZeroRow: function() {
		var this1 = this.filledArr2D;
		var w = this1[0];
		var s = 2 + w | 0;
		var _g1 = 0;
		while(_g1 < w) this1[s + _g1++] = 0;
		var this2 = this.filledArr2D;
		var w1 = this2[0];
		var s1 = 2 + w1 | 0;
		var e = s1 + w1;
		var emp = true;
		var _g11 = s1;
		while(_g11 < e) if(this2[_g11++] == 1) {
			emp = false;
			break;
		}
		this.assertTrue(emp,{ fileName : "Arr2DTest.hx", lineNumber : 87, className : "polyominoTriangles.test.Arr2DTest", methodName : "testZeroRow"});
	}
	,testRemoveRowsUnshift0: function() {
		var this1 = this.filledArr2D;
		this1[2 + this1[0] + 1 | 0] = 0;
		var this2 = this.filledArr2D;
		this2[2 + this2[0] * 2 + 1 | 0] = 0;
		var this3 = this.filledArr2D;
		var _g1 = 0;
		while(_g1 < 1) {
			var j = 0 - _g1++;
			var w = this3[0];
			var s0 = 2 + w * j | 0;
			var e0 = 2 + w * (j + 2) | 0;
			var _g11 = 0;
			while(_g11 < w) {
				var i = _g11++;
				this3[e0 + i] = this3[s0 + i];
				this3[s0 + i] = 0;
			}
		}
		var _g12 = 0;
		while(_g12 < 2) {
			var w1 = this3[0];
			var s = 2 + w1 * _g12++ | 0;
			var _g13 = 0;
			while(_g13 < w1) this3[s + _g13++] = 0;
		}
		var this4 = this.filledArr2D;
		var w2 = this4[0];
		var s1 = 2 + w2 * 0 | 0;
		var e = s1 + w2;
		var emp = true;
		var _g14 = s1;
		while(_g14 < e) if(this4[_g14++] == 1) {
			emp = false;
			break;
		}
		this.assertTrue(emp,{ fileName : "Arr2DTest.hx", lineNumber : 93, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
		var this5 = this.filledArr2D;
		var w3 = this5[0];
		var s2 = 2 + w3 | 0;
		var e1 = s2 + w3;
		var emp1 = true;
		var _g15 = s2;
		while(_g15 < e1) if(this5[_g15++] == 1) {
			emp1 = false;
			break;
		}
		this.assertTrue(emp1,{ fileName : "Arr2DTest.hx", lineNumber : 94, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
		var this6 = this.filledArr2D;
		var w4 = this6[0];
		var s3 = 2 + w4 * 2 | 0;
		var e2 = s3 + w4;
		var ful = true;
		var _g16 = s3;
		while(_g16 < e2) if(this6[_g16++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 95, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRemoveRowsUnshift0"});
	}
	,testClash: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] * 2 | 0] = 1;
		var a2 = [{ x : 1, y : 0},{ x : 1, y : 1},{ x : 1, y : 2}];
		var this4 = this.emptyArr2D;
		var lp = a2.length;
		var p;
		var clash = false;
		var _g1 = 0;
		while(_g1 < lp) {
			p = a2[_g1++];
			if(this4[2 + this4[0] * p.y + p.x | 0] == 1) {
				clash = true;
				break;
			}
		}
		this.assertFalse(clash,{ fileName : "Arr2DTest.hx", lineNumber : 102, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClash"});
		var this5 = this.emptyArr2D;
		this5[2 + this5[0] * 0 | 0] = 1;
		var this6 = this.emptyArr2D;
		this6[2 + this6[0] | 0] = 1;
		var this7 = this.emptyArr2D;
		this7[2 + this7[0] * 2 | 0] = 1;
		var a21 = [{ x : 0, y : 0},{ x : 0, y : 1},{ x : 0, y : 2}];
		var this8 = this.emptyArr2D;
		var lp1 = a21.length;
		var p1;
		var clash1 = false;
		var _g11 = 0;
		while(_g11 < lp1) {
			p1 = a21[_g11++];
			if(this8[2 + this8[0] * p1.y + p1.x | 0] == 1) {
				clash1 = true;
				break;
			}
		}
		this.assertTrue(clash1,{ fileName : "Arr2DTest.hx", lineNumber : 107, className : "polyominoTriangles.test.Arr2DTest", methodName : "testClash"});
	}
	,testAddPoints: function() {
		var a2 = [{ x : 0, y : 1},{ x : 1, y : 1},{ x : 2, y : 1}];
		var this1 = this.emptyArr2D;
		var lp = a2.length;
		var p;
		var _g1 = 0;
		while(_g1 < lp) {
			p = a2[_g1++];
			this1[2 + this1[0] * p.y + p.x | 0] = 1;
		}
		var this2 = this.emptyArr2D;
		var w = this2[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var ful = true;
		var _g11 = s;
		while(_g11 < e) if(this2[_g11++] == 0) {
			ful = false;
			break;
		}
		this.assertFalse(ful,{ fileName : "Arr2DTest.hx", lineNumber : 112, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
		var this3 = this.emptyArr2D;
		var w1 = this3[0];
		var s1 = 2 + w1 | 0;
		var e1 = s1 + w1;
		var ful1 = true;
		var _g12 = s1;
		while(_g12 < e1) if(this3[_g12++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 113, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
		var this4 = this.emptyArr2D;
		var w2 = this4[0];
		var s2 = 2 + w2 * 2 | 0;
		var e2 = s2 + w2;
		var ful2 = true;
		var _g13 = s2;
		while(_g13 < e2) if(this4[_g13++] == 0) {
			ful2 = false;
			break;
		}
		this.assertFalse(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 114, className : "polyominoTriangles.test.Arr2DTest", methodName : "testAddPoints"});
	}
	,testOverlap: function() {
		var a = this.filledArr2D;
		var b = this.emptyArr2D;
		var la = a.length;
		if(la != b.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped = false;
		var ai;
		var bi;
		var _g1 = 2;
		while(_g1 < la) {
			var i = _g1++;
			ai = a[i];
			bi = b[i];
			if(ai == 1 && bi == 1) {
				overlapped = true;
				break;
			}
		}
		this.assertFalse(overlapped,{ fileName : "Arr2DTest.hx", lineNumber : 117, className : "polyominoTriangles.test.Arr2DTest", methodName : "testOverlap"});
	}
	,testID: function() {
		var w = 4;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		var a0 = this1;
		a0[2 + a0[0] * 2 | 0] = 1;
		a0[2 + a0[0] | 0] = 1;
		this.assertTrue(a0.toString() == "4,3,0,0,0,0,1,0,0,0,1,0,0,0",{ fileName : "Arr2DTest.hx", lineNumber : 124, className : "polyominoTriangles.test.Arr2DTest", methodName : "testID"});
		var count = 2;
		var _g1 = 0;
		while(_g1 < 4) {
			var y = _g1++;
			var _g3 = 0;
			while(_g3 < 3) {
				this.assertTrue((2 + 3 * y + _g3++ | 0) == count,{ fileName : "Arr2DTest.hx", lineNumber : 130, className : "polyominoTriangles.test.Arr2DTest", methodName : "testID"});
				++count;
			}
		}
	}
	,testMerge: function(b) {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] | 0] = 1;
		var this2 = this.emptyArr2D;
		this2[2 + this2[0] + 1 | 0] = 1;
		var this3 = this.emptyArr2D;
		this3[2 + this3[0] + 2 | 0] = 1;
		var this4 = this.emptyArr2D;
		var w = this4[0];
		var s = 2 + w | 0;
		var e = s + w;
		var ful = true;
		var _g1 = s;
		while(_g1 < e) if(this4[_g1++] == 0) {
			ful = false;
			break;
		}
		this.assertTrue(ful,{ fileName : "Arr2DTest.hx", lineNumber : 139, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var w1 = 3;
		var h = 3;
		var v = null;
		var this5;
		if(v == null) {
			if(false) {
				w1 = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w1 * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w1;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w1,h,_g);
		}
		this5 = v;
		var a0 = this5;
		a0[2 + a0[0] * 2 | 0] = 1;
		a0[2 + a0[0] * 2 + 1 | 0] = 1;
		a0[2 + a0[0] * 2 + 2 | 0] = 1;
		var w2 = a0[0];
		var s1 = 2 + w2 * 2 | 0;
		var e1 = s1 + w2;
		var ful1 = true;
		var _g11 = s1;
		while(_g11 < e1) if(a0[_g11++] == 0) {
			ful1 = false;
			break;
		}
		this.assertTrue(ful1,{ fileName : "Arr2DTest.hx", lineNumber : 144, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var a = this.emptyArr2D;
		var la = a.length;
		if(la != a0.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped = false;
		var ai;
		var bi;
		var _g12 = 2;
		while(_g12 < la) {
			var i = _g12++;
			ai = a[i];
			bi = a0[i];
			if(ai == 1 && bi == 1) {
				overlapped = true;
				break;
			}
		}
		this.assertFalse(overlapped,{ fileName : "Arr2DTest.hx", lineNumber : 145, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this6 = this.emptyArr2D;
		var tmp;
		var la1 = this6.length;
		if(la1 != a0.length) {
			throw new js__$Boot_HaxeError("can t compare Arr2D");
		}
		var overlapped1 = false;
		var ai1;
		var bi1;
		var _g13 = 2;
		while(_g13 < la1) {
			var i1 = _g13++;
			ai1 = this6[i1];
			bi1 = a0[i1];
			if(ai1 == 1 && bi1 == 1) {
				overlapped1 = true;
				break;
			}
		}
		if(overlapped1) {
			tmp = false;
		} else {
			var la2 = this6.length;
			var ai2;
			var _g14 = 2;
			while(_g14 < la2) {
				var i2 = _g14++;
				ai2 = this6[i2];
				if(ai2 == 0) {
					this6[i2] = a0[i2];
				}
			}
			tmp = true;
		}
		this.assertTrue(tmp,{ fileName : "Arr2DTest.hx", lineNumber : 146, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this7 = this.emptyArr2D;
		var w3 = this7[0];
		var s2 = 2 + w3 * 0 | 0;
		var e2 = s2 + w3;
		var ful2 = true;
		var _g15 = s2;
		while(_g15 < e2) if(this7[_g15++] == 0) {
			ful2 = false;
			break;
		}
		this.assertFalse(ful2,{ fileName : "Arr2DTest.hx", lineNumber : 147, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this8 = this.emptyArr2D;
		var w4 = this8[0];
		var s3 = 2 + w4 | 0;
		var e3 = s3 + w4;
		var ful3 = true;
		var _g16 = s3;
		while(_g16 < e3) if(this8[_g16++] == 0) {
			ful3 = false;
			break;
		}
		this.assertTrue(ful3,{ fileName : "Arr2DTest.hx", lineNumber : 148, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
		var this9 = this.emptyArr2D;
		var w5 = this9[0];
		var s4 = 2 + w5 * 2 | 0;
		var e4 = s4 + w5;
		var ful4 = true;
		var _g17 = s4;
		while(_g17 < e4) if(this9[_g17++] == 0) {
			ful4 = false;
			break;
		}
		this.assertTrue(ful4,{ fileName : "Arr2DTest.hx", lineNumber : 149, className : "polyominoTriangles.test.Arr2DTest", methodName : "testMerge"});
	}
	,testRowToString: function() {
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		var w = this2[0];
		var s = 2 + w * 0 | 0;
		var e = s + w;
		var str = "\n";
		var _g1 = s;
		while(_g1 < e) str = str + this2[_g1++] + "  ";
		this.assertTrue(str == "\n1  0  0  ",{ fileName : "Arr2DTest.hx", lineNumber : 154, className : "polyominoTriangles.test.Arr2DTest", methodName : "testRowToString"});
	}
	,testPrettyString: function() {
		var str = "\n1  0  0  " + "\n0  0  0  " + "\n0  0  0  ";
		var this1 = this.emptyArr2D;
		this1[2 + this1[0] * 0 | 0] = 1;
		var this2 = this.emptyArr2D;
		var str1 = "";
		var _g1 = 0;
		var _g = this2[1];
		while(_g1 < _g) {
			var w = this2[0];
			var s = 2 + w * _g1++ | 0;
			var e = s + w;
			var str2 = "\n";
			var _g11 = s;
			while(_g11 < e) str2 = str2 + this2[_g11++] + "  ";
			str1 += str2;
		}
		this.assertTrue(str1 == str,{ fileName : "Arr2DTest.hx", lineNumber : 161, className : "polyominoTriangles.test.Arr2DTest", methodName : "testPrettyString"});
	}
	,setup: function() {
		this.createfilledArr2D();
		var w = 3;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.emptyArr2D = this1;
	}
	,createfilledArr2D: function() {
		var w = 3;
		var h = 3;
		var v = null;
		var this1;
		if(v == null) {
			if(false) {
				w = 100;
			}
			if(false) {
				h = 100;
			}
			var l = w * h + 2;
			var _g = [];
			var _g2 = 0;
			while(_g2 < l) {
				++_g2;
				_g.push(0);
			}
			_g[0] = w;
			_g[1] = h;
			v = polyominoTriangles_game__$Arr2D_Arr2D_$Impl_$._new(w,h,_g);
		}
		this1 = v;
		this.filledArr2D = this1;
		var _g1 = 0;
		while(_g1 < 3) {
			var iy = _g1++;
			var _g11 = 0;
			while(_g11 < 3) {
				var this2 = this.filledArr2D;
				this2[2 + this2[0] * iy + _g11++ | 0] = 1;
			}
		}
	}
	,__class__: polyominoTriangles_test_Arr2DTest
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
htmlHelper_tools_AnimateTimer.counter = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
justTriangles_Triangle.triangles = [];
polyominoTriangles_PolyominoTrianglesWebGL.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
